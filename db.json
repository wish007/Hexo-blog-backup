{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/README.md","path":"README.md","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"themes/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"a7ce590475a245970a44892afc964207a3ae5de3","modified":1486120433331},{"_id":"source/README.md","hash":"e6f9af0063fa48e67b14fa0b9a452e8f83a8c600","modified":1478326064327},{"_id":"source/favicon.ico","hash":"1d709a70141376eb7570d1cff52cfd4804bc4073","modified":1480512814175},{"_id":"themes/hexo-theme-next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1478318682668},{"_id":"themes/hexo-theme-next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1478318682668},{"_id":"themes/hexo-theme-next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1478318682668},{"_id":"themes/hexo-theme-next/.gitignore","hash":"5f09fca02e030b7676c1d312cd88ce8fbccf381c","modified":1478318682668},{"_id":"themes/hexo-theme-next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1478318682668},{"_id":"themes/hexo-theme-next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1478318682668},{"_id":"themes/hexo-theme-next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1478318682668},{"_id":"themes/hexo-theme-next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1478318682668},{"_id":"themes/hexo-theme-next/_config.yml","hash":"3e201417f9e45f642da0dfbd448a9219fd3bb51e","modified":1478323179564},{"_id":"themes/hexo-theme-next/bower.json","hash":"023b5b945bc45c205129a18e26d304fb9caa15c7","modified":1478318682668},{"_id":"themes/hexo-theme-next/gulpfile.coffee","hash":"d267332ec1461042fb16a9cb0737e1555fb4b79e","modified":1478318682668},{"_id":"themes/hexo-theme-next/package.json","hash":"0d43e71169c5e08917e73cd12aa79562c836712e","modified":1478318682684},{"_id":"source/_posts/Git初体验.md","hash":"891790bf0650069d21635efee63511b4c6a49ce0","modified":1473490571946},{"_id":"source/_posts/Windows下Python2和Python3共存的设置方法.md","hash":"936aec4e21cf63e3203febc1296064a4c688052d","modified":1486997785357},{"_id":"source/_posts/优雅地使用Python之环境管理.md","hash":"b1b909c3b039917880bbcd7459e78d91bc9490a0","modified":1486997830886},{"_id":"source/_posts/使用uWSGI和Nginx部署Flask.md","hash":"243174192cae63eb543e8739164e94cf32edb27a","modified":1486998374110},{"_id":"source/_posts/初识MySQL数据库.md","hash":"c694190d6697b4b6ffe9ce3fc10bc0f4230ba06c","modified":1486994037038},{"_id":"source/_posts/在Hexo中插入图片.md","hash":"d0aee228403ad79b5d4831f3260cec1ab631e248","modified":1486997863076},{"_id":"source/_posts/搭建Django博客（1）环境准备与连接数据库.md","hash":"e4876e3e5926d146bf0d071e2d679be117de46ac","modified":1486210653008},{"_id":"source/_posts/搭建Django博客（2）创建数据模型.md","hash":"91a5347bc5b005d48f92c9cfd12408cb47569d2b","modified":1486028122795},{"_id":"source/_posts/搭建Django博客（3）网页处理逻辑.md","hash":"58529f45e3786bd02d15b6f7b291ff92f7b0470f","modified":1486210429244},{"_id":"source/_posts/搭建Django博客（4）多说评论框.md","hash":"d4857395cbb2355d181381db1218a50d4b3f2286","modified":1486129026183},{"_id":"source/_posts/搭建Django博客（5）Markdown语法显示文章.md","hash":"38f8d7798f7d11c7f66c2290400c301cfde5e30e","modified":1473266251659},{"_id":"source/_posts/搭建Django博客（6）代码高亮及后台Markdown编辑器.md","hash":"75108bc725ce748824692ee143155762fa26e7be","modified":1486209702117},{"_id":"source/_posts/搭建Django博客（7）Django 博客搭建总结.md","hash":"18093a75c4a74fac459f2b10487b2a5584b2a1e4","modified":1486211084006},{"_id":"source/_posts/搭建Django博客（8）部署Django博客到VPS.md","hash":"9e696e30c4c565f02675dd481c5b9e95c07cb725","modified":1486998367354},{"_id":"source/_posts/模拟登陆无线路由器（TL-WDR5600）.md","hash":"bdb60eb1182b9d814515fe87c71154a0397a6fb8","modified":1478433761586},{"_id":"source/_posts/用Hexo写博客并部署到GitHub Pages.md","hash":"aae23ef81a1253c9602e91b41dbd98b9ed8f8d90","modified":1473593362178},{"_id":"source/_posts/用Requests和BeautifulSoup爬取妹子图.md","hash":"fc0bf7d0502925d9b4d8b7061338615d2cdd265c","modified":1482763539202},{"_id":"source/_posts/知乎爬虫.md","hash":"f3eb8cefa94e94ed4b35d87c270fa773a6d35c11","modified":1478349071762},{"_id":"source/categories/index.md","hash":"609f93fd96fdce2ab0bc7a21228fae05d9276930","modified":1460482909743},{"_id":"source/tags/index.md","hash":"73298e31e3e9d66151495edb921a96cb0482352d","modified":1460481362005},{"_id":"themes/hexo-theme-next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1478318682653},{"_id":"themes/hexo-theme-next/.git/config","hash":"340cff4364d9733a32042fdb93097c334a781c93","modified":1478318682653},{"_id":"themes/hexo-theme-next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1478318672606},{"_id":"themes/hexo-theme-next/.git/index","hash":"681694f57bab4524f7b137e0ad91d9d8279e8283","modified":1478320518848},{"_id":"themes/hexo-theme-next/.git/packed-refs","hash":"243bd8ada9526c51366f18d4e63883e562312bcb","modified":1478318682653},{"_id":"themes/hexo-theme-next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1478318682668},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1478318682668},{"_id":"themes/hexo-theme-next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1478318682668},{"_id":"themes/hexo-theme-next/languages/en.yml","hash":"63de36e9f5822084b61b03a507f6246f8f962b3f","modified":1478318682668},{"_id":"themes/hexo-theme-next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1478318682668},{"_id":"themes/hexo-theme-next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1478318682668},{"_id":"themes/hexo-theme-next/languages/id.yml","hash":"147c01e41b931085ad14250fa900c2249dcbbdd7","modified":1478318682668},{"_id":"themes/hexo-theme-next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1478318682668},{"_id":"themes/hexo-theme-next/languages/pt-BR.yml","hash":"462aa865ca3d479bcf6b363cba61247b50f230ff","modified":1478318682668},{"_id":"themes/hexo-theme-next/languages/ko.yml","hash":"ce8b047c89daae77c03482fc76f16ffec6bdbf2d","modified":1478318682668},{"_id":"themes/hexo-theme-next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1478318682668},{"_id":"themes/hexo-theme-next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1478318682668},{"_id":"themes/hexo-theme-next/languages/zh-Hans.yml","hash":"ed36a28104f3c185fc4a0b3e52071d0efabe168c","modified":1478318682668},{"_id":"themes/hexo-theme-next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1478318682668},{"_id":"themes/hexo-theme-next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1478318682668},{"_id":"themes/hexo-theme-next/layout/_layout.swig","hash":"627aa021dd052d3700e84f8c2eeabd4e30989158","modified":1478318682668},{"_id":"themes/hexo-theme-next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1478318682684},{"_id":"themes/hexo-theme-next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1478318682684},{"_id":"themes/hexo-theme-next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1478318682684},{"_id":"themes/hexo-theme-next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1478318682684},{"_id":"themes/hexo-theme-next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1478318682684},{"_id":"themes/hexo-theme-next/layout/schedule.swig","hash":"1f1cdc268f4ef773fd3ae693bbdf7d0b2f45c3a3","modified":1478318682684},{"_id":"themes/hexo-theme-next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1478318682684},{"_id":"themes/hexo-theme-next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1478318682684},{"_id":"themes/hexo-theme-next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1478318682731},{"_id":"themes/hexo-theme-next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1478318682731},{"_id":"themes/hexo-theme-next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1478318682731},{"_id":"themes/hexo-theme-next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1478318682699},{"_id":"source/_posts/Git初体验/addsshkey.png","hash":"7f2af91eeec6533357a1754260c723feadb7cabf","modified":1473445008315},{"_id":"source/_posts/Git初体验/git.jpg","hash":"fc8e4edbb7ac51e3ba079428373283cf6ee324f1","modified":1473476153378},{"_id":"source/_posts/使用uWSGI和Nginx部署Flask/uwsgi.png","hash":"bd7f5031e3999189b8ed4dfde472520994d606d4","modified":1485338073793},{"_id":"source/_posts/使用uWSGI和Nginx部署Flask/web.png","hash":"98c3564be51833e1c4ce60ecadd407a9808c6a68","modified":1485176847072},{"_id":"source/_posts/搭建Django博客（1）环境准备与连接数据库/WelcomeToDjango.png","hash":"2da02c3e64c2dfc4060613404a57bc8feb7f5902","modified":1472304450253},{"_id":"source/_posts/搭建Django博客（2）创建数据模型/admin.png","hash":"15250ad91ed8f5b361c516621f386e81be846503","modified":1473081162293},{"_id":"source/_posts/搭建Django博客（2）创建数据模型/login.png","hash":"a45646cd8350362be91d77b31cea1333bcf78d99","modified":1473080957905},{"_id":"source/_posts/搭建Django博客（7）Django 博客搭建总结/home.png","hash":"ebc007df2642fb0f7a3038cfaa03deb5a01d6d04","modified":1473173395668},{"_id":"source/_posts/搭建Django博客（8）部署Django博客到VPS/deploy.png","hash":"f6329260e24d96036b2ecab72add5868e72a56cd","modified":1486289324627},{"_id":"source/_posts/模拟登陆无线路由器（TL-WDR5600）/stok.png","hash":"20dc88879fe34f57c7c29ab8c2100c28e2b99714","modified":1478094199684},{"_id":"source/_posts/模拟登陆无线路由器（TL-WDR5600）/抓取结果.png","hash":"3c2b8928b1620c1cf160f1f20c704f60338572c4","modified":1478347043119},{"_id":"source/_posts/模拟登陆无线路由器（TL-WDR5600）/登录界面.png","hash":"22f85dae6c7dfffb85c9245fb3fb0d6cb4f8b37f","modified":1478094053473},{"_id":"source/_posts/知乎爬虫/xsrf.png","hash":"510313c848428e4ea302da0bae792dcc00b25fb0","modified":1478331732351},{"_id":"source/_posts/知乎爬虫/中文验证码.png","hash":"9fe91f10a3ec19223067dc686d2f0f09387c93cd","modified":1478334102628},{"_id":"source/_posts/知乎爬虫/中文验证码FormData.png","hash":"c8f3b4ecc8fb57920e4d5fcebb19c1b3a13be4c9","modified":1478339069875},{"_id":"source/_posts/知乎爬虫/手机号FormData.png","hash":"d0eb6013b3d622a6490f73f9aaf09abc6bb49203","modified":1478330504429},{"_id":"source/_posts/知乎爬虫/手机号登录.png","hash":"f3206f6318cdb5c8d20ec270a6dd6daf4210e219","modified":1478329054245},{"_id":"source/_posts/知乎爬虫/英文验证码.png","hash":"542222346b61d2bed6c4a0aaca496e8779e69762","modified":1478338971009},{"_id":"source/_posts/知乎爬虫/获取验证码.png","hash":"073d47886227f4bc3940bec16d44af15a2f412a0","modified":1478334786555},{"_id":"source/_posts/知乎爬虫/邮箱FormData.png","hash":"a11dbab2aed3850487eb49759c10c743b7fc7365","modified":1478339028310},{"_id":"source/_posts/知乎爬虫/邮箱登录.png","hash":"f00f81002b14b80e909ccad3e2adee694229afcd","modified":1478329102728},{"_id":"source/_posts/知乎爬虫/首页内容标题.png","hash":"dd1956d97b864ec4a83faabb887ad10a30912a48","modified":1478348477482},{"_id":"source/_posts/知乎爬虫/验证码分辨率.png","hash":"d379b403b85365b5987435a1abf3c4a31d7c3310","modified":1478334153588},{"_id":"themes/hexo-theme-next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1478318672606},{"_id":"themes/hexo-theme-next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1478318672622},{"_id":"themes/hexo-theme-next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1478318672622},{"_id":"themes/hexo-theme-next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1478318672622},{"_id":"themes/hexo-theme-next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1478318672622},{"_id":"themes/hexo-theme-next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1478318672622},{"_id":"themes/hexo-theme-next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1478318672622},{"_id":"themes/hexo-theme-next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1478318672622},{"_id":"themes/hexo-theme-next/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1478318672622},{"_id":"themes/hexo-theme-next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1478318672622},{"_id":"themes/hexo-theme-next/.git/logs/HEAD","hash":"dd5fa24603010b1ea09fc3fb9094f1c21f688852","modified":1478318682653},{"_id":"themes/hexo-theme-next/layout/_partials/comments.swig","hash":"58fd826ca75b0cbc48b61a58da4b841e2fa34403","modified":1478318682668},{"_id":"themes/hexo-theme-next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1478318682668},{"_id":"themes/hexo-theme-next/layout/_partials/footer.swig","hash":"4fe588ff8ba8587885c2936db2df490774f89e10","modified":1478318682668},{"_id":"themes/hexo-theme-next/layout/_partials/head.swig","hash":"06b6604176367af52587312e2575b52ecf53c3d9","modified":1478318682668},{"_id":"themes/hexo-theme-next/layout/_partials/header.swig","hash":"eb028685cb3c329537bbced06c063d23e6a33817","modified":1478318682668},{"_id":"themes/hexo-theme-next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1478318682668},{"_id":"themes/hexo-theme-next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1478318682668},{"_id":"themes/hexo-theme-next/layout/_macro/post.swig","hash":"ea40d388ae190e2228cbe54f054be621e3fa061c","modified":1478318682668},{"_id":"themes/hexo-theme-next/layout/_macro/post-collapse.swig","hash":"bc311e9f4333188da5c9c721ae467ba14410d5b2","modified":1478318682668},{"_id":"themes/hexo-theme-next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1478318682668},{"_id":"themes/hexo-theme-next/layout/_macro/sidebar.swig","hash":"084867c289c95c5ebc18435a3b2092091bb8e2ba","modified":1478318682668},{"_id":"themes/hexo-theme-next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1478318682668},{"_id":"themes/hexo-theme-next/layout/_scripts/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1478318682668},{"_id":"themes/hexo-theme-next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1478318682668},{"_id":"themes/hexo-theme-next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1478318682668},{"_id":"themes/hexo-theme-next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1478318682684},{"_id":"themes/hexo-theme-next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1478318682684},{"_id":"themes/hexo-theme-next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1478318682684},{"_id":"themes/hexo-theme-next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1478318682684},{"_id":"themes/hexo-theme-next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/images/avatar.jpg","hash":"8a2c9d144a2af093dec50e00911ea0e2c0564044","modified":1460052172962},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1478318682715},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1478318682715},{"_id":"source/_posts/搭建Django博客（6）代码高亮及后台Markdown编辑器/markdown_editor.png","hash":"168945a6d962c5cdf5d072a42de5ee0c40f254e9","modified":1486208958958},{"_id":"source/_posts/搭建Django博客（7）Django 博客搭建总结/archives.png","hash":"a620288af11ea69d152931b25ce978d0f970962d","modified":1473172563744},{"_id":"source/_posts/搭建Django博客（7）Django 博客搭建总结/post.png","hash":"50668f00d5dc9a45f120877e90a5c6c60c226409","modified":1473172689971},{"_id":"source/_posts/模拟登陆无线路由器（TL-WDR5600）/登录.png","hash":"b25abbe50f858f091347efb6389a577fba95e8a9","modified":1478094147422},{"_id":"source/_posts/模拟登陆无线路由器（TL-WDR5600）/获取数据.png","hash":"2ae0f682455f70952784649e6c72b28df67aeeb6","modified":1478094297070},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1478318682684},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1478318682684},{"_id":"themes/hexo-theme-next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1478318682699},{"_id":"source/_posts/搭建Django博客（3）网页处理逻辑/flow.png","hash":"f99171ffb49e0b9da02d83c568ded7eb79872e40","modified":1473088588775},{"_id":"source/_posts/模拟登陆无线路由器（TL-WDR5600）/加密函数2.png","hash":"6bfbb8dd458ec1cfb00b2756c286456496939918","modified":1478095615267},{"_id":"source/_posts/模拟登陆无线路由器（TL-WDR5600）/加密函数1.png","hash":"48ee562e6a78d87b159e25b3399a8e04b5f3bcba","modified":1478095437277},{"_id":"themes/hexo-theme-next/.git/refs/heads/master","hash":"d6c22a05113bbbce7488f021e3b6950149e5c281","modified":1478318682653},{"_id":"themes/hexo-theme-next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1478318682668},{"_id":"themes/hexo-theme-next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1478318682668},{"_id":"themes/hexo-theme-next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1478318682668},{"_id":"themes/hexo-theme-next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1478318682668},{"_id":"themes/hexo-theme-next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1478318682668},{"_id":"themes/hexo-theme-next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1478318682668},{"_id":"themes/hexo-theme-next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1478318682668},{"_id":"themes/hexo-theme-next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1478318682668},{"_id":"themes/hexo-theme-next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1478318682684},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1478318682684},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1478318682684},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1478318682684},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1478318682684},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/localsearch.swig","hash":"dc8023c524594b6b85905c776899f5f53973577f","modified":1478318682684},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/mathjax.swig","hash":"5bafc33f57508d1d04a9930165240f6e9efa8d6d","modified":1478318682684},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1478318682684},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1478318682684},{"_id":"themes/hexo-theme-next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"3ead77befa064d6327dc7afd0a5af7be59a5f196","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/css/_variables/base.styl","hash":"3f0d6aa424f434e82ea507f740eeff110f996269","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1478318682715},{"_id":"themes/hexo-theme-next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1478318682715},{"_id":"themes/hexo-theme-next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1478318682715},{"_id":"themes/hexo-theme-next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1478318682715},{"_id":"themes/hexo-theme-next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1478318682715},{"_id":"themes/hexo-theme-next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1478318682715},{"_id":"themes/hexo-theme-next/source/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1478318682715},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1478318682715},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1478318682715},{"_id":"themes/hexo-theme-next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1478318682715},{"_id":"themes/hexo-theme-next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1478318682715},{"_id":"themes/hexo-theme-next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1478318682715},{"_id":"themes/hexo-theme-next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1478318682715},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1478318682715},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1478318682715},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1478318682715},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1478318682715},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1478318682715},{"_id":"themes/hexo-theme-next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1478318682731},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1478318682731},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1478318682731},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1478318682731},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1478318682731},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1478318682731},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1478318682731},{"_id":"themes/hexo-theme-next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1478318682731},{"_id":"themes/hexo-theme-next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1478318682731},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1478318682731},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1478318682731},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1478318682731},{"_id":"source/_posts/用Requests和BeautifulSoup爬取妹子图/meizitu.png","hash":"f17456235ce11d43fe680c3ce25c50faff6c55ca","modified":1473519380914},{"_id":"themes/hexo-theme-next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1478318682731},{"_id":"themes/hexo-theme-next/.git/logs/refs/heads/master","hash":"dd5fa24603010b1ea09fc3fb9094f1c21f688852","modified":1478318682653},{"_id":"themes/hexo-theme-next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1478318682653},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1478318682684},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1478318682684},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1478318682684},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1478318682684},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1478318682684},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1478318682684},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/comments/disqus.swig","hash":"3065c1bcb54da1e0018136595741341ac71ef9e7","modified":1478318682684},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"696666141cdd204fd8818ac2ad18f05e320f8587","modified":1478318682684},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1478318682684},{"_id":"themes/hexo-theme-next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1478318682684},{"_id":"themes/hexo-theme-next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1478318682684},{"_id":"themes/hexo-theme-next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1478318682684},{"_id":"themes/hexo-theme-next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1478318682684},{"_id":"themes/hexo-theme-next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"7b206cd8921bc042f8e37a74aea1abc8a5ec8ab4","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1478318682715},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1478318682715},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1478318682715},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1478318682715},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1478318682715},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1478318682715},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1478318682715},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1478318682715},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1478318682715},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1478318682715},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1478318682715},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1478318682715},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1478318682715},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1478318682715},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1478318682715},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1478318682731},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1478318682731},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1478318682731},{"_id":"themes/hexo-theme-next/.git/objects/pack/pack-d7f9900e407f50cf6854c435d4f274ead2f5117b.idx","hash":"f4a5ac1fe0329243bf6b253a0ea4691d0afe924c","modified":1478318682606},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1478318682715},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1478318682715},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1478318682731},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1478318682731},{"_id":"themes/hexo-theme-next/.git/logs/refs/remotes/origin/HEAD","hash":"dd5fa24603010b1ea09fc3fb9094f1c21f688852","modified":1478318682653},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1478318682684},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1478318682684},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1478318682684},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1478318682684},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1478318682684},{"_id":"themes/hexo-theme-next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1478318682684},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/highlight.styl","hash":"d23db2f598b8eb274680023745ba6d6d466cd84a","modified":1478318682684},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1478318682684},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/theme.styl","hash":"90f8f9706cd7fe829cf06e9959a65fd3f8b994fa","modified":1478318682684},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1478318682684},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1478318682684},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1478318682684},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1478318682684},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1478318682684},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1478318682684},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1478318682684},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1478318682684},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1478318682684},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-meta.styl","hash":"d543d1377c1f61b70e3adb6da0eb12797552e5f2","modified":1478318682684},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1478318682684},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1478318682684},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1478318682684},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1478318682684},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1478318682684},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1478318682684},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1478318682684},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1478318682684},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1478318682684},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1478318682684},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1478318682684},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1478318682684},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1478318682684},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/localsearch.styl","hash":"637c6b32c58ecf40041be6e911471cd82671919b","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/third-party.styl","hash":"3afc459442c132c480d1d832f1a872f1070bb048","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1478318682699},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1478318682715},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1478318682715},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1478318682715},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1478318682715},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1478318682715},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1478318682715},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1478318682731},{"_id":"source/_posts/在Hexo中插入图片/mountain.jpg","hash":"1453fadd462d750e2e4d71ca24bad6ab7892ccc6","modified":1430899279090},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1478318682715},{"_id":"themes/hexo-theme-next/.git/objects/pack/pack-d7f9900e407f50cf6854c435d4f274ead2f5117b.pack","hash":"d7c2c82c7ad561df7778869a4aed0b762d416269","modified":1478318682606},{"_id":"public/tags/index.html","hash":"26eb6fbc2a23d6e2ea6cdbc462cfcd57c6ec2fbe","modified":1486998440157},{"_id":"public/categories/index.html","hash":"e01df8cb15b60189bc3431acc17c9ac84748ab4d","modified":1486998440157},{"_id":"public/2016/09/05/搭建Django博客（5）Markdown语法显示文章/index.html","hash":"b33dc75e174ebc1c1268b5a846db70579ab01f18","modified":1486998440157},{"_id":"public/archives/2016/11/index.html","hash":"016ff0e8e8fe4baaf23fbb41b4b1ee255b64b2ef","modified":1486998440157},{"_id":"public/archives/2017/index.html","hash":"0be72ccc47e09870dfc7491a2a933b5382b154f0","modified":1486998440157},{"_id":"public/archives/2017/01/index.html","hash":"bfe28b8305579d0c81c5d3bcb756e0e2d6f88691","modified":1486998440157},{"_id":"public/archives/2017/02/index.html","hash":"a27a89458d53dfd580a1cd2ce0e7201f69653fc7","modified":1486998440157},{"_id":"public/tags/pip/index.html","hash":"584e7bfe133cbe4a905e5bf6b8ebdfcd33d9ff62","modified":1486998440157},{"_id":"public/tags/easy-install/index.html","hash":"6e43bbb3a0c79fba9ad5446bd2470f6d9aa711cb","modified":1486998440157},{"_id":"public/tags/Git/index.html","hash":"d8c020dcc63a6eb993f27e63817998898be6551d","modified":1486998440157},{"_id":"public/tags/virtualenv/index.html","hash":"c1fe8c8a00e60543329fed975168c5070f9a3c50","modified":1486998440157},{"_id":"public/tags/virtualenvwrapper/index.html","hash":"baf25b697dfde0d7051c6670bcd9b14f14b57f34","modified":1486998440157},{"_id":"public/tags/SQL/index.html","hash":"cf3ba6af6dc320cda2fe5ac66857aca27ef540ba","modified":1486998440157},{"_id":"public/tags/MySQL/index.html","hash":"37e91489df3b0822dd2fec15e435aa37c14d916e","modified":1486998440157},{"_id":"public/tags/Python/index.html","hash":"1ae8e9bdad41abb656d0fea76895e4a7490ce6a4","modified":1486998440157},{"_id":"public/tags/Flask/index.html","hash":"8c31eb692d5b94ef2602dbed7732b04893d6b61e","modified":1486998440157},{"_id":"public/tags/Nginx/index.html","hash":"fb147c1b346395ffdc99024d480965eb1e10998f","modified":1486998440157},{"_id":"public/tags/uWSGI/index.html","hash":"b86d29aa3c63f50d63868594c35e978805b53bc8","modified":1486998440157},{"_id":"public/tags/supervisor/index.html","hash":"29156a2029ad5dd9a497707a6d517ba15229c6ad","modified":1486998440157},{"_id":"public/tags/Hexo/index.html","hash":"f062637a95806f666db1033f5841af1e2afe605a","modified":1486998440157},{"_id":"public/tags/Django/index.html","hash":"b5c7ff6ebd865e2ffa9db0040b9486737491462c","modified":1486998440157},{"_id":"public/tags/VPS/index.html","hash":"1a14fb8b257feb4094ef01b6d19bc873ba4c2897","modified":1486998440157},{"_id":"public/tags/Linux/index.html","hash":"f41160e16ec11812d5e34a33db24c1be24c4cac8","modified":1486998440157},{"_id":"public/tags/WSGI/index.html","hash":"ec96e2f8e7cab1656da2301b448d557e3ef188ef","modified":1486998440157},{"_id":"public/tags/爬虫/index.html","hash":"d03e657a5684fb0a8c1e458227a959e73c2d8356","modified":1486998440157},{"_id":"public/tags/无线路由器/index.html","hash":"cb50fda3d3650b03b3bdc032657a8212d8a17e9c","modified":1486998440157},{"_id":"public/tags/知乎/index.html","hash":"e4164d50de4683cdb126602cfcced7a93d43ded4","modified":1486998440157},{"_id":"public/categories/Python/index.html","hash":"c375d61e62568a070c808baa90f7d7963c423d2b","modified":1486998440157},{"_id":"public/categories/Git/index.html","hash":"e95195e194b46dccc4b8a7479f0ace2e7d3632c8","modified":1486998440157},{"_id":"public/categories/SQL/index.html","hash":"e6a1b5565b778d8b6ae3960063996b0fb1bf99f1","modified":1486998440157},{"_id":"public/categories/Flask/index.html","hash":"283283d982e44aa366e2665bbd11b53d2b0e7225","modified":1486998440157},{"_id":"public/categories/Hexo/index.html","hash":"f266d09cdd22659606f5e49b657be819194d97da","modified":1486998440157},{"_id":"public/categories/Django/index.html","hash":"a8901a6cd33c11827c4de496a8964abdd2f97e76","modified":1486998440157},{"_id":"public/2017/02/02/搭建Django博客（8）部署Django博客到VPS/index.html","hash":"31bc05182403a32ae046c27c108620a9b740f452","modified":1486998440157},{"_id":"public/2017/02/01/Windows下Python2和Python3共存的设置方法/index.html","hash":"8c9b5884d02efb90feb180cb4339290b0c2b66f3","modified":1486998440157},{"_id":"public/2017/01/23/使用uWSGI和Nginx部署Flask/index.html","hash":"7956175dbc1efadbc0249fb5e339df98dae1dda1","modified":1486998440157},{"_id":"public/2016/11/05/知乎爬虫/index.html","hash":"bd489d86581c530b76f73a685eff677df8202c5e","modified":1486998440157},{"_id":"public/2016/11/02/模拟登陆无线路由器（TL-WDR5600）/index.html","hash":"e123c0f9a97ce3cd2ca644ef4e8db949d7ff7b43","modified":1486998440157},{"_id":"public/2016/09/12/初识MySQL数据库/index.html","hash":"ad41df18eef0638b12b0793c9b3af416ef538919","modified":1486998440157},{"_id":"public/2016/09/10/用Requests和BeautifulSoup爬取妹子图/index.html","hash":"f5effdb5ddb6ebf76ca5eee2a38c2f8ddae4ebf9","modified":1486998440157},{"_id":"public/2016/09/10/Git初体验/index.html","hash":"71330d3fde3e51a294f6381940fa0c8c1038de7e","modified":1486998440157},{"_id":"public/2016/09/05/搭建Django博客（7）Django 博客搭建总结/index.html","hash":"e3ccef1cee3db376bd06b0605b292f0d7478d9ea","modified":1486998440157},{"_id":"public/2016/09/05/搭建Django博客（6）代码高亮及后台Markdown编辑器/index.html","hash":"c8270bf263e9d583bcf3c5495040176cc0431f5b","modified":1486998440157},{"_id":"public/2016/09/05/搭建Django博客（3）网页处理逻辑/index.html","hash":"6860b767f9f7b067bc56d57f203d612e9e1effb1","modified":1486998440157},{"_id":"public/2016/09/05/搭建Django博客（2）创建数据模型/index.html","hash":"847bf7f0848c210edb87b214414a8a4faedf9ffa","modified":1486998440157},{"_id":"public/2016/09/05/搭建Django博客（4）多说评论框/index.html","hash":"329c107c90517939f4f2138495ee9bfdc419827a","modified":1486998440157},{"_id":"public/2016/09/05/搭建Django博客（1）环境准备与连接数据库/index.html","hash":"c9494356a58f26261a6c1126f8436ffc5b8ef382","modified":1486998440157},{"_id":"public/2016/09/05/在Hexo中插入图片/index.html","hash":"fdcdba29796d5a0bf0d426e138550c0b5afe83e3","modified":1486998440157},{"_id":"public/2016/09/04/优雅地使用Python之环境管理/index.html","hash":"64f142a9da49e11bc477a5562bc2417ba78d6c8b","modified":1486998440157},{"_id":"public/2016/09/03/用Hexo写博客并部署到GitHub Pages/index.html","hash":"d8139cc5bea27a8b0608f3abf853324e37c57957","modified":1486998440157},{"_id":"public/index.html","hash":"2c5ef48524ffa1b64f15aadb253f3737b90deb25","modified":1486998440157},{"_id":"public/page/2/index.html","hash":"ee4df22a18ce05de2bd7c7ebcc308c94ad6500bb","modified":1486998440157},{"_id":"public/page/3/index.html","hash":"f7809b3bd46cc11f9323bfd4f93c53c7bf485368","modified":1486998440157},{"_id":"public/page/4/index.html","hash":"3164a01c9b15f0c1833c813bc4a4e2603341c8df","modified":1486998440157},{"_id":"public/archives/index.html","hash":"b1763030f320031891019af2906ebb6a3f6c7da8","modified":1486998440157},{"_id":"public/archives/2016/index.html","hash":"f9cb1a3174fa59c9fa3aa492165edd6d2d82230e","modified":1486998440157},{"_id":"public/archives/2016/09/index.html","hash":"2d374591d1eb9dc6533cfa44b5017a135756baab","modified":1486998440157},{"_id":"public/categories/Django/page/2/index.html","hash":"c554545e265c1c3556b543c6b44fa74fc2975b65","modified":1486998440173},{"_id":"public/CNAME","hash":"a7ce590475a245970a44892afc964207a3ae5de3","modified":1486998440173},{"_id":"public/README.md","hash":"e6f9af0063fa48e67b14fa0b9a452e8f83a8c600","modified":1486998440173},{"_id":"public/favicon.ico","hash":"1d709a70141376eb7570d1cff52cfd4804bc4073","modified":1486998440173},{"_id":"public/images/avatar.jpg","hash":"8a2c9d144a2af093dec50e00911ea0e2c0564044","modified":1486998440173},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1486998440173},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1486998440173},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1486998440173},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1486998440173},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1486998440173},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1486998440173},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1486998440173},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1486998440173},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1486998440173},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1486998440173},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1486998440173},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1486998440173},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1486998440173},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1486998440173},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1486998440173},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1486998440173},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1486998440173},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1486998440173},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1486998440173},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1486998440173},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1486998440173},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1486998440173},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1486998440173},{"_id":"public/2016/09/05/搭建Django博客（1）环境准备与连接数据库/WelcomeToDjango.png","hash":"2da02c3e64c2dfc4060613404a57bc8feb7f5902","modified":1486998440173},{"_id":"public/2017/02/02/搭建Django博客（8）部署Django博客到VPS/deploy.png","hash":"f6329260e24d96036b2ecab72add5868e72a56cd","modified":1486998440173},{"_id":"public/2016/09/10/Git初体验/addsshkey.png","hash":"7f2af91eeec6533357a1754260c723feadb7cabf","modified":1486998440173},{"_id":"public/2016/09/10/Git初体验/git.jpg","hash":"fc8e4edbb7ac51e3ba079428373283cf6ee324f1","modified":1486998440173},{"_id":"public/2017/01/23/使用uWSGI和Nginx部署Flask/uwsgi.png","hash":"bd7f5031e3999189b8ed4dfde472520994d606d4","modified":1486998440173},{"_id":"public/2017/01/23/使用uWSGI和Nginx部署Flask/web.png","hash":"98c3564be51833e1c4ce60ecadd407a9808c6a68","modified":1486998440173},{"_id":"public/2016/09/05/搭建Django博客（2）创建数据模型/admin.png","hash":"15250ad91ed8f5b361c516621f386e81be846503","modified":1486998440173},{"_id":"public/2016/09/05/搭建Django博客（2）创建数据模型/login.png","hash":"a45646cd8350362be91d77b31cea1333bcf78d99","modified":1486998440173},{"_id":"public/2016/09/05/搭建Django博客（7）Django 博客搭建总结/home.png","hash":"ebc007df2642fb0f7a3038cfaa03deb5a01d6d04","modified":1486998440173},{"_id":"public/2016/11/02/模拟登陆无线路由器（TL-WDR5600）/stok.png","hash":"20dc88879fe34f57c7c29ab8c2100c28e2b99714","modified":1486998440173},{"_id":"public/2016/11/02/模拟登陆无线路由器（TL-WDR5600）/抓取结果.png","hash":"3c2b8928b1620c1cf160f1f20c704f60338572c4","modified":1486998440173},{"_id":"public/2016/11/02/模拟登陆无线路由器（TL-WDR5600）/登录界面.png","hash":"22f85dae6c7dfffb85c9245fb3fb0d6cb4f8b37f","modified":1486998440173},{"_id":"public/2016/11/05/知乎爬虫/中文验证码.png","hash":"9fe91f10a3ec19223067dc686d2f0f09387c93cd","modified":1486998440173},{"_id":"public/2016/11/05/知乎爬虫/xsrf.png","hash":"510313c848428e4ea302da0bae792dcc00b25fb0","modified":1486998440173},{"_id":"public/2016/11/05/知乎爬虫/手机号FormData.png","hash":"d0eb6013b3d622a6490f73f9aaf09abc6bb49203","modified":1486998440173},{"_id":"public/2016/11/05/知乎爬虫/中文验证码FormData.png","hash":"c8f3b4ecc8fb57920e4d5fcebb19c1b3a13be4c9","modified":1486998440173},{"_id":"public/2016/11/05/知乎爬虫/手机号登录.png","hash":"f3206f6318cdb5c8d20ec270a6dd6daf4210e219","modified":1486998440173},{"_id":"public/2016/11/05/知乎爬虫/英文验证码.png","hash":"542222346b61d2bed6c4a0aaca496e8779e69762","modified":1486998440188},{"_id":"public/2016/11/05/知乎爬虫/邮箱FormData.png","hash":"a11dbab2aed3850487eb49759c10c743b7fc7365","modified":1486998440188},{"_id":"public/2016/11/05/知乎爬虫/获取验证码.png","hash":"073d47886227f4bc3940bec16d44af15a2f412a0","modified":1486998440188},{"_id":"public/2016/11/05/知乎爬虫/邮箱登录.png","hash":"f00f81002b14b80e909ccad3e2adee694229afcd","modified":1486998440188},{"_id":"public/2016/11/05/知乎爬虫/首页内容标题.png","hash":"dd1956d97b864ec4a83faabb887ad10a30912a48","modified":1486998440188},{"_id":"public/2016/11/05/知乎爬虫/验证码分辨率.png","hash":"d379b403b85365b5987435a1abf3c4a31d7c3310","modified":1486998440188},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1486998440925},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1486998440925},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1486998440925},{"_id":"public/2016/09/05/搭建Django博客（6）代码高亮及后台Markdown编辑器/markdown_editor.png","hash":"168945a6d962c5cdf5d072a42de5ee0c40f254e9","modified":1486998440925},{"_id":"public/2016/09/05/搭建Django博客（7）Django 博客搭建总结/archives.png","hash":"a620288af11ea69d152931b25ce978d0f970962d","modified":1486998440925},{"_id":"public/2016/09/05/搭建Django博客（7）Django 博客搭建总结/post.png","hash":"50668f00d5dc9a45f120877e90a5c6c60c226409","modified":1486998440925},{"_id":"public/2016/11/02/模拟登陆无线路由器（TL-WDR5600）/登录.png","hash":"b25abbe50f858f091347efb6389a577fba95e8a9","modified":1486998440925},{"_id":"public/2016/11/02/模拟登陆无线路由器（TL-WDR5600）/获取数据.png","hash":"2ae0f682455f70952784649e6c72b28df67aeeb6","modified":1486998440925},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1486998440941},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1486998440941},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1486998440941},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1486998440941},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1486998440941},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1486998440941},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1486998440941},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1486998440941},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1486998440941},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1486998440941},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1486998440941},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1486998440941},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1486998440941},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1486998440941},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1486998440941},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1486998440941},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1486998440941},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1486998440941},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1486998440941},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1486998440941},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1486998440941},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1486998440941},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1486998440941},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1486998440941},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1486998440941},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1486998440941},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1486998440941},{"_id":"public/css/main.css","hash":"a6df9e2904ee2b882c1c04ab37c86e4f017c10e5","modified":1486998440941},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1486998440941},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1486998440941},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1486998440941},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1486998440941},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1486998440941},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1486998440941},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1486998440941},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1486998440941},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1486998440941},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1486998440941},{"_id":"public/2016/09/05/搭建Django博客（3）网页处理逻辑/flow.png","hash":"f99171ffb49e0b9da02d83c568ded7eb79872e40","modified":1486998440941},{"_id":"public/2016/11/02/模拟登陆无线路由器（TL-WDR5600）/加密函数1.png","hash":"48ee562e6a78d87b159e25b3399a8e04b5f3bcba","modified":1486998440941},{"_id":"public/2016/11/02/模拟登陆无线路由器（TL-WDR5600）/加密函数2.png","hash":"6bfbb8dd458ec1cfb00b2756c286456496939918","modified":1486998440941},{"_id":"public/2016/09/10/用Requests和BeautifulSoup爬取妹子图/meizitu.png","hash":"f17456235ce11d43fe680c3ce25c50faff6c55ca","modified":1486998440956},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1486998440972},{"_id":"public/2016/09/05/在Hexo中插入图片/mountain.jpg","hash":"1453fadd462d750e2e4d71ca24bad6ab7892ccc6","modified":1486998441003}],"Category":[{"name":"Python","_id":"ciz485cm30004koceie3ocskw"},{"name":"Git","_id":"ciz485cmn0009kocean0wplq2"},{"name":"SQL","_id":"ciz485cnb000lkocewmptmm4o"},{"name":"Flask","_id":"ciz485cnw000rkoceh8oy4w0s"},{"name":"Hexo","_id":"ciz485co0000wkocec63cp28k"},{"name":"Django","_id":"ciz485coe0014kocei3intglk"}],"Data":[],"Page":[{"title":"tags","date":"2016-04-12T17:13:02.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-04-13 01:13:02\ntype: \"tags\"\ncomments: false\n---\n","updated":"2016-04-12T17:16:02.005Z","path":"tags/index.html","layout":"page","_id":"ciz485clw0001kocezjwk3fps","content":"","excerpt":"","more":""},{"title":"categories","date":"2016-04-12T17:39:43.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-04-13 01:39:43\ntype: \"categories\"\ncomments: false\n---\n","updated":"2016-04-12T17:41:49.743Z","path":"categories/index.html","layout":"page","_id":"ciz485cm10003koceq411pvb7","content":"","excerpt":"","more":""}],"Post":[{"title":"Windows下Python2和Python3共存的设置方法","date":"2017-02-01T12:06:10.000Z","_content":"\n\n\n# 前言\n\n之前在自己电脑上写代码、跑程序用的都是 Python3，基本不会出现必须用 Python2 的情况。然而，最近 clone 了别人的项目下来学习，发现必须用 Py2 才能正常运行，否则不断报错，而且是外部模块报的错误，调试起来实在无力，遂决定在电脑上同时装上 Py2 和Py3，顺便把过程记录下来。\n\n\n\n\n\n# 安装Python2&3\n\n- 分别下载 Python2 和 Python3 安装包，安装顺序没有要求，安装时选上加入`系统变量`中的`Path`选项。都安装好后检查`系统变量`中的`Path`中有没加入以下内容；没有加入，就手动添加，记得每一项都必须用 `; `分隔\n\n  ```bash\n  C:\\Program Files (x86)\\Python27\\\n  C:\\Program Files (x86)\\Python27\\Scripts  #此目录暂时没有，安装完pip后才生成\n  C:\\Program Files (x86)\\Python34\\\n  C:\\Program Files (x86)\\Python34\\Scripts\n  ```\n\n\n<!--more-->\n\n\n- 打开 Python2 和 Python3 的安装目录，确保`PythonX\\`目录下没有同名的`python.exe`文件，可以参考以下修改\n\n  Python27\\\n\n  ```bash\n  python.exe  -->  python2.exe\n  pythonw.exe  -->  pythonw2.exe\n  ```\n\n  Python34\\\n\n  ```bash\n  python.exe  -->  不用修改\n  pythonw.exe  -->  不用修改\n\n  当然你也可以相应修改为 python3.exe 和 pythonw3.exe，因为我一般用 Python3，为了方便就保留默认\n  ```\n\n  这样修改后，在`cmd`中就可以直接用 `python2`运行`python2`，用 `python`运行`python3`了。\n\n  ​\n\n\n# 安装pip和easy_install\n\n\n- Python3 安装包中已经包含安装 pip 的选项了，安装时选上就能自动安装好`pip`和`easy_install`，它们的运行程序保存目录在`PythonX\\Scripts\\ `，如果安装时忘了选上，可以参照下面 Python2 安装 pip 的方法\n\n  ```bash\n  python get-pip.py\n  ```\n\n\n- Python2 安装包没有包含安装 pip 的选项，可以在打开 [https://bootstrap.pypa.io/get-pip.py](https://bootstrap.pypa.io/get-pip.py)将程序右键另存为`get-pip.py`文件，记得使用管理员身份运行\n\n  ```bash\n  python2 get-pip.py\n  ```\n\n\n- 最后，打开`Python2X\\Scripts\\`和`Python3X\\Scripts\\`目录，确保两个目录下没有同名的`pip.exe`和`easy_install.exe`文件，可以参考以下修改\n\n  Python27\\Scripts\\\n\n  ```bash\n  pip.exe  -->  pip2.exe\n  easy_install.exe  -->  easy_install2.exe\n  ```\n\n  Python34\\Scripts\\\n\n  ```bash\n  pip.exe  -->  不用修改\n  easy_install.exe  -->  不用修改\n\n  同上，你也可以相应修改为 pip3.exe 和 easy_install3.exe，因为我一般用 Python3，为了方便就保留默认\n  ```\n\n  这样修改后，在`cmd`中就可以直接用 `pip2`运行`python2`中的`pip`，用  `pip`运行`python3`中的`pip`；`easy_install`同理。\n\n\n\n# 安装虚拟环境virtualenv\n\n- Python3\n\n  ```bash\n  pip install virtualenv\n  ```\n\n- Python2\n\n  ```bash\n  pip2 install virtualenv\n  ```\n\n- 因为默认安装好的`virtualenv`程序文件名为`virtualenv.exe`，显然 Python2 和 Python3 不能有同名的`virtualenv.exe`，于是可以参考以下修改\n\n  ```bash\n  Python2:\n  virtualenv.exe  -->  virtualenv2.exe\n\n  Python3:\n  virtualenv.exe  -->  不用修改\n  ```\n\n  ​\n\n# 小结\n\n> 关键的步骤是系统变量中设置的目录下不能有同名的文件，否则系统怎么知道你要调用哪个文件，改掉同名的文件就行了：)\n\n经过上面的设置，就可以在使用命令行的时候方便的区分 Python2 还是 Python3 了，有些项目只支持 Python2，可以创建 Python2 的虚拟环境，方便本地调试，更重要的是可以少踩一些坑(╯‵□′)╯︵┻━┻","source":"_posts/Windows下Python2和Python3共存的设置方法.md","raw":"---\ntitle: Windows下Python2和Python3共存的设置方法\ncategories:\n  - Python\ntags:\n  - pip\n  - easy_install\ndate: 2017-02-01 20:06:10\n---\n\n\n\n# 前言\n\n之前在自己电脑上写代码、跑程序用的都是 Python3，基本不会出现必须用 Python2 的情况。然而，最近 clone 了别人的项目下来学习，发现必须用 Py2 才能正常运行，否则不断报错，而且是外部模块报的错误，调试起来实在无力，遂决定在电脑上同时装上 Py2 和Py3，顺便把过程记录下来。\n\n\n\n\n\n# 安装Python2&3\n\n- 分别下载 Python2 和 Python3 安装包，安装顺序没有要求，安装时选上加入`系统变量`中的`Path`选项。都安装好后检查`系统变量`中的`Path`中有没加入以下内容；没有加入，就手动添加，记得每一项都必须用 `; `分隔\n\n  ```bash\n  C:\\Program Files (x86)\\Python27\\\n  C:\\Program Files (x86)\\Python27\\Scripts  #此目录暂时没有，安装完pip后才生成\n  C:\\Program Files (x86)\\Python34\\\n  C:\\Program Files (x86)\\Python34\\Scripts\n  ```\n\n\n<!--more-->\n\n\n- 打开 Python2 和 Python3 的安装目录，确保`PythonX\\`目录下没有同名的`python.exe`文件，可以参考以下修改\n\n  Python27\\\n\n  ```bash\n  python.exe  -->  python2.exe\n  pythonw.exe  -->  pythonw2.exe\n  ```\n\n  Python34\\\n\n  ```bash\n  python.exe  -->  不用修改\n  pythonw.exe  -->  不用修改\n\n  当然你也可以相应修改为 python3.exe 和 pythonw3.exe，因为我一般用 Python3，为了方便就保留默认\n  ```\n\n  这样修改后，在`cmd`中就可以直接用 `python2`运行`python2`，用 `python`运行`python3`了。\n\n  ​\n\n\n# 安装pip和easy_install\n\n\n- Python3 安装包中已经包含安装 pip 的选项了，安装时选上就能自动安装好`pip`和`easy_install`，它们的运行程序保存目录在`PythonX\\Scripts\\ `，如果安装时忘了选上，可以参照下面 Python2 安装 pip 的方法\n\n  ```bash\n  python get-pip.py\n  ```\n\n\n- Python2 安装包没有包含安装 pip 的选项，可以在打开 [https://bootstrap.pypa.io/get-pip.py](https://bootstrap.pypa.io/get-pip.py)将程序右键另存为`get-pip.py`文件，记得使用管理员身份运行\n\n  ```bash\n  python2 get-pip.py\n  ```\n\n\n- 最后，打开`Python2X\\Scripts\\`和`Python3X\\Scripts\\`目录，确保两个目录下没有同名的`pip.exe`和`easy_install.exe`文件，可以参考以下修改\n\n  Python27\\Scripts\\\n\n  ```bash\n  pip.exe  -->  pip2.exe\n  easy_install.exe  -->  easy_install2.exe\n  ```\n\n  Python34\\Scripts\\\n\n  ```bash\n  pip.exe  -->  不用修改\n  easy_install.exe  -->  不用修改\n\n  同上，你也可以相应修改为 pip3.exe 和 easy_install3.exe，因为我一般用 Python3，为了方便就保留默认\n  ```\n\n  这样修改后，在`cmd`中就可以直接用 `pip2`运行`python2`中的`pip`，用  `pip`运行`python3`中的`pip`；`easy_install`同理。\n\n\n\n# 安装虚拟环境virtualenv\n\n- Python3\n\n  ```bash\n  pip install virtualenv\n  ```\n\n- Python2\n\n  ```bash\n  pip2 install virtualenv\n  ```\n\n- 因为默认安装好的`virtualenv`程序文件名为`virtualenv.exe`，显然 Python2 和 Python3 不能有同名的`virtualenv.exe`，于是可以参考以下修改\n\n  ```bash\n  Python2:\n  virtualenv.exe  -->  virtualenv2.exe\n\n  Python3:\n  virtualenv.exe  -->  不用修改\n  ```\n\n  ​\n\n# 小结\n\n> 关键的步骤是系统变量中设置的目录下不能有同名的文件，否则系统怎么知道你要调用哪个文件，改掉同名的文件就行了：)\n\n经过上面的设置，就可以在使用命令行的时候方便的区分 Python2 还是 Python3 了，有些项目只支持 Python2，可以创建 Python2 的虚拟环境，方便本地调试，更重要的是可以少踩一些坑(╯‵□′)╯︵┻━┻","slug":"Windows下Python2和Python3共存的设置方法","published":1,"updated":"2017-02-13T14:56:25.357Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz485clp0000kocern4c57t5","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>之前在自己电脑上写代码、跑程序用的都是 Python3，基本不会出现必须用 Python2 的情况。然而，最近 clone 了别人的项目下来学习，发现必须用 Py2 才能正常运行，否则不断报错，而且是外部模块报的错误，调试起来实在无力，遂决定在电脑上同时装上 Py2 和Py3，顺便把过程记录下来。</p>\n<h1 id=\"安装Python2-amp-3\"><a href=\"#安装Python2-amp-3\" class=\"headerlink\" title=\"安装Python2&amp;3\"></a>安装Python2&amp;3</h1><ul>\n<li><p>分别下载 Python2 和 Python3 安装包，安装顺序没有要求，安装时选上加入<code>系统变量</code>中的<code>Path</code>选项。都安装好后检查<code>系统变量</code>中的<code>Path</code>中有没加入以下内容；没有加入，就手动添加，记得每一项都必须用 <code>;</code>分隔</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">C:\\Program Files (x86)\\Python27\\</div><div class=\"line\">C:\\Program Files (x86)\\Python27\\Scripts  <span class=\"comment\">#此目录暂时没有，安装完pip后才生成</span></div><div class=\"line\">C:\\Program Files (x86)\\Python34\\</div><div class=\"line\">C:\\Program Files (x86)\\Python34\\Scripts</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li><p>打开 Python2 和 Python3 的安装目录，确保<code>PythonX\\</code>目录下没有同名的<code>python.exe</code>文件，可以参考以下修改</p>\n<p>Python27\\</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">python.exe  --&gt;  python2.exe</div><div class=\"line\">pythonw.exe  --&gt;  pythonw2.exe</div></pre></td></tr></table></figure>\n<p>Python34\\</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">python.exe  --&gt;  不用修改</div><div class=\"line\">pythonw.exe  --&gt;  不用修改</div><div class=\"line\"></div><div class=\"line\">当然你也可以相应修改为 python3.exe 和 pythonw3.exe，因为我一般用 Python3，为了方便就保留默认</div></pre></td></tr></table></figure>\n<p>这样修改后，在<code>cmd</code>中就可以直接用 <code>python2</code>运行<code>python2</code>，用 <code>python</code>运行<code>python3</code>了。</p>\n<p>​</p>\n</li>\n</ul>\n<h1 id=\"安装pip和easy-install\"><a href=\"#安装pip和easy-install\" class=\"headerlink\" title=\"安装pip和easy_install\"></a>安装pip和easy_install</h1><ul>\n<li><p>Python3 安装包中已经包含安装 pip 的选项了，安装时选上就能自动安装好<code>pip</code>和<code>easy_install</code>，它们的运行程序保存目录在<code>PythonX\\Scripts\\</code>，如果安装时忘了选上，可以参照下面 Python2 安装 pip 的方法</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python get-pip.py</div></pre></td></tr></table></figure>\n</li>\n<li><p>Python2 安装包没有包含安装 pip 的选项，可以在打开 <a href=\"https://bootstrap.pypa.io/get-pip.py\" target=\"_blank\" rel=\"external\">https://bootstrap.pypa.io/get-pip.py</a>将程序右键另存为<code>get-pip.py</code>文件，记得使用管理员身份运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python2 get-pip.py</div></pre></td></tr></table></figure>\n</li>\n<li><p>最后，打开<code>Python2X\\Scripts\\</code>和<code>Python3X\\Scripts\\</code>目录，确保两个目录下没有同名的<code>pip.exe</code>和<code>easy_install.exe</code>文件，可以参考以下修改</p>\n<p>Python27\\Scripts\\</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip.exe  --&gt;  pip2.exe</div><div class=\"line\">easy_install.exe  --&gt;  easy_install2.exe</div></pre></td></tr></table></figure>\n<p>Python34\\Scripts\\</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip.exe  --&gt;  不用修改</div><div class=\"line\">easy_install.exe  --&gt;  不用修改</div><div class=\"line\"></div><div class=\"line\">同上，你也可以相应修改为 pip3.exe 和 easy_install3.exe，因为我一般用 Python3，为了方便就保留默认</div></pre></td></tr></table></figure>\n<p>这样修改后，在<code>cmd</code>中就可以直接用 <code>pip2</code>运行<code>python2</code>中的<code>pip</code>，用  <code>pip</code>运行<code>python3</code>中的<code>pip</code>；<code>easy_install</code>同理。</p>\n</li>\n</ul>\n<h1 id=\"安装虚拟环境virtualenv\"><a href=\"#安装虚拟环境virtualenv\" class=\"headerlink\" title=\"安装虚拟环境virtualenv\"></a>安装虚拟环境virtualenv</h1><ul>\n<li><p>Python3</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install virtualenv</div></pre></td></tr></table></figure>\n</li>\n<li><p>Python2</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip2 install virtualenv</div></pre></td></tr></table></figure>\n</li>\n<li><p>因为默认安装好的<code>virtualenv</code>程序文件名为<code>virtualenv.exe</code>，显然 Python2 和 Python3 不能有同名的<code>virtualenv.exe</code>，于是可以参考以下修改</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Python2:</div><div class=\"line\">virtualenv.exe  --&gt;  virtualenv2.exe</div><div class=\"line\"></div><div class=\"line\">Python3:</div><div class=\"line\">virtualenv.exe  --&gt;  不用修改</div></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ul>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><blockquote>\n<p>关键的步骤是系统变量中设置的目录下不能有同名的文件，否则系统怎么知道你要调用哪个文件，改掉同名的文件就行了：)</p>\n</blockquote>\n<p>经过上面的设置，就可以在使用命令行的时候方便的区分 Python2 还是 Python3 了，有些项目只支持 Python2，可以创建 Python2 的虚拟环境，方便本地调试，更重要的是可以少踩一些坑(╯‵□′)╯︵┻━┻</p>\n","excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>之前在自己电脑上写代码、跑程序用的都是 Python3，基本不会出现必须用 Python2 的情况。然而，最近 clone 了别人的项目下来学习，发现必须用 Py2 才能正常运行，否则不断报错，而且是外部模块报的错误，调试起来实在无力，遂决定在电脑上同时装上 Py2 和Py3，顺便把过程记录下来。</p>\n<h1 id=\"安装Python2-amp-3\"><a href=\"#安装Python2-amp-3\" class=\"headerlink\" title=\"安装Python2&amp;3\"></a>安装Python2&amp;3</h1><ul>\n<li><p>分别下载 Python2 和 Python3 安装包，安装顺序没有要求，安装时选上加入<code>系统变量</code>中的<code>Path</code>选项。都安装好后检查<code>系统变量</code>中的<code>Path</code>中有没加入以下内容；没有加入，就手动添加，记得每一项都必须用 <code>;</code>分隔</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">C:\\Program Files (x86)\\Python27\\</div><div class=\"line\">C:\\Program Files (x86)\\Python27\\Scripts  <span class=\"comment\">#此目录暂时没有，安装完pip后才生成</span></div><div class=\"line\">C:\\Program Files (x86)\\Python34\\</div><div class=\"line\">C:\\Program Files (x86)\\Python34\\Scripts</div></pre></td></tr></table></figure>\n</li>\n</ul>","more":"<ul>\n<li><p>打开 Python2 和 Python3 的安装目录，确保<code>PythonX\\</code>目录下没有同名的<code>python.exe</code>文件，可以参考以下修改</p>\n<p>Python27\\</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">python.exe  --&gt;  python2.exe</div><div class=\"line\">pythonw.exe  --&gt;  pythonw2.exe</div></pre></td></tr></table></figure>\n<p>Python34\\</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">python.exe  --&gt;  不用修改</div><div class=\"line\">pythonw.exe  --&gt;  不用修改</div><div class=\"line\"></div><div class=\"line\">当然你也可以相应修改为 python3.exe 和 pythonw3.exe，因为我一般用 Python3，为了方便就保留默认</div></pre></td></tr></table></figure>\n<p>这样修改后，在<code>cmd</code>中就可以直接用 <code>python2</code>运行<code>python2</code>，用 <code>python</code>运行<code>python3</code>了。</p>\n<p>​</p>\n</li>\n</ul>\n<h1 id=\"安装pip和easy-install\"><a href=\"#安装pip和easy-install\" class=\"headerlink\" title=\"安装pip和easy_install\"></a>安装pip和easy_install</h1><ul>\n<li><p>Python3 安装包中已经包含安装 pip 的选项了，安装时选上就能自动安装好<code>pip</code>和<code>easy_install</code>，它们的运行程序保存目录在<code>PythonX\\Scripts\\</code>，如果安装时忘了选上，可以参照下面 Python2 安装 pip 的方法</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python get-pip.py</div></pre></td></tr></table></figure>\n</li>\n<li><p>Python2 安装包没有包含安装 pip 的选项，可以在打开 <a href=\"https://bootstrap.pypa.io/get-pip.py\">https://bootstrap.pypa.io/get-pip.py</a>将程序右键另存为<code>get-pip.py</code>文件，记得使用管理员身份运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python2 get-pip.py</div></pre></td></tr></table></figure>\n</li>\n<li><p>最后，打开<code>Python2X\\Scripts\\</code>和<code>Python3X\\Scripts\\</code>目录，确保两个目录下没有同名的<code>pip.exe</code>和<code>easy_install.exe</code>文件，可以参考以下修改</p>\n<p>Python27\\Scripts\\</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip.exe  --&gt;  pip2.exe</div><div class=\"line\">easy_install.exe  --&gt;  easy_install2.exe</div></pre></td></tr></table></figure>\n<p>Python34\\Scripts\\</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip.exe  --&gt;  不用修改</div><div class=\"line\">easy_install.exe  --&gt;  不用修改</div><div class=\"line\"></div><div class=\"line\">同上，你也可以相应修改为 pip3.exe 和 easy_install3.exe，因为我一般用 Python3，为了方便就保留默认</div></pre></td></tr></table></figure>\n<p>这样修改后，在<code>cmd</code>中就可以直接用 <code>pip2</code>运行<code>python2</code>中的<code>pip</code>，用  <code>pip</code>运行<code>python3</code>中的<code>pip</code>；<code>easy_install</code>同理。</p>\n</li>\n</ul>\n<h1 id=\"安装虚拟环境virtualenv\"><a href=\"#安装虚拟环境virtualenv\" class=\"headerlink\" title=\"安装虚拟环境virtualenv\"></a>安装虚拟环境virtualenv</h1><ul>\n<li><p>Python3</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install virtualenv</div></pre></td></tr></table></figure>\n</li>\n<li><p>Python2</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip2 install virtualenv</div></pre></td></tr></table></figure>\n</li>\n<li><p>因为默认安装好的<code>virtualenv</code>程序文件名为<code>virtualenv.exe</code>，显然 Python2 和 Python3 不能有同名的<code>virtualenv.exe</code>，于是可以参考以下修改</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Python2:</div><div class=\"line\">virtualenv.exe  --&gt;  virtualenv2.exe</div><div class=\"line\"></div><div class=\"line\">Python3:</div><div class=\"line\">virtualenv.exe  --&gt;  不用修改</div></pre></td></tr></table></figure>\n<p>​</p>\n</li>\n</ul>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><blockquote>\n<p>关键的步骤是系统变量中设置的目录下不能有同名的文件，否则系统怎么知道你要调用哪个文件，改掉同名的文件就行了：)</p>\n</blockquote>\n<p>经过上面的设置，就可以在使用命令行的时候方便的区分 Python2 还是 Python3 了，有些项目只支持 Python2，可以创建 Python2 的虚拟环境，方便本地调试，更重要的是可以少踩一些坑(╯‵□′)╯︵┻━┻</p>"},{"title":"Git初体验","date":"2016-09-09T17:25:42.000Z","_content":"\n# 安装Git\n\n从 [http://git-scm.com/downloads](http://git-scm.com/downloads) 下载安装 Git 客户端\n\n\n# 连接GitHub\n\n> 为了将本地 Git 仓库推送到 GitHub 远程仓库，需要设置通过 SSH 加密进行数据传输\n\n## 设置机器名\n\nGit 是分布式版本控制系统，每个机器都必须自报家门：`你的名字`和 `Email 地址 `\n\n使用 GitHub 作为远程仓库，最好填上你的 GitHub 用户名和 GitHub 的注册邮箱，否则可能无法在 GitHub 中记录你的 Contribution\n\n```bash\n$ git config --global user.name \"Your GitHub Name\"\n$ git config --global user.email \"email@example.com\"\n```\n\n> 注意：`gitconfig`命令的`--global`参数，表示你这台机器上所有的 Git 仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。\n\n<!--more-->\n\n## 创建SSH Key\n\n配置完Git后，在用户主目录下会生成`.ssh`文件夹，里面有`id_rsa`私钥和`id_rsa.pub`公钥这两个SSH Key的密钥对，如果没有：\n\n```bash\n$ ssh-keygen -t rsa -C \"youremail@example.com\"\n```\n\n## 添加SSH Key到GitHub\n\n登陆GitHub，打开`Account settings`，选择`SSH and GPG keys`页面；点`New SSH Key`，填上任意`Title`，在`Key`文本框里粘贴`id_rsa.pub`文件的内容\n\n{% asset_img addsshkey.png Add SSH Key to GitHub %}\n\n> **为什么GitHub需要SSH Key呢？**\n>\n> 因为GitHub需要识别推送的提交确实是你推送的，Git也支持SSH协议；所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。\n>\n> 当然，GitHub允许你添加多个Key。在不同电脑上，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上向GitHub推送。\n\n\n\n# Git常用命令\n\n## Git 区域和命令间的关系\n\n{% asset_img git.jpg %}\n\n> 工作区：workspace\n>\n> 暂存区：Index（也叫 stage）\n>\n> 版本库：Index + HEAD（Repository，包含 master 在内的各个分支）\n\n## 初始化Git仓库\n\n```bash\n$ git init\n```\n\n> 创建仓库后，目录下会多一个`.git`目录，用来跟踪管理版本库，不能修改，`.git`目录是隐藏的\n>\n\n## 添加文件到暂存区\n\n```bash\n$ git add [File Name]\n$ git add .  # 添加所有文件到暂存区\n```\n\n## 提交到当前分支\n\n```bash\n$ git commit -m \"代码提交信息\"\n```\n\n## 本地仓库关联远程仓库\n\n```bash\n$ git remote add origin git@github.com:[GitHub用户名]/远程仓库名.git\n```\n\n## 本地仓库推送到远程仓库\n\n```bash\n$ git push origin master  # master也可以换成其他分支\n```\n\n## 克隆远程仓库到本地\n\n```bash\n$ git clone git@github.com:[GitHub用户名]/远程仓库名.git\n```\n\n## 分支类命令\n\n### 创建分支\n\n```bash\n$ git branch [分支名]\n$ git checkout -b [分支名]   # 创建并切换到分支\n```\n\n### 切换分支\n\n```bash\n$ git checkout [分支名]\n```\n\n### 删除分支\n\n```bash\n$ git branch -d [分支名]\n```\n\n### 查询分支\n\n```bash\n$ git branch  # 当前分支前面会有一个*号\n```\n\n### 合并其他分支到当前分支\n\n```bash\n$ git merge [其他分支名]\n```\n\n### 取回远程仓库并与本地分支合并\n\n```bash\n$ git pull origin [本地分支名]  # git pull = git fetch + git merge\n```\n\n## 查询类命令\n\n### 发生更改的文件\n\n```bash\n$ git status\n```\n\n### 工作区和暂存区的不同\n\n```bash\n$ git diff\n```\n\n### 提交日志\n\n```bash\n$ git log\n```\n\n### 提交ID和提交信息\n\n```bash\n$ git reflog\n```\n","source":"_posts/Git初体验.md","raw":"---\ntitle: Git初体验\ndate: 2016-09-10 01:25:42\ncategories: Git\ntags:\n- Git\n---\n\n# 安装Git\n\n从 [http://git-scm.com/downloads](http://git-scm.com/downloads) 下载安装 Git 客户端\n\n\n# 连接GitHub\n\n> 为了将本地 Git 仓库推送到 GitHub 远程仓库，需要设置通过 SSH 加密进行数据传输\n\n## 设置机器名\n\nGit 是分布式版本控制系统，每个机器都必须自报家门：`你的名字`和 `Email 地址 `\n\n使用 GitHub 作为远程仓库，最好填上你的 GitHub 用户名和 GitHub 的注册邮箱，否则可能无法在 GitHub 中记录你的 Contribution\n\n```bash\n$ git config --global user.name \"Your GitHub Name\"\n$ git config --global user.email \"email@example.com\"\n```\n\n> 注意：`gitconfig`命令的`--global`参数，表示你这台机器上所有的 Git 仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。\n\n<!--more-->\n\n## 创建SSH Key\n\n配置完Git后，在用户主目录下会生成`.ssh`文件夹，里面有`id_rsa`私钥和`id_rsa.pub`公钥这两个SSH Key的密钥对，如果没有：\n\n```bash\n$ ssh-keygen -t rsa -C \"youremail@example.com\"\n```\n\n## 添加SSH Key到GitHub\n\n登陆GitHub，打开`Account settings`，选择`SSH and GPG keys`页面；点`New SSH Key`，填上任意`Title`，在`Key`文本框里粘贴`id_rsa.pub`文件的内容\n\n{% asset_img addsshkey.png Add SSH Key to GitHub %}\n\n> **为什么GitHub需要SSH Key呢？**\n>\n> 因为GitHub需要识别推送的提交确实是你推送的，Git也支持SSH协议；所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。\n>\n> 当然，GitHub允许你添加多个Key。在不同电脑上，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上向GitHub推送。\n\n\n\n# Git常用命令\n\n## Git 区域和命令间的关系\n\n{% asset_img git.jpg %}\n\n> 工作区：workspace\n>\n> 暂存区：Index（也叫 stage）\n>\n> 版本库：Index + HEAD（Repository，包含 master 在内的各个分支）\n\n## 初始化Git仓库\n\n```bash\n$ git init\n```\n\n> 创建仓库后，目录下会多一个`.git`目录，用来跟踪管理版本库，不能修改，`.git`目录是隐藏的\n>\n\n## 添加文件到暂存区\n\n```bash\n$ git add [File Name]\n$ git add .  # 添加所有文件到暂存区\n```\n\n## 提交到当前分支\n\n```bash\n$ git commit -m \"代码提交信息\"\n```\n\n## 本地仓库关联远程仓库\n\n```bash\n$ git remote add origin git@github.com:[GitHub用户名]/远程仓库名.git\n```\n\n## 本地仓库推送到远程仓库\n\n```bash\n$ git push origin master  # master也可以换成其他分支\n```\n\n## 克隆远程仓库到本地\n\n```bash\n$ git clone git@github.com:[GitHub用户名]/远程仓库名.git\n```\n\n## 分支类命令\n\n### 创建分支\n\n```bash\n$ git branch [分支名]\n$ git checkout -b [分支名]   # 创建并切换到分支\n```\n\n### 切换分支\n\n```bash\n$ git checkout [分支名]\n```\n\n### 删除分支\n\n```bash\n$ git branch -d [分支名]\n```\n\n### 查询分支\n\n```bash\n$ git branch  # 当前分支前面会有一个*号\n```\n\n### 合并其他分支到当前分支\n\n```bash\n$ git merge [其他分支名]\n```\n\n### 取回远程仓库并与本地分支合并\n\n```bash\n$ git pull origin [本地分支名]  # git pull = git fetch + git merge\n```\n\n## 查询类命令\n\n### 发生更改的文件\n\n```bash\n$ git status\n```\n\n### 工作区和暂存区的不同\n\n```bash\n$ git diff\n```\n\n### 提交日志\n\n```bash\n$ git log\n```\n\n### 提交ID和提交信息\n\n```bash\n$ git reflog\n```\n","slug":"Git初体验","published":1,"updated":"2016-09-10T06:56:11.946Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz485cly0002koceeardam5t","content":"<h1 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h1><p>从 <a href=\"http://git-scm.com/downloads\" target=\"_blank\" rel=\"external\">http://git-scm.com/downloads</a> 下载安装 Git 客户端</p>\n<h1 id=\"连接GitHub\"><a href=\"#连接GitHub\" class=\"headerlink\" title=\"连接GitHub\"></a>连接GitHub</h1><blockquote>\n<p>为了将本地 Git 仓库推送到 GitHub 远程仓库，需要设置通过 SSH 加密进行数据传输</p>\n</blockquote>\n<h2 id=\"设置机器名\"><a href=\"#设置机器名\" class=\"headerlink\" title=\"设置机器名\"></a>设置机器名</h2><p>Git 是分布式版本控制系统，每个机器都必须自报家门：<code>你的名字</code>和 <code>Email 地址</code></p>\n<p>使用 GitHub 作为远程仓库，最好填上你的 GitHub 用户名和 GitHub 的注册邮箱，否则可能无法在 GitHub 中记录你的 Contribution</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global user.name <span class=\"string\">\"Your GitHub Name\"</span></div><div class=\"line\">$ git config --global user.email <span class=\"string\">\"email@example.com\"</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：<code>gitconfig</code>命令的<code>--global</code>参数，表示你这台机器上所有的 Git 仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"创建SSH-Key\"><a href=\"#创建SSH-Key\" class=\"headerlink\" title=\"创建SSH Key\"></a>创建SSH Key</h2><p>配置完Git后，在用户主目录下会生成<code>.ssh</code>文件夹，里面有<code>id_rsa</code>私钥和<code>id_rsa.pub</code>公钥这两个SSH Key的密钥对，如果没有：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">\"youremail@example.com\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"添加SSH-Key到GitHub\"><a href=\"#添加SSH-Key到GitHub\" class=\"headerlink\" title=\"添加SSH Key到GitHub\"></a>添加SSH Key到GitHub</h2><p>登陆GitHub，打开<code>Account settings</code>，选择<code>SSH and GPG keys</code>页面；点<code>New SSH Key</code>，填上任意<code>Title</code>，在<code>Key</code>文本框里粘贴<code>id_rsa.pub</code>文件的内容</p>\n<img src=\"/2016/09/10/Git初体验/addsshkey.png\" alt=\"Add SSH Key to GitHub\" title=\"Add SSH Key to GitHub\">\n<blockquote>\n<p><strong>为什么GitHub需要SSH Key呢？</strong></p>\n<p>因为GitHub需要识别推送的提交确实是你推送的，Git也支持SSH协议；所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。</p>\n<p>当然，GitHub允许你添加多个Key。在不同电脑上，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上向GitHub推送。</p>\n</blockquote>\n<h1 id=\"Git常用命令\"><a href=\"#Git常用命令\" class=\"headerlink\" title=\"Git常用命令\"></a>Git常用命令</h1><h2 id=\"Git-区域和命令间的关系\"><a href=\"#Git-区域和命令间的关系\" class=\"headerlink\" title=\"Git 区域和命令间的关系\"></a>Git 区域和命令间的关系</h2><img src=\"/2016/09/10/Git初体验/git.jpg\" alt=\"git.jpg\" title=\"\">\n<blockquote>\n<p>工作区：workspace</p>\n<p>暂存区：Index（也叫 stage）</p>\n<p>版本库：Index + HEAD（Repository，包含 master 在内的各个分支）</p>\n</blockquote>\n<h2 id=\"初始化Git仓库\"><a href=\"#初始化Git仓库\" class=\"headerlink\" title=\"初始化Git仓库\"></a>初始化Git仓库</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git init</div></pre></td></tr></table></figure>\n<blockquote>\n<p>创建仓库后，目录下会多一个<code>.git</code>目录，用来跟踪管理版本库，不能修改，<code>.git</code>目录是隐藏的</p>\n</blockquote>\n<h2 id=\"添加文件到暂存区\"><a href=\"#添加文件到暂存区\" class=\"headerlink\" title=\"添加文件到暂存区\"></a>添加文件到暂存区</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git add [File Name]</div><div class=\"line\">$ git add .  <span class=\"comment\"># 添加所有文件到暂存区</span></div></pre></td></tr></table></figure>\n<h2 id=\"提交到当前分支\"><a href=\"#提交到当前分支\" class=\"headerlink\" title=\"提交到当前分支\"></a>提交到当前分支</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git commit -m <span class=\"string\">\"代码提交信息\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"本地仓库关联远程仓库\"><a href=\"#本地仓库关联远程仓库\" class=\"headerlink\" title=\"本地仓库关联远程仓库\"></a>本地仓库关联远程仓库</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git remote add origin git@github.com:[GitHub用户名]/远程仓库名.git</div></pre></td></tr></table></figure>\n<h2 id=\"本地仓库推送到远程仓库\"><a href=\"#本地仓库推送到远程仓库\" class=\"headerlink\" title=\"本地仓库推送到远程仓库\"></a>本地仓库推送到远程仓库</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git push origin master  <span class=\"comment\"># master也可以换成其他分支</span></div></pre></td></tr></table></figure>\n<h2 id=\"克隆远程仓库到本地\"><a href=\"#克隆远程仓库到本地\" class=\"headerlink\" title=\"克隆远程仓库到本地\"></a>克隆远程仓库到本地</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> git@github.com:[GitHub用户名]/远程仓库名.git</div></pre></td></tr></table></figure>\n<h2 id=\"分支类命令\"><a href=\"#分支类命令\" class=\"headerlink\" title=\"分支类命令\"></a>分支类命令</h2><h3 id=\"创建分支\"><a href=\"#创建分支\" class=\"headerlink\" title=\"创建分支\"></a>创建分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch [分支名]</div><div class=\"line\">$ git checkout -b [分支名]   <span class=\"comment\"># 创建并切换到分支</span></div></pre></td></tr></table></figure>\n<h3 id=\"切换分支\"><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout [分支名]</div></pre></td></tr></table></figure>\n<h3 id=\"删除分支\"><a href=\"#删除分支\" class=\"headerlink\" title=\"删除分支\"></a>删除分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch <span class=\"_\">-d</span> [分支名]</div></pre></td></tr></table></figure>\n<h3 id=\"查询分支\"><a href=\"#查询分支\" class=\"headerlink\" title=\"查询分支\"></a>查询分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch  <span class=\"comment\"># 当前分支前面会有一个*号</span></div></pre></td></tr></table></figure>\n<h3 id=\"合并其他分支到当前分支\"><a href=\"#合并其他分支到当前分支\" class=\"headerlink\" title=\"合并其他分支到当前分支\"></a>合并其他分支到当前分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git merge [其他分支名]</div></pre></td></tr></table></figure>\n<h3 id=\"取回远程仓库并与本地分支合并\"><a href=\"#取回远程仓库并与本地分支合并\" class=\"headerlink\" title=\"取回远程仓库并与本地分支合并\"></a>取回远程仓库并与本地分支合并</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git pull origin [本地分支名]  <span class=\"comment\"># git pull = git fetch + git merge</span></div></pre></td></tr></table></figure>\n<h2 id=\"查询类命令\"><a href=\"#查询类命令\" class=\"headerlink\" title=\"查询类命令\"></a>查询类命令</h2><h3 id=\"发生更改的文件\"><a href=\"#发生更改的文件\" class=\"headerlink\" title=\"发生更改的文件\"></a>发生更改的文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git status</div></pre></td></tr></table></figure>\n<h3 id=\"工作区和暂存区的不同\"><a href=\"#工作区和暂存区的不同\" class=\"headerlink\" title=\"工作区和暂存区的不同\"></a>工作区和暂存区的不同</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git diff</div></pre></td></tr></table></figure>\n<h3 id=\"提交日志\"><a href=\"#提交日志\" class=\"headerlink\" title=\"提交日志\"></a>提交日志</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">log</span></div></pre></td></tr></table></figure>\n<h3 id=\"提交ID和提交信息\"><a href=\"#提交ID和提交信息\" class=\"headerlink\" title=\"提交ID和提交信息\"></a>提交ID和提交信息</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git reflog</div></pre></td></tr></table></figure>\n","excerpt":"<h1 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h1><p>从 <a href=\"http://git-scm.com/downloads\">http://git-scm.com/downloads</a> 下载安装 Git 客户端</p>\n<h1 id=\"连接GitHub\"><a href=\"#连接GitHub\" class=\"headerlink\" title=\"连接GitHub\"></a>连接GitHub</h1><blockquote>\n<p>为了将本地 Git 仓库推送到 GitHub 远程仓库，需要设置通过 SSH 加密进行数据传输</p>\n</blockquote>\n<h2 id=\"设置机器名\"><a href=\"#设置机器名\" class=\"headerlink\" title=\"设置机器名\"></a>设置机器名</h2><p>Git 是分布式版本控制系统，每个机器都必须自报家门：<code>你的名字</code>和 <code>Email 地址</code></p>\n<p>使用 GitHub 作为远程仓库，最好填上你的 GitHub 用户名和 GitHub 的注册邮箱，否则可能无法在 GitHub 中记录你的 Contribution</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global user.name <span class=\"string\">\"Your GitHub Name\"</span></div><div class=\"line\">$ git config --global user.email <span class=\"string\">\"email@example.com\"</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：<code>gitconfig</code>命令的<code>--global</code>参数，表示你这台机器上所有的 Git 仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p>\n</blockquote>","more":"<h2 id=\"创建SSH-Key\"><a href=\"#创建SSH-Key\" class=\"headerlink\" title=\"创建SSH Key\"></a>创建SSH Key</h2><p>配置完Git后，在用户主目录下会生成<code>.ssh</code>文件夹，里面有<code>id_rsa</code>私钥和<code>id_rsa.pub</code>公钥这两个SSH Key的密钥对，如果没有：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">\"youremail@example.com\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"添加SSH-Key到GitHub\"><a href=\"#添加SSH-Key到GitHub\" class=\"headerlink\" title=\"添加SSH Key到GitHub\"></a>添加SSH Key到GitHub</h2><p>登陆GitHub，打开<code>Account settings</code>，选择<code>SSH and GPG keys</code>页面；点<code>New SSH Key</code>，填上任意<code>Title</code>，在<code>Key</code>文本框里粘贴<code>id_rsa.pub</code>文件的内容</p>\n<img src=\"/2016/09/10/Git初体验/addsshkey.png\" alt=\"Add SSH Key to GitHub\" title=\"Add SSH Key to GitHub\">\n<blockquote>\n<p><strong>为什么GitHub需要SSH Key呢？</strong></p>\n<p>因为GitHub需要识别推送的提交确实是你推送的，Git也支持SSH协议；所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。</p>\n<p>当然，GitHub允许你添加多个Key。在不同电脑上，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上向GitHub推送。</p>\n</blockquote>\n<h1 id=\"Git常用命令\"><a href=\"#Git常用命令\" class=\"headerlink\" title=\"Git常用命令\"></a>Git常用命令</h1><h2 id=\"Git-区域和命令间的关系\"><a href=\"#Git-区域和命令间的关系\" class=\"headerlink\" title=\"Git 区域和命令间的关系\"></a>Git 区域和命令间的关系</h2><img src=\"/2016/09/10/Git初体验/git.jpg\" alt=\"git.jpg\" title=\"\">\n<blockquote>\n<p>工作区：workspace</p>\n<p>暂存区：Index（也叫 stage）</p>\n<p>版本库：Index + HEAD（Repository，包含 master 在内的各个分支）</p>\n</blockquote>\n<h2 id=\"初始化Git仓库\"><a href=\"#初始化Git仓库\" class=\"headerlink\" title=\"初始化Git仓库\"></a>初始化Git仓库</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git init</div></pre></td></tr></table></figure>\n<blockquote>\n<p>创建仓库后，目录下会多一个<code>.git</code>目录，用来跟踪管理版本库，不能修改，<code>.git</code>目录是隐藏的</p>\n</blockquote>\n<h2 id=\"添加文件到暂存区\"><a href=\"#添加文件到暂存区\" class=\"headerlink\" title=\"添加文件到暂存区\"></a>添加文件到暂存区</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git add [File Name]</div><div class=\"line\">$ git add .  <span class=\"comment\"># 添加所有文件到暂存区</span></div></pre></td></tr></table></figure>\n<h2 id=\"提交到当前分支\"><a href=\"#提交到当前分支\" class=\"headerlink\" title=\"提交到当前分支\"></a>提交到当前分支</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git commit -m <span class=\"string\">\"代码提交信息\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"本地仓库关联远程仓库\"><a href=\"#本地仓库关联远程仓库\" class=\"headerlink\" title=\"本地仓库关联远程仓库\"></a>本地仓库关联远程仓库</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git remote add origin git@github.com:[GitHub用户名]/远程仓库名.git</div></pre></td></tr></table></figure>\n<h2 id=\"本地仓库推送到远程仓库\"><a href=\"#本地仓库推送到远程仓库\" class=\"headerlink\" title=\"本地仓库推送到远程仓库\"></a>本地仓库推送到远程仓库</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git push origin master  <span class=\"comment\"># master也可以换成其他分支</span></div></pre></td></tr></table></figure>\n<h2 id=\"克隆远程仓库到本地\"><a href=\"#克隆远程仓库到本地\" class=\"headerlink\" title=\"克隆远程仓库到本地\"></a>克隆远程仓库到本地</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> git@github.com:[GitHub用户名]/远程仓库名.git</div></pre></td></tr></table></figure>\n<h2 id=\"分支类命令\"><a href=\"#分支类命令\" class=\"headerlink\" title=\"分支类命令\"></a>分支类命令</h2><h3 id=\"创建分支\"><a href=\"#创建分支\" class=\"headerlink\" title=\"创建分支\"></a>创建分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch [分支名]</div><div class=\"line\">$ git checkout -b [分支名]   <span class=\"comment\"># 创建并切换到分支</span></div></pre></td></tr></table></figure>\n<h3 id=\"切换分支\"><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout [分支名]</div></pre></td></tr></table></figure>\n<h3 id=\"删除分支\"><a href=\"#删除分支\" class=\"headerlink\" title=\"删除分支\"></a>删除分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch <span class=\"_\">-d</span> [分支名]</div></pre></td></tr></table></figure>\n<h3 id=\"查询分支\"><a href=\"#查询分支\" class=\"headerlink\" title=\"查询分支\"></a>查询分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git branch  <span class=\"comment\"># 当前分支前面会有一个*号</span></div></pre></td></tr></table></figure>\n<h3 id=\"合并其他分支到当前分支\"><a href=\"#合并其他分支到当前分支\" class=\"headerlink\" title=\"合并其他分支到当前分支\"></a>合并其他分支到当前分支</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git merge [其他分支名]</div></pre></td></tr></table></figure>\n<h3 id=\"取回远程仓库并与本地分支合并\"><a href=\"#取回远程仓库并与本地分支合并\" class=\"headerlink\" title=\"取回远程仓库并与本地分支合并\"></a>取回远程仓库并与本地分支合并</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git pull origin [本地分支名]  <span class=\"comment\"># git pull = git fetch + git merge</span></div></pre></td></tr></table></figure>\n<h2 id=\"查询类命令\"><a href=\"#查询类命令\" class=\"headerlink\" title=\"查询类命令\"></a>查询类命令</h2><h3 id=\"发生更改的文件\"><a href=\"#发生更改的文件\" class=\"headerlink\" title=\"发生更改的文件\"></a>发生更改的文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git status</div></pre></td></tr></table></figure>\n<h3 id=\"工作区和暂存区的不同\"><a href=\"#工作区和暂存区的不同\" class=\"headerlink\" title=\"工作区和暂存区的不同\"></a>工作区和暂存区的不同</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git diff</div></pre></td></tr></table></figure>\n<h3 id=\"提交日志\"><a href=\"#提交日志\" class=\"headerlink\" title=\"提交日志\"></a>提交日志</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">log</span></div></pre></td></tr></table></figure>\n<h3 id=\"提交ID和提交信息\"><a href=\"#提交ID和提交信息\" class=\"headerlink\" title=\"提交ID和提交信息\"></a>提交ID和提交信息</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git reflog</div></pre></td></tr></table></figure>"},{"title":"优雅地使用Python之环境管理","date":"2016-09-04T13:34:53.000Z","_content":"\n\n\n# virtualenv\n\nvirtualenv 用于创建独立的 Python 环境，多个Python相互独立，互不影响，它能够：\n1. 在没有权限的情况下安装新套件\n2. 隔离项目之间的第三方包依赖\n3. 方便部署到生产环境\n\n\n\n**安装方法**\n\n```bash\npip install virtualenv\n```\n\n<!--more-->\n\n\n**使用**\n\n- 创建虚拟环境\n\n  ```bash\n  virtualenv  虚拟环境名称\n  ```\n\n- 默认情况下，虚拟环境会依赖系统环境中的 site packages，就是说系统中已经安装好的第三方 package 也会安装在虚拟环境中，如果不想依赖这些 package ，那么可以加上参数 --no-site-packages 建立虚拟环境\n\n  ```bash\n  virtualenv --no-site-packages 虚拟环境名称\n  ```\n\n- 激活虚拟环境\n\n  Linux\n\n  ```bash\n  source path/to/virtualenv/bin/activate\n  ```\n\n  Windows\n\n  ```bash\n  path\\to\\virtualenv\\Scripts\\activate\n  ```\n\n- 退出虚拟环境\n\n  ```bash\n  deactivate\n  ```\n\n\n\n\n\n\n\n# virtualenvwrapper\n\nVirtualenvwrapper 是 Virtualenv 的一个扩展，可使虚拟环境的管理变得更容易，Virtualenvwrapper 提供以下功能：\n\n1. 将所有的虚拟环境整合在一个目录下\n2. 管理（新增、移除、复制）所有的虚拟环境\n3. 可以使用一个命令切换虚拟环境\n4. Tab 补全虚拟环境的名字\n5. 每个操作都提供允许使用者自定的 hooks\n6. 可撰写容易分享的 extension plugin 系统\n\n\n\n**安装**\n\nLinux\n\n```bash\npip install virtualenvwrapper\n```\n\nWindows\n\n```bash\npip install virtualenvwrapper-win\n```\n\n\n\n**使用**\n\n列出虚拟环境列表\n\n```bash\nworkon\n# 或者\nlsvirtualenv\n```\n\n新建虚拟环境\n\n```bash\nmkvirtualenv 虚拟环境名称\n```\n\n启动 / 切换虚拟环境\n\n```bash\nworkon 虚拟环境名称\n```\n\n删除虚拟环境\n\n```bash\nrmvirtualenv 虚拟环境名称\n```\n\n离开虚拟环境\n\n```bash\ndeactivate\n```\n\n\n\n**自定义新建虚拟环境的保存目录**\n\nLinux\n\n修改~/.bash_profile或其它环境变量相关文件，添加以下语句\n\n```bash\nexport WORKON_HOME=$HOME/.virtualenvs\n```\n\nWindows\n\nWindows下默认虚拟环境是放在用户名下面的 Envs 中的，与桌面、我的文档、下载等文件夹放在一起。更改方法：计算机-->属性-->高级系统设置-->环境变量-->添加`WORKON_HOME`\n\n\n\n\n\n# 小结\n\n使用 virtualenv + virtualenvwrapper 可以很好的完成环境隔离，保证对每个应用的环境是干净的，可以通过以下 2条命令导出包依赖或安装包依赖：\n\n**导出包依赖**\n\n```bash\npip freeze > requirements.txt\n```\n\n**安装包依赖**\n\n```bash\npip install -r requirements.txt\n```","source":"_posts/优雅地使用Python之环境管理.md","raw":"---\ntitle: 优雅地使用Python之环境管理\ncategories:\n  - Python\ntags:\n  - virtualenv\n  - virtualenvwrapper\ndate: 2016-09-04 21:34:53\n---\n\n\n\n# virtualenv\n\nvirtualenv 用于创建独立的 Python 环境，多个Python相互独立，互不影响，它能够：\n1. 在没有权限的情况下安装新套件\n2. 隔离项目之间的第三方包依赖\n3. 方便部署到生产环境\n\n\n\n**安装方法**\n\n```bash\npip install virtualenv\n```\n\n<!--more-->\n\n\n**使用**\n\n- 创建虚拟环境\n\n  ```bash\n  virtualenv  虚拟环境名称\n  ```\n\n- 默认情况下，虚拟环境会依赖系统环境中的 site packages，就是说系统中已经安装好的第三方 package 也会安装在虚拟环境中，如果不想依赖这些 package ，那么可以加上参数 --no-site-packages 建立虚拟环境\n\n  ```bash\n  virtualenv --no-site-packages 虚拟环境名称\n  ```\n\n- 激活虚拟环境\n\n  Linux\n\n  ```bash\n  source path/to/virtualenv/bin/activate\n  ```\n\n  Windows\n\n  ```bash\n  path\\to\\virtualenv\\Scripts\\activate\n  ```\n\n- 退出虚拟环境\n\n  ```bash\n  deactivate\n  ```\n\n\n\n\n\n\n\n# virtualenvwrapper\n\nVirtualenvwrapper 是 Virtualenv 的一个扩展，可使虚拟环境的管理变得更容易，Virtualenvwrapper 提供以下功能：\n\n1. 将所有的虚拟环境整合在一个目录下\n2. 管理（新增、移除、复制）所有的虚拟环境\n3. 可以使用一个命令切换虚拟环境\n4. Tab 补全虚拟环境的名字\n5. 每个操作都提供允许使用者自定的 hooks\n6. 可撰写容易分享的 extension plugin 系统\n\n\n\n**安装**\n\nLinux\n\n```bash\npip install virtualenvwrapper\n```\n\nWindows\n\n```bash\npip install virtualenvwrapper-win\n```\n\n\n\n**使用**\n\n列出虚拟环境列表\n\n```bash\nworkon\n# 或者\nlsvirtualenv\n```\n\n新建虚拟环境\n\n```bash\nmkvirtualenv 虚拟环境名称\n```\n\n启动 / 切换虚拟环境\n\n```bash\nworkon 虚拟环境名称\n```\n\n删除虚拟环境\n\n```bash\nrmvirtualenv 虚拟环境名称\n```\n\n离开虚拟环境\n\n```bash\ndeactivate\n```\n\n\n\n**自定义新建虚拟环境的保存目录**\n\nLinux\n\n修改~/.bash_profile或其它环境变量相关文件，添加以下语句\n\n```bash\nexport WORKON_HOME=$HOME/.virtualenvs\n```\n\nWindows\n\nWindows下默认虚拟环境是放在用户名下面的 Envs 中的，与桌面、我的文档、下载等文件夹放在一起。更改方法：计算机-->属性-->高级系统设置-->环境变量-->添加`WORKON_HOME`\n\n\n\n\n\n# 小结\n\n使用 virtualenv + virtualenvwrapper 可以很好的完成环境隔离，保证对每个应用的环境是干净的，可以通过以下 2条命令导出包依赖或安装包依赖：\n\n**导出包依赖**\n\n```bash\npip freeze > requirements.txt\n```\n\n**安装包依赖**\n\n```bash\npip install -r requirements.txt\n```","slug":"优雅地使用Python之环境管理","published":1,"updated":"2017-02-13T14:57:10.886Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz485cmc0006koce1twt1rcy","content":"<h1 id=\"virtualenv\"><a href=\"#virtualenv\" class=\"headerlink\" title=\"virtualenv\"></a>virtualenv</h1><p>virtualenv 用于创建独立的 Python 环境，多个Python相互独立，互不影响，它能够：</p>\n<ol>\n<li>在没有权限的情况下安装新套件</li>\n<li>隔离项目之间的第三方包依赖</li>\n<li>方便部署到生产环境</li>\n</ol>\n<p><strong>安装方法</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install virtualenv</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p><strong>使用</strong></p>\n<ul>\n<li><p>创建虚拟环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">virtualenv  虚拟环境名称</div></pre></td></tr></table></figure>\n</li>\n<li><p>默认情况下，虚拟环境会依赖系统环境中的 site packages，就是说系统中已经安装好的第三方 package 也会安装在虚拟环境中，如果不想依赖这些 package ，那么可以加上参数 –no-site-packages 建立虚拟环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">virtualenv --no-site-packages 虚拟环境名称</div></pre></td></tr></table></figure>\n</li>\n<li><p>激活虚拟环境</p>\n<p>Linux</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">source</span> path/to/virtualenv/bin/activate</div></pre></td></tr></table></figure>\n<p>Windows</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">path\\to\\virtualenv\\Scripts\\activate</div></pre></td></tr></table></figure>\n</li>\n<li><p>退出虚拟环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">deactivate</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"virtualenvwrapper\"><a href=\"#virtualenvwrapper\" class=\"headerlink\" title=\"virtualenvwrapper\"></a>virtualenvwrapper</h1><p>Virtualenvwrapper 是 Virtualenv 的一个扩展，可使虚拟环境的管理变得更容易，Virtualenvwrapper 提供以下功能：</p>\n<ol>\n<li>将所有的虚拟环境整合在一个目录下</li>\n<li>管理（新增、移除、复制）所有的虚拟环境</li>\n<li>可以使用一个命令切换虚拟环境</li>\n<li>Tab 补全虚拟环境的名字</li>\n<li>每个操作都提供允许使用者自定的 hooks</li>\n<li>可撰写容易分享的 extension plugin 系统</li>\n</ol>\n<p><strong>安装</strong></p>\n<p>Linux</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install virtualenvwrapper</div></pre></td></tr></table></figure>\n<p>Windows</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install virtualenvwrapper-win</div></pre></td></tr></table></figure>\n<p><strong>使用</strong></p>\n<p>列出虚拟环境列表</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">workon</div><div class=\"line\"><span class=\"comment\"># 或者</span></div><div class=\"line\">lsvirtualenv</div></pre></td></tr></table></figure>\n<p>新建虚拟环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkvirtualenv 虚拟环境名称</div></pre></td></tr></table></figure>\n<p>启动 / 切换虚拟环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">workon 虚拟环境名称</div></pre></td></tr></table></figure>\n<p>删除虚拟环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rmvirtualenv 虚拟环境名称</div></pre></td></tr></table></figure>\n<p>离开虚拟环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">deactivate</div></pre></td></tr></table></figure>\n<p><strong>自定义新建虚拟环境的保存目录</strong></p>\n<p>Linux</p>\n<p>修改~/.bash_profile或其它环境变量相关文件，添加以下语句</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">export</span> WORKON_HOME=<span class=\"variable\">$HOME</span>/.virtualenvs</div></pre></td></tr></table></figure>\n<p>Windows</p>\n<p>Windows下默认虚拟环境是放在用户名下面的 Envs 中的，与桌面、我的文档、下载等文件夹放在一起。更改方法：计算机–&gt;属性–&gt;高级系统设置–&gt;环境变量–&gt;添加<code>WORKON_HOME</code></p>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p>使用 virtualenv + virtualenvwrapper 可以很好的完成环境隔离，保证对每个应用的环境是干净的，可以通过以下 2条命令导出包依赖或安装包依赖：</p>\n<p><strong>导出包依赖</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip freeze &gt; requirements.txt</div></pre></td></tr></table></figure>\n<p><strong>安装包依赖</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install -r requirements.txt</div></pre></td></tr></table></figure>","excerpt":"<h1 id=\"virtualenv\"><a href=\"#virtualenv\" class=\"headerlink\" title=\"virtualenv\"></a>virtualenv</h1><p>virtualenv 用于创建独立的 Python 环境，多个Python相互独立，互不影响，它能够：</p>\n<ol>\n<li>在没有权限的情况下安装新套件</li>\n<li>隔离项目之间的第三方包依赖</li>\n<li>方便部署到生产环境</li>\n</ol>\n<p><strong>安装方法</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install virtualenv</div></pre></td></tr></table></figure>","more":"<p><strong>使用</strong></p>\n<ul>\n<li><p>创建虚拟环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">virtualenv  虚拟环境名称</div></pre></td></tr></table></figure>\n</li>\n<li><p>默认情况下，虚拟环境会依赖系统环境中的 site packages，就是说系统中已经安装好的第三方 package 也会安装在虚拟环境中，如果不想依赖这些 package ，那么可以加上参数 –no-site-packages 建立虚拟环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">virtualenv --no-site-packages 虚拟环境名称</div></pre></td></tr></table></figure>\n</li>\n<li><p>激活虚拟环境</p>\n<p>Linux</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">source</span> path/to/virtualenv/bin/activate</div></pre></td></tr></table></figure>\n<p>Windows</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">path\\to\\virtualenv\\Scripts\\activate</div></pre></td></tr></table></figure>\n</li>\n<li><p>退出虚拟环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">deactivate</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"virtualenvwrapper\"><a href=\"#virtualenvwrapper\" class=\"headerlink\" title=\"virtualenvwrapper\"></a>virtualenvwrapper</h1><p>Virtualenvwrapper 是 Virtualenv 的一个扩展，可使虚拟环境的管理变得更容易，Virtualenvwrapper 提供以下功能：</p>\n<ol>\n<li>将所有的虚拟环境整合在一个目录下</li>\n<li>管理（新增、移除、复制）所有的虚拟环境</li>\n<li>可以使用一个命令切换虚拟环境</li>\n<li>Tab 补全虚拟环境的名字</li>\n<li>每个操作都提供允许使用者自定的 hooks</li>\n<li>可撰写容易分享的 extension plugin 系统</li>\n</ol>\n<p><strong>安装</strong></p>\n<p>Linux</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install virtualenvwrapper</div></pre></td></tr></table></figure>\n<p>Windows</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install virtualenvwrapper-win</div></pre></td></tr></table></figure>\n<p><strong>使用</strong></p>\n<p>列出虚拟环境列表</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">workon</div><div class=\"line\"><span class=\"comment\"># 或者</span></div><div class=\"line\">lsvirtualenv</div></pre></td></tr></table></figure>\n<p>新建虚拟环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkvirtualenv 虚拟环境名称</div></pre></td></tr></table></figure>\n<p>启动 / 切换虚拟环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">workon 虚拟环境名称</div></pre></td></tr></table></figure>\n<p>删除虚拟环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rmvirtualenv 虚拟环境名称</div></pre></td></tr></table></figure>\n<p>离开虚拟环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">deactivate</div></pre></td></tr></table></figure>\n<p><strong>自定义新建虚拟环境的保存目录</strong></p>\n<p>Linux</p>\n<p>修改~/.bash_profile或其它环境变量相关文件，添加以下语句</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">export</span> WORKON_HOME=<span class=\"variable\">$HOME</span>/.virtualenvs</div></pre></td></tr></table></figure>\n<p>Windows</p>\n<p>Windows下默认虚拟环境是放在用户名下面的 Envs 中的，与桌面、我的文档、下载等文件夹放在一起。更改方法：计算机–&gt;属性–&gt;高级系统设置–&gt;环境变量–&gt;添加<code>WORKON_HOME</code></p>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p>使用 virtualenv + virtualenvwrapper 可以很好的完成环境隔离，保证对每个应用的环境是干净的，可以通过以下 2条命令导出包依赖或安装包依赖：</p>\n<p><strong>导出包依赖</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip freeze &gt; requirements.txt</div></pre></td></tr></table></figure>\n<p><strong>安装包依赖</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install -r requirements.txt</div></pre></td></tr></table></figure>"},{"title":"初识MySQL数据库","date":"2016-09-12T11:38:13.000Z","_content":"\n# SQL语句语法\n\n## 结束SQL语句\n\n- 多条SQL语句必须以分号`;`分隔\n\n- mysql命令行必须使用分号来结束SQL语句\n\n- MySQL不需要在单条SQL语句后加分号\n\n  > 但某些DBMS可能强制要求加分号；所以，总是加上分号肯定没错。\n\n## SQL语句大小写\n\n- SQL 语句不区分大小写\n\n  > SELECT、select和 Select 都是相同的。\n  >\n  > 许多 SQL 开发人员喜欢对所有 SQL 关键字使用大写，对所有列和表名使用小写，这样可以使代码更易于阅读和调试。\n  >\n  > 但是，MySQL 在4.1及之前的版本中对有些标识符（如数据库名、表名、列名）是区分大小写的。因此，最佳方式是按照大小写的惯例。\n\n- 处理 SQL 语句时，其中所有的空格都会被忽略\n\n  > SQL 语句可以在一行上给出，也可以分成许多行。显然，分成多行更便于阅读和调试。\n\n\n<!--more-->\n\n\n## SQL语句注释\n\n- `-- `到该行结束；**注意：“--”后面至少要有一个空格**\n- `/*...*/`行中、多行注释\n- `#`在MySQL中可用，但这个不是标准的SQL注释\n\n\n\n\n\n\n# SHOW语句\n\n| 语句                            | 作用                       |\n| :---------------------------- | :----------------------- |\n| SHOW STATUS                   | 显示广泛的服务器状态信息             |\n| SHOW GRANTS                   | 显示授予用户的安全权限              |\n| SHOW ERRORS                   | 显示服务器错误信息                |\n| SHOW WARNINGS                 | 显示服务器警告信息                |\n| SHOW DATABASES                | 返回可用的数据库列表               |\n| SHOW TABLES                   | 返回当前数据库内可用表的列表           |\n| SHOW COLUMNS FROM <customers> | 返回<customers>表中每个字段的详细信息 |\n| 其他：                           |                          |\n| USE <database>                | 选择/打开<database>数据库       |\n| HELP SHOW                     | 进一步了解SHOW，显示允许的SHOW命令    |\n\n\n\n\n\n# 常用关键字\n\n| 关键字      | 作用       |\n| -------- | -------- |\n| DISTINCT | 检索不相同的行  |\n| LIMIT    | 限制返回的行   |\n| ORDER BY | 排序返回结果   |\n| DESC     | 降序排序     |\n| ASC      | 升序排序（默认） |\n| WHERE    | 数据过滤     |\n\n\n\n\n\n# SELECT语句\n\n## 检索数据\n\n使用SELECT检索数据，必须至少给出两条信息：\n\n- 想选择什么\n\n- 从什么地方选择\n\n  SELECT <what> FROM <where>;\n\n检索单列\n\n```mysql\nSELECT <column> FROM <tables>;\n```\n\n检索多列\n\n```mysql\nSELECT <column1>,<column2>,<column3> FROM <tables>;\n```\n\n检索所有列（使用通配符`*`）\n\n```mysql\nSELECT * FROM <tables>;\n```\n\n检索不相同的行（DISTINCT应用于所有列，不仅是前置它的列）\n```mysql\nSELECT DISTINCT <column> FROM <table>;\n```\n\n限制结果（返回限制的行）\n```mysql\nSELECT <column> FROM <table> LIMIT <n>;  # 返回前n行\nSELECT <column> FROM <table> LIMIT <m>,<n>;  # 返回第m行后面的n行\n```\n\n## 排序检索数据\n按列排序\n```mysql\nSELECT <column1> FROM <table> ORDER BY <column2>;  # 按列1的字母顺序排列列2的检索结果\n```\n\n按多列排序\n```mysql\nSELECT <column1>, <column2>, <column3>, FROM <table> ORDER BY <column4>, <column5>;  # 先按列4再按列5排序检索结果\n```\n\n> 注意：用非检索的列来排序数据也是合法的。\n\n检索数据默认升序排序，降序排序必须指定 DESC关键字\n\n```mysql\nSELECT <column1>, <column2>, <column3>, FROM <table> ORDER BY <column4> DESC;\n```\n\n\n\n\n# WHERE子句\n\n## 单WHERE子句\n\n从表中检索出列中值等于5的结果；当然，`=`可以换成`<` `>` `!=` `<=` `>=` `BETWEEN`\n\n```mysql\nSELECT <column> FROM <tables> WHERE <column> = 5;\n```\n\nWHERE 后面可以跟 IS NULL 来进行空值检查\n\n```mysql\nSELECT <column> FROM <tables> WHERE <column> IS NULL;\n```\n\n## 组合WHERE子句\n\n组合WHERE子句可以使用以下操作符：\n\nAND 操作符\n\n```mysql\nSELECT <column> FROM <tables> WHERE <column> = 5 AND <column> = 10;\n```\nOR操作符\n\n```mysql\nSELECT <column> FROM <tables> WHERE <column> = 5 OR <column> = 10;\n```\nIN操作符\n\n```mysql\nSELECT <column> FROM <tables> WHERE <column> IN (5,10);\n```\n> IN 完成的功能和 OR 完全相同，但 IN 有以下优点：\n>\n> 更清楚、直观，IN操作符 比 OR 操作符执行更快，等等。\n\nNOT操作符\n\n```mysql\nSELECT <column> FROM <tables> WHERE <column> NOT IN (5,10);\n```\n\n> **MySQL 中只支持 NOT 对 IN、BETWEEN 和 EXISTS 子句取反**，这个**多数其他 DBMS 允许使用 NOT 对各种条件取反**有很大的差别。\n\n\n\n\n\n# 聚集函数\n\n**聚集函数** 指运行在行组上，计算和返回单个值的函数。\n\nMySQL中常用的5个聚集函数有：\n\n| 函数      | 说明       |\n| :------ | :------- |\n| AVG()   | 返回某列的平均值 |\n| COUNT() | 返回某列的行数  |\n| MAX()   | 返回某列的最大值 |\n| MIN()   | 返回某列的最小值 |\n| SUM()   | 返回某列值之和  |\n\n例子：\n\n使用AVG()返回products表中所有产品的平均价格：\n\nSELECT AVG(prod_price) AS avg_price FROM products;\n\n\n\n\n\n# GROUP BY & HAVING子句\n\n## GROUP BY的一些重要规定\n\nGROUP BY字句可以包含任意数目的列，使得能对分组进行嵌套，为数据分组提供更细致的控制。\n\nGROUP BY字句中列出的每一列都必须是检索列或有效的表达式（但不能是聚集函数）；如果SELECT中使用表达式，GROUP BY字句中也必须指定相同的表达式，不能使用别名。\n\n除聚集计算语句外，SELECT语句中的每一列都必须在GROUP BY字句中给出\n\nGROUP BY子句必须出现在WHERE子句之后，ORDER BY子句之前。\n\n## HAVING子句\n\n目前为止学过的所有类型的WHERE子句都可以用HAVING来替代。**唯一不同的是：WHERE过滤行，HAVING过滤分组。**\n\nHAVING和WHERE的差别：**WHERE在数据分组前进行过滤，HAVING在数据分组后进行过滤。**\n\n## GROUP BY & ORDER BY\n\nGROUP BY（分组）和ORDER BY（排序）的差别：\n\n|      | ORDER BY              | GROUP BY                     |\n| :--- | :-------------------- | :--------------------------- |\n| 输出   | 排序产生的输出               | 输出分组行（但可能不是分组的顺序）            |\n| 怎么使用 | 任意列都可以使用（甚至非选择列也可以使用） | 只能使用选择列或表达式列，而且必须使用每个选择列的表达式 |\n| 必须使用 | 不一定需要                 | 如果与聚集函数一起使用列或表达式，则必须使用       |\n\n> 注意：\n>\n> 一般在使用GROUP BY子句时，应该给出ORDER BY子句；不能仅依赖GROUP BY排序数据，这是保证数据正确排序的唯一方法。\n\n例子：检索总计订单价格大于等于50的订单的订单号和总计订单价格，并按总计订单价格排序\n\nSELECT order_num, SUM(quantity*item_price) AS ordertotal\n\nFROM orderitems\n\nGROUP BY order_num\n\nHAVING SUM(quantity*item_price) >= 50\n\nORDER BY ordertotal\n\n\n\n\n\n# SELECT子句的顺序\n\n| 子句       | 说明        | 是否必须使用      |\n| :------- | :-------- | :---------- |\n| SELECT   | 要返回的列或表达式 | 是           |\n| FROM     | 从中检索数据的表  | 仅在从表选择数据时使用 |\n| WHERE    | 行级过滤      | 否           |\n| GROUP BY | 分组说明      | 仅在按组计算聚集时使用 |\n| HAVING   | 组级过滤      | 否           |\n| ORDER BY | 输出排序顺序    | 否           |\n| LIMIT    | 要检索的行数    | 否           |","source":"_posts/初识MySQL数据库.md","raw":"---\ntitle: 初识MySQL数据库\ndate: 2016-09-12 19:38:13\ncategories: SQL\ntags:\n- SQL\n- MySQL\n---\n\n# SQL语句语法\n\n## 结束SQL语句\n\n- 多条SQL语句必须以分号`;`分隔\n\n- mysql命令行必须使用分号来结束SQL语句\n\n- MySQL不需要在单条SQL语句后加分号\n\n  > 但某些DBMS可能强制要求加分号；所以，总是加上分号肯定没错。\n\n## SQL语句大小写\n\n- SQL 语句不区分大小写\n\n  > SELECT、select和 Select 都是相同的。\n  >\n  > 许多 SQL 开发人员喜欢对所有 SQL 关键字使用大写，对所有列和表名使用小写，这样可以使代码更易于阅读和调试。\n  >\n  > 但是，MySQL 在4.1及之前的版本中对有些标识符（如数据库名、表名、列名）是区分大小写的。因此，最佳方式是按照大小写的惯例。\n\n- 处理 SQL 语句时，其中所有的空格都会被忽略\n\n  > SQL 语句可以在一行上给出，也可以分成许多行。显然，分成多行更便于阅读和调试。\n\n\n<!--more-->\n\n\n## SQL语句注释\n\n- `-- `到该行结束；**注意：“--”后面至少要有一个空格**\n- `/*...*/`行中、多行注释\n- `#`在MySQL中可用，但这个不是标准的SQL注释\n\n\n\n\n\n\n# SHOW语句\n\n| 语句                            | 作用                       |\n| :---------------------------- | :----------------------- |\n| SHOW STATUS                   | 显示广泛的服务器状态信息             |\n| SHOW GRANTS                   | 显示授予用户的安全权限              |\n| SHOW ERRORS                   | 显示服务器错误信息                |\n| SHOW WARNINGS                 | 显示服务器警告信息                |\n| SHOW DATABASES                | 返回可用的数据库列表               |\n| SHOW TABLES                   | 返回当前数据库内可用表的列表           |\n| SHOW COLUMNS FROM <customers> | 返回<customers>表中每个字段的详细信息 |\n| 其他：                           |                          |\n| USE <database>                | 选择/打开<database>数据库       |\n| HELP SHOW                     | 进一步了解SHOW，显示允许的SHOW命令    |\n\n\n\n\n\n# 常用关键字\n\n| 关键字      | 作用       |\n| -------- | -------- |\n| DISTINCT | 检索不相同的行  |\n| LIMIT    | 限制返回的行   |\n| ORDER BY | 排序返回结果   |\n| DESC     | 降序排序     |\n| ASC      | 升序排序（默认） |\n| WHERE    | 数据过滤     |\n\n\n\n\n\n# SELECT语句\n\n## 检索数据\n\n使用SELECT检索数据，必须至少给出两条信息：\n\n- 想选择什么\n\n- 从什么地方选择\n\n  SELECT <what> FROM <where>;\n\n检索单列\n\n```mysql\nSELECT <column> FROM <tables>;\n```\n\n检索多列\n\n```mysql\nSELECT <column1>,<column2>,<column3> FROM <tables>;\n```\n\n检索所有列（使用通配符`*`）\n\n```mysql\nSELECT * FROM <tables>;\n```\n\n检索不相同的行（DISTINCT应用于所有列，不仅是前置它的列）\n```mysql\nSELECT DISTINCT <column> FROM <table>;\n```\n\n限制结果（返回限制的行）\n```mysql\nSELECT <column> FROM <table> LIMIT <n>;  # 返回前n行\nSELECT <column> FROM <table> LIMIT <m>,<n>;  # 返回第m行后面的n行\n```\n\n## 排序检索数据\n按列排序\n```mysql\nSELECT <column1> FROM <table> ORDER BY <column2>;  # 按列1的字母顺序排列列2的检索结果\n```\n\n按多列排序\n```mysql\nSELECT <column1>, <column2>, <column3>, FROM <table> ORDER BY <column4>, <column5>;  # 先按列4再按列5排序检索结果\n```\n\n> 注意：用非检索的列来排序数据也是合法的。\n\n检索数据默认升序排序，降序排序必须指定 DESC关键字\n\n```mysql\nSELECT <column1>, <column2>, <column3>, FROM <table> ORDER BY <column4> DESC;\n```\n\n\n\n\n# WHERE子句\n\n## 单WHERE子句\n\n从表中检索出列中值等于5的结果；当然，`=`可以换成`<` `>` `!=` `<=` `>=` `BETWEEN`\n\n```mysql\nSELECT <column> FROM <tables> WHERE <column> = 5;\n```\n\nWHERE 后面可以跟 IS NULL 来进行空值检查\n\n```mysql\nSELECT <column> FROM <tables> WHERE <column> IS NULL;\n```\n\n## 组合WHERE子句\n\n组合WHERE子句可以使用以下操作符：\n\nAND 操作符\n\n```mysql\nSELECT <column> FROM <tables> WHERE <column> = 5 AND <column> = 10;\n```\nOR操作符\n\n```mysql\nSELECT <column> FROM <tables> WHERE <column> = 5 OR <column> = 10;\n```\nIN操作符\n\n```mysql\nSELECT <column> FROM <tables> WHERE <column> IN (5,10);\n```\n> IN 完成的功能和 OR 完全相同，但 IN 有以下优点：\n>\n> 更清楚、直观，IN操作符 比 OR 操作符执行更快，等等。\n\nNOT操作符\n\n```mysql\nSELECT <column> FROM <tables> WHERE <column> NOT IN (5,10);\n```\n\n> **MySQL 中只支持 NOT 对 IN、BETWEEN 和 EXISTS 子句取反**，这个**多数其他 DBMS 允许使用 NOT 对各种条件取反**有很大的差别。\n\n\n\n\n\n# 聚集函数\n\n**聚集函数** 指运行在行组上，计算和返回单个值的函数。\n\nMySQL中常用的5个聚集函数有：\n\n| 函数      | 说明       |\n| :------ | :------- |\n| AVG()   | 返回某列的平均值 |\n| COUNT() | 返回某列的行数  |\n| MAX()   | 返回某列的最大值 |\n| MIN()   | 返回某列的最小值 |\n| SUM()   | 返回某列值之和  |\n\n例子：\n\n使用AVG()返回products表中所有产品的平均价格：\n\nSELECT AVG(prod_price) AS avg_price FROM products;\n\n\n\n\n\n# GROUP BY & HAVING子句\n\n## GROUP BY的一些重要规定\n\nGROUP BY字句可以包含任意数目的列，使得能对分组进行嵌套，为数据分组提供更细致的控制。\n\nGROUP BY字句中列出的每一列都必须是检索列或有效的表达式（但不能是聚集函数）；如果SELECT中使用表达式，GROUP BY字句中也必须指定相同的表达式，不能使用别名。\n\n除聚集计算语句外，SELECT语句中的每一列都必须在GROUP BY字句中给出\n\nGROUP BY子句必须出现在WHERE子句之后，ORDER BY子句之前。\n\n## HAVING子句\n\n目前为止学过的所有类型的WHERE子句都可以用HAVING来替代。**唯一不同的是：WHERE过滤行，HAVING过滤分组。**\n\nHAVING和WHERE的差别：**WHERE在数据分组前进行过滤，HAVING在数据分组后进行过滤。**\n\n## GROUP BY & ORDER BY\n\nGROUP BY（分组）和ORDER BY（排序）的差别：\n\n|      | ORDER BY              | GROUP BY                     |\n| :--- | :-------------------- | :--------------------------- |\n| 输出   | 排序产生的输出               | 输出分组行（但可能不是分组的顺序）            |\n| 怎么使用 | 任意列都可以使用（甚至非选择列也可以使用） | 只能使用选择列或表达式列，而且必须使用每个选择列的表达式 |\n| 必须使用 | 不一定需要                 | 如果与聚集函数一起使用列或表达式，则必须使用       |\n\n> 注意：\n>\n> 一般在使用GROUP BY子句时，应该给出ORDER BY子句；不能仅依赖GROUP BY排序数据，这是保证数据正确排序的唯一方法。\n\n例子：检索总计订单价格大于等于50的订单的订单号和总计订单价格，并按总计订单价格排序\n\nSELECT order_num, SUM(quantity*item_price) AS ordertotal\n\nFROM orderitems\n\nGROUP BY order_num\n\nHAVING SUM(quantity*item_price) >= 50\n\nORDER BY ordertotal\n\n\n\n\n\n# SELECT子句的顺序\n\n| 子句       | 说明        | 是否必须使用      |\n| :------- | :-------- | :---------- |\n| SELECT   | 要返回的列或表达式 | 是           |\n| FROM     | 从中检索数据的表  | 仅在从表选择数据时使用 |\n| WHERE    | 行级过滤      | 否           |\n| GROUP BY | 分组说明      | 仅在按组计算聚集时使用 |\n| HAVING   | 组级过滤      | 否           |\n| ORDER BY | 输出排序顺序    | 否           |\n| LIMIT    | 要检索的行数    | 否           |","slug":"初识MySQL数据库","published":1,"updated":"2017-02-13T13:53:57.038Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz485cmf0007koce7kqm4yin","content":"<h1 id=\"SQL语句语法\"><a href=\"#SQL语句语法\" class=\"headerlink\" title=\"SQL语句语法\"></a>SQL语句语法</h1><h2 id=\"结束SQL语句\"><a href=\"#结束SQL语句\" class=\"headerlink\" title=\"结束SQL语句\"></a>结束SQL语句</h2><ul>\n<li><p>多条SQL语句必须以分号<code>;</code>分隔</p>\n</li>\n<li><p>mysql命令行必须使用分号来结束SQL语句</p>\n</li>\n<li><p>MySQL不需要在单条SQL语句后加分号</p>\n<blockquote>\n<p>但某些DBMS可能强制要求加分号；所以，总是加上分号肯定没错。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"SQL语句大小写\"><a href=\"#SQL语句大小写\" class=\"headerlink\" title=\"SQL语句大小写\"></a>SQL语句大小写</h2><ul>\n<li><p>SQL 语句不区分大小写</p>\n<blockquote>\n<p>SELECT、select和 Select 都是相同的。</p>\n<p>许多 SQL 开发人员喜欢对所有 SQL 关键字使用大写，对所有列和表名使用小写，这样可以使代码更易于阅读和调试。</p>\n<p>但是，MySQL 在4.1及之前的版本中对有些标识符（如数据库名、表名、列名）是区分大小写的。因此，最佳方式是按照大小写的惯例。</p>\n</blockquote>\n</li>\n<li><p>处理 SQL 语句时，其中所有的空格都会被忽略</p>\n<blockquote>\n<p>SQL 语句可以在一行上给出，也可以分成许多行。显然，分成多行更便于阅读和调试。</p>\n</blockquote>\n</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"SQL语句注释\"><a href=\"#SQL语句注释\" class=\"headerlink\" title=\"SQL语句注释\"></a>SQL语句注释</h2><ul>\n<li><code>--</code>到该行结束；<strong>注意：“–”后面至少要有一个空格</strong></li>\n<li><code>/*...*/</code>行中、多行注释</li>\n<li><code>#</code>在MySQL中可用，但这个不是标准的SQL注释</li>\n</ul>\n<h1 id=\"SHOW语句\"><a href=\"#SHOW语句\" class=\"headerlink\" title=\"SHOW语句\"></a>SHOW语句</h1><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">语句</th>\n<th style=\"text-align:left\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">SHOW STATUS</td>\n<td style=\"text-align:left\">显示广泛的服务器状态信息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SHOW GRANTS</td>\n<td style=\"text-align:left\">显示授予用户的安全权限</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SHOW ERRORS</td>\n<td style=\"text-align:left\">显示服务器错误信息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SHOW WARNINGS</td>\n<td style=\"text-align:left\">显示服务器警告信息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SHOW DATABASES</td>\n<td style=\"text-align:left\">返回可用的数据库列表</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SHOW TABLES</td>\n<td style=\"text-align:left\">返回当前数据库内可用表的列表</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SHOW COLUMNS FROM <customers></customers></td>\n<td style=\"text-align:left\">返回<customers>表中每个字段的详细信息</customers></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">其他：</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">USE <database></database></td>\n<td style=\"text-align:left\">选择/打开<database>数据库</database></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">HELP SHOW</td>\n<td style=\"text-align:left\">进一步了解SHOW，显示允许的SHOW命令</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"常用关键字\"><a href=\"#常用关键字\" class=\"headerlink\" title=\"常用关键字\"></a>常用关键字</h1><table>\n<thead>\n<tr>\n<th>关键字</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DISTINCT</td>\n<td>检索不相同的行</td>\n</tr>\n<tr>\n<td>LIMIT</td>\n<td>限制返回的行</td>\n</tr>\n<tr>\n<td>ORDER BY</td>\n<td>排序返回结果</td>\n</tr>\n<tr>\n<td>DESC</td>\n<td>降序排序</td>\n</tr>\n<tr>\n<td>ASC</td>\n<td>升序排序（默认）</td>\n</tr>\n<tr>\n<td>WHERE</td>\n<td>数据过滤</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"SELECT语句\"><a href=\"#SELECT语句\" class=\"headerlink\" title=\"SELECT语句\"></a>SELECT语句</h1><h2 id=\"检索数据\"><a href=\"#检索数据\" class=\"headerlink\" title=\"检索数据\"></a>检索数据</h2><p>使用SELECT检索数据，必须至少给出两条信息：</p>\n<ul>\n<li><p>想选择什么</p>\n</li>\n<li><p>从什么地方选择</p>\n<p>SELECT <what> FROM <where>;</where></what></p>\n</li>\n</ul>\n<p>检索单列</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT &lt;column&gt; FROM &lt;tables&gt;;</div></pre></td></tr></table></figure>\n<p>检索多列</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT &lt;column1&gt;,&lt;column2&gt;,&lt;column3&gt; FROM &lt;tables&gt;;</div></pre></td></tr></table></figure>\n<p>检索所有列（使用通配符<code>*</code>）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT * FROM &lt;tables&gt;;</div></pre></td></tr></table></figure>\n<p>检索不相同的行（DISTINCT应用于所有列，不仅是前置它的列）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT DISTINCT &lt;column&gt; FROM &lt;table&gt;;</div></pre></td></tr></table></figure></p>\n<p>限制结果（返回限制的行）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT &lt;column&gt; FROM &lt;table&gt; LIMIT &lt;n&gt;;  # 返回前n行</div><div class=\"line\">SELECT &lt;column&gt; FROM &lt;table&gt; LIMIT &lt;m&gt;,&lt;n&gt;;  # 返回第m行后面的n行</div></pre></td></tr></table></figure></p>\n<h2 id=\"排序检索数据\"><a href=\"#排序检索数据\" class=\"headerlink\" title=\"排序检索数据\"></a>排序检索数据</h2><p>按列排序<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT &lt;column1&gt; FROM &lt;table&gt; ORDER BY &lt;column2&gt;;  # 按列1的字母顺序排列列2的检索结果</div></pre></td></tr></table></figure></p>\n<p>按多列排序<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT &lt;column1&gt;, &lt;column2&gt;, &lt;column3&gt;, FROM &lt;table&gt; ORDER BY &lt;column4&gt;, &lt;column5&gt;;  # 先按列4再按列5排序检索结果</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意：用非检索的列来排序数据也是合法的。</p>\n</blockquote>\n<p>检索数据默认升序排序，降序排序必须指定 DESC关键字</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT &lt;column1&gt;, &lt;column2&gt;, &lt;column3&gt;, FROM &lt;table&gt; ORDER BY &lt;column4&gt; DESC;</div></pre></td></tr></table></figure>\n<h1 id=\"WHERE子句\"><a href=\"#WHERE子句\" class=\"headerlink\" title=\"WHERE子句\"></a>WHERE子句</h1><h2 id=\"单WHERE子句\"><a href=\"#单WHERE子句\" class=\"headerlink\" title=\"单WHERE子句\"></a>单WHERE子句</h2><p>从表中检索出列中值等于5的结果；当然，<code>=</code>可以换成<code>&lt;</code> <code>&gt;</code> <code>!=</code> <code>&lt;=</code> <code>&gt;=</code> <code>BETWEEN</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT &lt;column&gt; FROM &lt;tables&gt; WHERE &lt;column&gt; = 5;</div></pre></td></tr></table></figure>\n<p>WHERE 后面可以跟 IS NULL 来进行空值检查</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT &lt;column&gt; FROM &lt;tables&gt; WHERE &lt;column&gt; IS NULL;</div></pre></td></tr></table></figure>\n<h2 id=\"组合WHERE子句\"><a href=\"#组合WHERE子句\" class=\"headerlink\" title=\"组合WHERE子句\"></a>组合WHERE子句</h2><p>组合WHERE子句可以使用以下操作符：</p>\n<p>AND 操作符</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT &lt;column&gt; FROM &lt;tables&gt; WHERE &lt;column&gt; = 5 AND &lt;column&gt; = 10;</div></pre></td></tr></table></figure>\n<p>OR操作符</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT &lt;column&gt; FROM &lt;tables&gt; WHERE &lt;column&gt; = 5 OR &lt;column&gt; = 10;</div></pre></td></tr></table></figure>\n<p>IN操作符</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT &lt;column&gt; FROM &lt;tables&gt; WHERE &lt;column&gt; IN (5,10);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>IN 完成的功能和 OR 完全相同，但 IN 有以下优点：</p>\n<p>更清楚、直观，IN操作符 比 OR 操作符执行更快，等等。</p>\n</blockquote>\n<p>NOT操作符</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT &lt;column&gt; FROM &lt;tables&gt; WHERE &lt;column&gt; NOT IN (5,10);</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>MySQL 中只支持 NOT 对 IN、BETWEEN 和 EXISTS 子句取反</strong>，这个<strong>多数其他 DBMS 允许使用 NOT 对各种条件取反</strong>有很大的差别。</p>\n</blockquote>\n<h1 id=\"聚集函数\"><a href=\"#聚集函数\" class=\"headerlink\" title=\"聚集函数\"></a>聚集函数</h1><p><strong>聚集函数</strong> 指运行在行组上，计算和返回单个值的函数。</p>\n<p>MySQL中常用的5个聚集函数有：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">函数</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">AVG()</td>\n<td style=\"text-align:left\">返回某列的平均值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">COUNT()</td>\n<td style=\"text-align:left\">返回某列的行数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">MAX()</td>\n<td style=\"text-align:left\">返回某列的最大值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">MIN()</td>\n<td style=\"text-align:left\">返回某列的最小值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SUM()</td>\n<td style=\"text-align:left\">返回某列值之和</td>\n</tr>\n</tbody>\n</table>\n<p>例子：</p>\n<p>使用AVG()返回products表中所有产品的平均价格：</p>\n<p>SELECT AVG(prod_price) AS avg_price FROM products;</p>\n<h1 id=\"GROUP-BY-amp-HAVING子句\"><a href=\"#GROUP-BY-amp-HAVING子句\" class=\"headerlink\" title=\"GROUP BY &amp; HAVING子句\"></a>GROUP BY &amp; HAVING子句</h1><h2 id=\"GROUP-BY的一些重要规定\"><a href=\"#GROUP-BY的一些重要规定\" class=\"headerlink\" title=\"GROUP BY的一些重要规定\"></a>GROUP BY的一些重要规定</h2><p>GROUP BY字句可以包含任意数目的列，使得能对分组进行嵌套，为数据分组提供更细致的控制。</p>\n<p>GROUP BY字句中列出的每一列都必须是检索列或有效的表达式（但不能是聚集函数）；如果SELECT中使用表达式，GROUP BY字句中也必须指定相同的表达式，不能使用别名。</p>\n<p>除聚集计算语句外，SELECT语句中的每一列都必须在GROUP BY字句中给出</p>\n<p>GROUP BY子句必须出现在WHERE子句之后，ORDER BY子句之前。</p>\n<h2 id=\"HAVING子句\"><a href=\"#HAVING子句\" class=\"headerlink\" title=\"HAVING子句\"></a>HAVING子句</h2><p>目前为止学过的所有类型的WHERE子句都可以用HAVING来替代。<strong>唯一不同的是：WHERE过滤行，HAVING过滤分组。</strong></p>\n<p>HAVING和WHERE的差别：<strong>WHERE在数据分组前进行过滤，HAVING在数据分组后进行过滤。</strong></p>\n<h2 id=\"GROUP-BY-amp-ORDER-BY\"><a href=\"#GROUP-BY-amp-ORDER-BY\" class=\"headerlink\" title=\"GROUP BY &amp; ORDER BY\"></a>GROUP BY &amp; ORDER BY</h2><p>GROUP BY（分组）和ORDER BY（排序）的差别：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"></th>\n<th style=\"text-align:left\">ORDER BY</th>\n<th style=\"text-align:left\">GROUP BY</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">输出</td>\n<td style=\"text-align:left\">排序产生的输出</td>\n<td style=\"text-align:left\">输出分组行（但可能不是分组的顺序）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">怎么使用</td>\n<td style=\"text-align:left\">任意列都可以使用（甚至非选择列也可以使用）</td>\n<td style=\"text-align:left\">只能使用选择列或表达式列，而且必须使用每个选择列的表达式</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">必须使用</td>\n<td style=\"text-align:left\">不一定需要</td>\n<td style=\"text-align:left\">如果与聚集函数一起使用列或表达式，则必须使用</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>注意：</p>\n<p>一般在使用GROUP BY子句时，应该给出ORDER BY子句；不能仅依赖GROUP BY排序数据，这是保证数据正确排序的唯一方法。</p>\n</blockquote>\n<p>例子：检索总计订单价格大于等于50的订单的订单号和总计订单价格，并按总计订单价格排序</p>\n<p>SELECT order_num, SUM(quantity*item_price) AS ordertotal</p>\n<p>FROM orderitems</p>\n<p>GROUP BY order_num</p>\n<p>HAVING SUM(quantity*item_price) &gt;= 50</p>\n<p>ORDER BY ordertotal</p>\n<h1 id=\"SELECT子句的顺序\"><a href=\"#SELECT子句的顺序\" class=\"headerlink\" title=\"SELECT子句的顺序\"></a>SELECT子句的顺序</h1><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">子句</th>\n<th style=\"text-align:left\">说明</th>\n<th style=\"text-align:left\">是否必须使用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">SELECT</td>\n<td style=\"text-align:left\">要返回的列或表达式</td>\n<td style=\"text-align:left\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">FROM</td>\n<td style=\"text-align:left\">从中检索数据的表</td>\n<td style=\"text-align:left\">仅在从表选择数据时使用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">WHERE</td>\n<td style=\"text-align:left\">行级过滤</td>\n<td style=\"text-align:left\">否</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">GROUP BY</td>\n<td style=\"text-align:left\">分组说明</td>\n<td style=\"text-align:left\">仅在按组计算聚集时使用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">HAVING</td>\n<td style=\"text-align:left\">组级过滤</td>\n<td style=\"text-align:left\">否</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ORDER BY</td>\n<td style=\"text-align:left\">输出排序顺序</td>\n<td style=\"text-align:left\">否</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">LIMIT</td>\n<td style=\"text-align:left\">要检索的行数</td>\n<td style=\"text-align:left\">否</td>\n</tr>\n</tbody>\n</table>\n","excerpt":"<h1 id=\"SQL语句语法\"><a href=\"#SQL语句语法\" class=\"headerlink\" title=\"SQL语句语法\"></a>SQL语句语法</h1><h2 id=\"结束SQL语句\"><a href=\"#结束SQL语句\" class=\"headerlink\" title=\"结束SQL语句\"></a>结束SQL语句</h2><ul>\n<li><p>多条SQL语句必须以分号<code>;</code>分隔</p>\n</li>\n<li><p>mysql命令行必须使用分号来结束SQL语句</p>\n</li>\n<li><p>MySQL不需要在单条SQL语句后加分号</p>\n<blockquote>\n<p>但某些DBMS可能强制要求加分号；所以，总是加上分号肯定没错。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"SQL语句大小写\"><a href=\"#SQL语句大小写\" class=\"headerlink\" title=\"SQL语句大小写\"></a>SQL语句大小写</h2><ul>\n<li><p>SQL 语句不区分大小写</p>\n<blockquote>\n<p>SELECT、select和 Select 都是相同的。</p>\n<p>许多 SQL 开发人员喜欢对所有 SQL 关键字使用大写，对所有列和表名使用小写，这样可以使代码更易于阅读和调试。</p>\n<p>但是，MySQL 在4.1及之前的版本中对有些标识符（如数据库名、表名、列名）是区分大小写的。因此，最佳方式是按照大小写的惯例。</p>\n</blockquote>\n</li>\n<li><p>处理 SQL 语句时，其中所有的空格都会被忽略</p>\n<blockquote>\n<p>SQL 语句可以在一行上给出，也可以分成许多行。显然，分成多行更便于阅读和调试。</p>\n</blockquote>\n</li>\n</ul>","more":"<h2 id=\"SQL语句注释\"><a href=\"#SQL语句注释\" class=\"headerlink\" title=\"SQL语句注释\"></a>SQL语句注释</h2><ul>\n<li><code>--</code>到该行结束；<strong>注意：“–”后面至少要有一个空格</strong></li>\n<li><code>/*...*/</code>行中、多行注释</li>\n<li><code>#</code>在MySQL中可用，但这个不是标准的SQL注释</li>\n</ul>\n<h1 id=\"SHOW语句\"><a href=\"#SHOW语句\" class=\"headerlink\" title=\"SHOW语句\"></a>SHOW语句</h1><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">语句</th>\n<th style=\"text-align:left\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">SHOW STATUS</td>\n<td style=\"text-align:left\">显示广泛的服务器状态信息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SHOW GRANTS</td>\n<td style=\"text-align:left\">显示授予用户的安全权限</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SHOW ERRORS</td>\n<td style=\"text-align:left\">显示服务器错误信息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SHOW WARNINGS</td>\n<td style=\"text-align:left\">显示服务器警告信息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SHOW DATABASES</td>\n<td style=\"text-align:left\">返回可用的数据库列表</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SHOW TABLES</td>\n<td style=\"text-align:left\">返回当前数据库内可用表的列表</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SHOW COLUMNS FROM <customers></td>\n<td style=\"text-align:left\">返回<customers>表中每个字段的详细信息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">其他：</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">USE <database></td>\n<td style=\"text-align:left\">选择/打开<database>数据库</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">HELP SHOW</td>\n<td style=\"text-align:left\">进一步了解SHOW，显示允许的SHOW命令</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"常用关键字\"><a href=\"#常用关键字\" class=\"headerlink\" title=\"常用关键字\"></a>常用关键字</h1><table>\n<thead>\n<tr>\n<th>关键字</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DISTINCT</td>\n<td>检索不相同的行</td>\n</tr>\n<tr>\n<td>LIMIT</td>\n<td>限制返回的行</td>\n</tr>\n<tr>\n<td>ORDER BY</td>\n<td>排序返回结果</td>\n</tr>\n<tr>\n<td>DESC</td>\n<td>降序排序</td>\n</tr>\n<tr>\n<td>ASC</td>\n<td>升序排序（默认）</td>\n</tr>\n<tr>\n<td>WHERE</td>\n<td>数据过滤</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"SELECT语句\"><a href=\"#SELECT语句\" class=\"headerlink\" title=\"SELECT语句\"></a>SELECT语句</h1><h2 id=\"检索数据\"><a href=\"#检索数据\" class=\"headerlink\" title=\"检索数据\"></a>检索数据</h2><p>使用SELECT检索数据，必须至少给出两条信息：</p>\n<ul>\n<li><p>想选择什么</p>\n</li>\n<li><p>从什么地方选择</p>\n<p>SELECT <what> FROM <where>;</p>\n</li>\n</ul>\n<p>检索单列</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT &lt;column&gt; FROM &lt;tables&gt;;</div></pre></td></tr></table></figure>\n<p>检索多列</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT &lt;column1&gt;,&lt;column2&gt;,&lt;column3&gt; FROM &lt;tables&gt;;</div></pre></td></tr></table></figure>\n<p>检索所有列（使用通配符<code>*</code>）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT * FROM &lt;tables&gt;;</div></pre></td></tr></table></figure>\n<p>检索不相同的行（DISTINCT应用于所有列，不仅是前置它的列）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT DISTINCT &lt;column&gt; FROM &lt;table&gt;;</div></pre></td></tr></table></figure></p>\n<p>限制结果（返回限制的行）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT &lt;column&gt; FROM &lt;table&gt; LIMIT &lt;n&gt;;  # 返回前n行</div><div class=\"line\">SELECT &lt;column&gt; FROM &lt;table&gt; LIMIT &lt;m&gt;,&lt;n&gt;;  # 返回第m行后面的n行</div></pre></td></tr></table></figure></p>\n<h2 id=\"排序检索数据\"><a href=\"#排序检索数据\" class=\"headerlink\" title=\"排序检索数据\"></a>排序检索数据</h2><p>按列排序<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT &lt;column1&gt; FROM &lt;table&gt; ORDER BY &lt;column2&gt;;  # 按列1的字母顺序排列列2的检索结果</div></pre></td></tr></table></figure></p>\n<p>按多列排序<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT &lt;column1&gt;, &lt;column2&gt;, &lt;column3&gt;, FROM &lt;table&gt; ORDER BY &lt;column4&gt;, &lt;column5&gt;;  # 先按列4再按列5排序检索结果</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意：用非检索的列来排序数据也是合法的。</p>\n</blockquote>\n<p>检索数据默认升序排序，降序排序必须指定 DESC关键字</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT &lt;column1&gt;, &lt;column2&gt;, &lt;column3&gt;, FROM &lt;table&gt; ORDER BY &lt;column4&gt; DESC;</div></pre></td></tr></table></figure>\n<h1 id=\"WHERE子句\"><a href=\"#WHERE子句\" class=\"headerlink\" title=\"WHERE子句\"></a>WHERE子句</h1><h2 id=\"单WHERE子句\"><a href=\"#单WHERE子句\" class=\"headerlink\" title=\"单WHERE子句\"></a>单WHERE子句</h2><p>从表中检索出列中值等于5的结果；当然，<code>=</code>可以换成<code>&lt;</code> <code>&gt;</code> <code>!=</code> <code>&lt;=</code> <code>&gt;=</code> <code>BETWEEN</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT &lt;column&gt; FROM &lt;tables&gt; WHERE &lt;column&gt; = 5;</div></pre></td></tr></table></figure>\n<p>WHERE 后面可以跟 IS NULL 来进行空值检查</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT &lt;column&gt; FROM &lt;tables&gt; WHERE &lt;column&gt; IS NULL;</div></pre></td></tr></table></figure>\n<h2 id=\"组合WHERE子句\"><a href=\"#组合WHERE子句\" class=\"headerlink\" title=\"组合WHERE子句\"></a>组合WHERE子句</h2><p>组合WHERE子句可以使用以下操作符：</p>\n<p>AND 操作符</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT &lt;column&gt; FROM &lt;tables&gt; WHERE &lt;column&gt; = 5 AND &lt;column&gt; = 10;</div></pre></td></tr></table></figure>\n<p>OR操作符</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT &lt;column&gt; FROM &lt;tables&gt; WHERE &lt;column&gt; = 5 OR &lt;column&gt; = 10;</div></pre></td></tr></table></figure>\n<p>IN操作符</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT &lt;column&gt; FROM &lt;tables&gt; WHERE &lt;column&gt; IN (5,10);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>IN 完成的功能和 OR 完全相同，但 IN 有以下优点：</p>\n<p>更清楚、直观，IN操作符 比 OR 操作符执行更快，等等。</p>\n</blockquote>\n<p>NOT操作符</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT &lt;column&gt; FROM &lt;tables&gt; WHERE &lt;column&gt; NOT IN (5,10);</div></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>MySQL 中只支持 NOT 对 IN、BETWEEN 和 EXISTS 子句取反</strong>，这个<strong>多数其他 DBMS 允许使用 NOT 对各种条件取反</strong>有很大的差别。</p>\n</blockquote>\n<h1 id=\"聚集函数\"><a href=\"#聚集函数\" class=\"headerlink\" title=\"聚集函数\"></a>聚集函数</h1><p><strong>聚集函数</strong> 指运行在行组上，计算和返回单个值的函数。</p>\n<p>MySQL中常用的5个聚集函数有：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">函数</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">AVG()</td>\n<td style=\"text-align:left\">返回某列的平均值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">COUNT()</td>\n<td style=\"text-align:left\">返回某列的行数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">MAX()</td>\n<td style=\"text-align:left\">返回某列的最大值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">MIN()</td>\n<td style=\"text-align:left\">返回某列的最小值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SUM()</td>\n<td style=\"text-align:left\">返回某列值之和</td>\n</tr>\n</tbody>\n</table>\n<p>例子：</p>\n<p>使用AVG()返回products表中所有产品的平均价格：</p>\n<p>SELECT AVG(prod_price) AS avg_price FROM products;</p>\n<h1 id=\"GROUP-BY-amp-HAVING子句\"><a href=\"#GROUP-BY-amp-HAVING子句\" class=\"headerlink\" title=\"GROUP BY &amp; HAVING子句\"></a>GROUP BY &amp; HAVING子句</h1><h2 id=\"GROUP-BY的一些重要规定\"><a href=\"#GROUP-BY的一些重要规定\" class=\"headerlink\" title=\"GROUP BY的一些重要规定\"></a>GROUP BY的一些重要规定</h2><p>GROUP BY字句可以包含任意数目的列，使得能对分组进行嵌套，为数据分组提供更细致的控制。</p>\n<p>GROUP BY字句中列出的每一列都必须是检索列或有效的表达式（但不能是聚集函数）；如果SELECT中使用表达式，GROUP BY字句中也必须指定相同的表达式，不能使用别名。</p>\n<p>除聚集计算语句外，SELECT语句中的每一列都必须在GROUP BY字句中给出</p>\n<p>GROUP BY子句必须出现在WHERE子句之后，ORDER BY子句之前。</p>\n<h2 id=\"HAVING子句\"><a href=\"#HAVING子句\" class=\"headerlink\" title=\"HAVING子句\"></a>HAVING子句</h2><p>目前为止学过的所有类型的WHERE子句都可以用HAVING来替代。<strong>唯一不同的是：WHERE过滤行，HAVING过滤分组。</strong></p>\n<p>HAVING和WHERE的差别：<strong>WHERE在数据分组前进行过滤，HAVING在数据分组后进行过滤。</strong></p>\n<h2 id=\"GROUP-BY-amp-ORDER-BY\"><a href=\"#GROUP-BY-amp-ORDER-BY\" class=\"headerlink\" title=\"GROUP BY &amp; ORDER BY\"></a>GROUP BY &amp; ORDER BY</h2><p>GROUP BY（分组）和ORDER BY（排序）的差别：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"></th>\n<th style=\"text-align:left\">ORDER BY</th>\n<th style=\"text-align:left\">GROUP BY</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">输出</td>\n<td style=\"text-align:left\">排序产生的输出</td>\n<td style=\"text-align:left\">输出分组行（但可能不是分组的顺序）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">怎么使用</td>\n<td style=\"text-align:left\">任意列都可以使用（甚至非选择列也可以使用）</td>\n<td style=\"text-align:left\">只能使用选择列或表达式列，而且必须使用每个选择列的表达式</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">必须使用</td>\n<td style=\"text-align:left\">不一定需要</td>\n<td style=\"text-align:left\">如果与聚集函数一起使用列或表达式，则必须使用</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>注意：</p>\n<p>一般在使用GROUP BY子句时，应该给出ORDER BY子句；不能仅依赖GROUP BY排序数据，这是保证数据正确排序的唯一方法。</p>\n</blockquote>\n<p>例子：检索总计订单价格大于等于50的订单的订单号和总计订单价格，并按总计订单价格排序</p>\n<p>SELECT order_num, SUM(quantity*item_price) AS ordertotal</p>\n<p>FROM orderitems</p>\n<p>GROUP BY order_num</p>\n<p>HAVING SUM(quantity*item_price) &gt;= 50</p>\n<p>ORDER BY ordertotal</p>\n<h1 id=\"SELECT子句的顺序\"><a href=\"#SELECT子句的顺序\" class=\"headerlink\" title=\"SELECT子句的顺序\"></a>SELECT子句的顺序</h1><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">子句</th>\n<th style=\"text-align:left\">说明</th>\n<th style=\"text-align:left\">是否必须使用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">SELECT</td>\n<td style=\"text-align:left\">要返回的列或表达式</td>\n<td style=\"text-align:left\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">FROM</td>\n<td style=\"text-align:left\">从中检索数据的表</td>\n<td style=\"text-align:left\">仅在从表选择数据时使用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">WHERE</td>\n<td style=\"text-align:left\">行级过滤</td>\n<td style=\"text-align:left\">否</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">GROUP BY</td>\n<td style=\"text-align:left\">分组说明</td>\n<td style=\"text-align:left\">仅在按组计算聚集时使用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">HAVING</td>\n<td style=\"text-align:left\">组级过滤</td>\n<td style=\"text-align:left\">否</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ORDER BY</td>\n<td style=\"text-align:left\">输出排序顺序</td>\n<td style=\"text-align:left\">否</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">LIMIT</td>\n<td style=\"text-align:left\">要检索的行数</td>\n<td style=\"text-align:left\">否</td>\n</tr>\n</tbody>\n</table>"},{"title":"使用uWSGI和Nginx部署Flask","date":"2017-01-23T13:04:54.000Z","_content":"\n\n\n本项目分为以下三层架构，Web 框架为 Flask，WSGI 层选用 [uWSGI](http://uwsgi-docs-cn.readthedocs.io/zh_CN/latest/WSGIquickstart.html) ，Web 服务器采用 Nginx。\n\n{% asset_img web.png Web框架、WSGI与Web服务器的三层关系 %}\n\n\n\n## 项目地址\n\n[GitHub - wish007/shadowsocks-flask](https://github.com/wish007/shadowsocks-flask)\n\n\n\n<!--more-->\n\n\n## 创建虚拟环境\n\n### 安装虚拟环境库 virtualenv\n\n```bash\npip3 install virtualenv\n```\n\n\n\n### 创建名为 flask 的虚拟环境\n\n> 注意：\n>\n> 下面创建虚拟环境命令的命令可能会报错，因为命令执行文件可能不在当前目录\n\n```bash\nvirtualenv flask\n出现报错:\n-bash: virtualenv:command not found\n```\n正确的做法：\n\n1. 使用命令查找`virtualenv`安装目录\n\n```bash\nfind / -name virtualenv\n输出\n/usr/local/python3/bin/virtualenv\n```\n\n2. 创建名为`flask`的虚拟环境命令\n\n\n\n```bash\n/usr/local/python3/bin/virtualenv flask\n\n下列输出表示成功\nUsing base prefix'/usr/local/python3'\nNew python executablein /root/env/flask/bin/python3\nAlso creatingexecutable in /root/env/flask/bin/python\nInstalling setuptools,pip, wheel...done.\n```\n\n\n\n### 激活虚拟环境\n\n```bash\nsource env/flask/bin/activate\n即：\nsource 虚拟环境目录/bin/activate\n```\n\n退出虚拟环境（直接在虚拟环境状态）\n\n```bash\ndeactivate\n```\n\n\n\n### 安装Flask的Python库依赖\n\n在服务器创建`Flask`项目目录，将本地项目文件放在此目录下\n\n```bash\n[sun@SS ~]$ tree flask/\nflask/\n├── hello.py\n├── requirements.txt\n├── static\n│   └── favicon.ico\n└── templates\n    ├── base.html\n    └── index.html\n```\n\n在虚拟环境中安装所有依赖\n\n```bash\n(flask) [sun@SS env]$ pip install -r requirements.txt\n```\n\n如果没有`requirements.txt`文件，先在本地开发环境执行以下命令生成\n\n```bash\npip freeze >requirements.txt\n```\n\n\n\n### 测试虚拟环境\n\n```bash\n(flask) [sun@SS flask]$ python hello.py \n * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)\n```\n\n\n以下有正确返回说明`Flask`运行正常\n\n```bash\n(flask) [sun@SS flask]$ curl http://127.0.0.1:5000\n```\n\n\n\n##  安装uWSGI\n\n安装 uWSGI\n\n```bash\npip install uwsgi\n```\n\n配置 uWSGI\n\n> 在 Flask 项目目录下新建 uWSGI 配置文件 uwsgi_config.ini 并输入\n\n```bash\n[uwsgi]\nmaster = true\nwsgi-file = hello.py     #Flask启动程序\ncallable = app           #hello.py内的Flask类实例\nsocket = 127.0.0.1:5001  #启动端口\nprocesses = 4\nthreads = 2\nchdir = /home/sun/flask\n```\n\n启动 uWSGI\n\n```bash\n(flask) [sun@SS flask]$ uwsgi uwsgi_config.ini\n```\n\n出现下面输出说明配置正确\n\n{% asset_img uwsgi.png 运行 uWSGI %}\n\n关闭 uWSGI\n\n```bash\npkill -9 uwsgi\n```\n\n\n\n## 安装Nginx\n\n安装 Nginx\n\n```bash\nyum install nginx\n```\n\n配置 Nginx\n\n> 配置文件目录：/etc/nginx/conf.d 目录下的 default.conf\n\n```bash\nserver {\n  listen 80;\n  server_name x.x.x.x;                      #公网IP地址\n  location / {\n  include uwsgi_params;\n  uwsgi_pass 127.0.0.1:5001;                # 将所有请求将转发给uwsgi所监听的端口\n  uwsgi_param UWSGI_PYHOME /root/env/flask; # 指向虚拟环境目录\n  uwsgi_param UWSGI_CHDIR /root/flask;      # 指向网站根目录\n  uwsgi_param UWSGI_SCRIPT hello:app;       # 指定启动程序\n  uwsgi_read_timeout 10; \n }\n}\n```\n\n开启 Nginx\n\n```bash\nservice nginx start\n```\n\n关闭 Nginx\n\n```bash\nservice nginx stop\n```\n\n\n\n## 安装supervisor\n\n安装完 uWSGI、Nginx 后，Nginx可以直接设置开机启动，但 uWSGI 还不能直接开机启动，这里我用 Supervisor 来启动并守护  uWSGI 运行，在全局 Python 环境安装 Supervisor：\n\n```bash\npip install supervisor\n```\n\n配置 supervisor\n\n> 配置文件目录：/etc/supervisord.conf\n\n```bash\n[program:flask]\n# 启动命令入口\ncommand=/home/sun/env/flask/bin/uwsgi /home/sun/flask/uwsgi_config.ini\n# 命令程序所在目录\ndirectory=/home/sun/flask\n# 启动所使用的用户\nuser=sun\nautostart=true\nautorestart=true\nstartsecs=10\nstartretries=10\n#日志地址\nstdout_logfile=/home/sun/flask/uwsgi_supervisor.log\nstdout_logfile_maxbytes = 50MB\nstderr_logfile=/home/sun/flask/uwsgi_err.log\nstderr_logfile_maxbytes = 50MB\n```\n\n启动 supervisor\n\n```bash\nservice supervisord start\n```\n\n> 启动 supervisor 后，可以手动关闭`uwsgi`进程，`pstree`后发现`uwsgi`进程的确被关闭，稍等片刻再查看进程发现`uwsgi`进程会再次出现，说明守护进程功能正常。\n\n关闭 supervisor\n\n```bash\nservice supervisord stop\n```\n\n设置 supervisor 开机启动\n\n```bash\nchkconfig --add supervisord\nchkconfig supervisord on\n```\n\n> 查看开机启动项\n>\n> ```bash\n> chkconfig\n> ```\n\n\n","source":"_posts/使用uWSGI和Nginx部署Flask.md","raw":"---\ntitle: 使用uWSGI和Nginx部署Flask\ndate: 2017-01-23 21:04:54\ncategories: \n- Flask\ntags:\n- Python\n- Flask\n- Nginx\n- uWSGI\n- supervisor\n---\n\n\n\n本项目分为以下三层架构，Web 框架为 Flask，WSGI 层选用 [uWSGI](http://uwsgi-docs-cn.readthedocs.io/zh_CN/latest/WSGIquickstart.html) ，Web 服务器采用 Nginx。\n\n{% asset_img web.png Web框架、WSGI与Web服务器的三层关系 %}\n\n\n\n## 项目地址\n\n[GitHub - wish007/shadowsocks-flask](https://github.com/wish007/shadowsocks-flask)\n\n\n\n<!--more-->\n\n\n## 创建虚拟环境\n\n### 安装虚拟环境库 virtualenv\n\n```bash\npip3 install virtualenv\n```\n\n\n\n### 创建名为 flask 的虚拟环境\n\n> 注意：\n>\n> 下面创建虚拟环境命令的命令可能会报错，因为命令执行文件可能不在当前目录\n\n```bash\nvirtualenv flask\n出现报错:\n-bash: virtualenv:command not found\n```\n正确的做法：\n\n1. 使用命令查找`virtualenv`安装目录\n\n```bash\nfind / -name virtualenv\n输出\n/usr/local/python3/bin/virtualenv\n```\n\n2. 创建名为`flask`的虚拟环境命令\n\n\n\n```bash\n/usr/local/python3/bin/virtualenv flask\n\n下列输出表示成功\nUsing base prefix'/usr/local/python3'\nNew python executablein /root/env/flask/bin/python3\nAlso creatingexecutable in /root/env/flask/bin/python\nInstalling setuptools,pip, wheel...done.\n```\n\n\n\n### 激活虚拟环境\n\n```bash\nsource env/flask/bin/activate\n即：\nsource 虚拟环境目录/bin/activate\n```\n\n退出虚拟环境（直接在虚拟环境状态）\n\n```bash\ndeactivate\n```\n\n\n\n### 安装Flask的Python库依赖\n\n在服务器创建`Flask`项目目录，将本地项目文件放在此目录下\n\n```bash\n[sun@SS ~]$ tree flask/\nflask/\n├── hello.py\n├── requirements.txt\n├── static\n│   └── favicon.ico\n└── templates\n    ├── base.html\n    └── index.html\n```\n\n在虚拟环境中安装所有依赖\n\n```bash\n(flask) [sun@SS env]$ pip install -r requirements.txt\n```\n\n如果没有`requirements.txt`文件，先在本地开发环境执行以下命令生成\n\n```bash\npip freeze >requirements.txt\n```\n\n\n\n### 测试虚拟环境\n\n```bash\n(flask) [sun@SS flask]$ python hello.py \n * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)\n```\n\n\n以下有正确返回说明`Flask`运行正常\n\n```bash\n(flask) [sun@SS flask]$ curl http://127.0.0.1:5000\n```\n\n\n\n##  安装uWSGI\n\n安装 uWSGI\n\n```bash\npip install uwsgi\n```\n\n配置 uWSGI\n\n> 在 Flask 项目目录下新建 uWSGI 配置文件 uwsgi_config.ini 并输入\n\n```bash\n[uwsgi]\nmaster = true\nwsgi-file = hello.py     #Flask启动程序\ncallable = app           #hello.py内的Flask类实例\nsocket = 127.0.0.1:5001  #启动端口\nprocesses = 4\nthreads = 2\nchdir = /home/sun/flask\n```\n\n启动 uWSGI\n\n```bash\n(flask) [sun@SS flask]$ uwsgi uwsgi_config.ini\n```\n\n出现下面输出说明配置正确\n\n{% asset_img uwsgi.png 运行 uWSGI %}\n\n关闭 uWSGI\n\n```bash\npkill -9 uwsgi\n```\n\n\n\n## 安装Nginx\n\n安装 Nginx\n\n```bash\nyum install nginx\n```\n\n配置 Nginx\n\n> 配置文件目录：/etc/nginx/conf.d 目录下的 default.conf\n\n```bash\nserver {\n  listen 80;\n  server_name x.x.x.x;                      #公网IP地址\n  location / {\n  include uwsgi_params;\n  uwsgi_pass 127.0.0.1:5001;                # 将所有请求将转发给uwsgi所监听的端口\n  uwsgi_param UWSGI_PYHOME /root/env/flask; # 指向虚拟环境目录\n  uwsgi_param UWSGI_CHDIR /root/flask;      # 指向网站根目录\n  uwsgi_param UWSGI_SCRIPT hello:app;       # 指定启动程序\n  uwsgi_read_timeout 10; \n }\n}\n```\n\n开启 Nginx\n\n```bash\nservice nginx start\n```\n\n关闭 Nginx\n\n```bash\nservice nginx stop\n```\n\n\n\n## 安装supervisor\n\n安装完 uWSGI、Nginx 后，Nginx可以直接设置开机启动，但 uWSGI 还不能直接开机启动，这里我用 Supervisor 来启动并守护  uWSGI 运行，在全局 Python 环境安装 Supervisor：\n\n```bash\npip install supervisor\n```\n\n配置 supervisor\n\n> 配置文件目录：/etc/supervisord.conf\n\n```bash\n[program:flask]\n# 启动命令入口\ncommand=/home/sun/env/flask/bin/uwsgi /home/sun/flask/uwsgi_config.ini\n# 命令程序所在目录\ndirectory=/home/sun/flask\n# 启动所使用的用户\nuser=sun\nautostart=true\nautorestart=true\nstartsecs=10\nstartretries=10\n#日志地址\nstdout_logfile=/home/sun/flask/uwsgi_supervisor.log\nstdout_logfile_maxbytes = 50MB\nstderr_logfile=/home/sun/flask/uwsgi_err.log\nstderr_logfile_maxbytes = 50MB\n```\n\n启动 supervisor\n\n```bash\nservice supervisord start\n```\n\n> 启动 supervisor 后，可以手动关闭`uwsgi`进程，`pstree`后发现`uwsgi`进程的确被关闭，稍等片刻再查看进程发现`uwsgi`进程会再次出现，说明守护进程功能正常。\n\n关闭 supervisor\n\n```bash\nservice supervisord stop\n```\n\n设置 supervisor 开机启动\n\n```bash\nchkconfig --add supervisord\nchkconfig supervisord on\n```\n\n> 查看开机启动项\n>\n> ```bash\n> chkconfig\n> ```\n\n\n","slug":"使用uWSGI和Nginx部署Flask","published":1,"updated":"2017-02-13T15:06:14.110Z","_id":"ciz485cmj0008kocej2j2yp2n","comments":1,"layout":"post","photos":[],"link":"","content":"<p>本项目分为以下三层架构，Web 框架为 Flask，WSGI 层选用 <a href=\"http://uwsgi-docs-cn.readthedocs.io/zh_CN/latest/WSGIquickstart.html\" target=\"_blank\" rel=\"external\">uWSGI</a> ，Web 服务器采用 Nginx。</p>\n<img src=\"/2017/01/23/使用uWSGI和Nginx部署Flask/web.png\" alt=\"Web框架、WSGI与Web服务器的三层关系\" title=\"Web框架、WSGI与Web服务器的三层关系\">\n<h2 id=\"项目地址\"><a href=\"#项目地址\" class=\"headerlink\" title=\"项目地址\"></a>项目地址</h2><p><a href=\"https://github.com/wish007/shadowsocks-flask\" target=\"_blank\" rel=\"external\">GitHub - wish007/shadowsocks-flask</a></p>\n<a id=\"more\"></a>\n<h2 id=\"创建虚拟环境\"><a href=\"#创建虚拟环境\" class=\"headerlink\" title=\"创建虚拟环境\"></a>创建虚拟环境</h2><h3 id=\"安装虚拟环境库-virtualenv\"><a href=\"#安装虚拟环境库-virtualenv\" class=\"headerlink\" title=\"安装虚拟环境库 virtualenv\"></a>安装虚拟环境库 virtualenv</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip3 install virtualenv</div></pre></td></tr></table></figure>\n<h3 id=\"创建名为-flask-的虚拟环境\"><a href=\"#创建名为-flask-的虚拟环境\" class=\"headerlink\" title=\"创建名为 flask 的虚拟环境\"></a>创建名为 flask 的虚拟环境</h3><blockquote>\n<p>注意：</p>\n<p>下面创建虚拟环境命令的命令可能会报错，因为命令执行文件可能不在当前目录</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">virtualenv flask</div><div class=\"line\">出现报错:</div><div class=\"line\">-bash: virtualenv:<span class=\"built_in\">command</span> not found</div></pre></td></tr></table></figure>\n<p>正确的做法：</p>\n<ol>\n<li>使用命令查找<code>virtualenv</code>安装目录</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">find / -name virtualenv</div><div class=\"line\">输出</div><div class=\"line\">/usr/<span class=\"built_in\">local</span>/python3/bin/virtualenv</div></pre></td></tr></table></figure>\n<ol>\n<li>创建名为<code>flask</code>的虚拟环境命令</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/<span class=\"built_in\">local</span>/python3/bin/virtualenv flask</div><div class=\"line\"></div><div class=\"line\">下列输出表示成功</div><div class=\"line\">Using base prefix<span class=\"string\">'/usr/local/python3'</span></div><div class=\"line\">New python executablein /root/env/flask/bin/python3</div><div class=\"line\">Also creatingexecutable <span class=\"keyword\">in</span> /root/env/flask/bin/python</div><div class=\"line\">Installing setuptools,pip, wheel...done.</div></pre></td></tr></table></figure>\n<h3 id=\"激活虚拟环境\"><a href=\"#激活虚拟环境\" class=\"headerlink\" title=\"激活虚拟环境\"></a>激活虚拟环境</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">source</span> env/flask/bin/activate</div><div class=\"line\">即：</div><div class=\"line\"><span class=\"built_in\">source</span> 虚拟环境目录/bin/activate</div></pre></td></tr></table></figure>\n<p>退出虚拟环境（直接在虚拟环境状态）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">deactivate</div></pre></td></tr></table></figure>\n<h3 id=\"安装Flask的Python库依赖\"><a href=\"#安装Flask的Python库依赖\" class=\"headerlink\" title=\"安装Flask的Python库依赖\"></a>安装Flask的Python库依赖</h3><p>在服务器创建<code>Flask</code>项目目录，将本地项目文件放在此目录下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">[sun@SS ~]$ tree flask/</div><div class=\"line\">flask/</div><div class=\"line\">├── hello.py</div><div class=\"line\">├── requirements.txt</div><div class=\"line\">├── static</div><div class=\"line\">│   └── favicon.ico</div><div class=\"line\">└── templates</div><div class=\"line\">    ├── base.html</div><div class=\"line\">    └── index.html</div></pre></td></tr></table></figure>\n<p>在虚拟环境中安装所有依赖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(flask) [sun@SS env]$ pip install -r requirements.txt</div></pre></td></tr></table></figure>\n<p>如果没有<code>requirements.txt</code>文件，先在本地开发环境执行以下命令生成</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip freeze &gt;requirements.txt</div></pre></td></tr></table></figure>\n<h3 id=\"测试虚拟环境\"><a href=\"#测试虚拟环境\" class=\"headerlink\" title=\"测试虚拟环境\"></a>测试虚拟环境</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(flask) [sun@SS flask]$ python hello.py </div><div class=\"line\"> * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)</div></pre></td></tr></table></figure>\n<p>以下有正确返回说明<code>Flask</code>运行正常</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(flask) [sun@SS flask]$ curl http://127.0.0.1:5000</div></pre></td></tr></table></figure>\n<h2 id=\"安装uWSGI\"><a href=\"#安装uWSGI\" class=\"headerlink\" title=\"安装uWSGI\"></a>安装uWSGI</h2><p>安装 uWSGI</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install uwsgi</div></pre></td></tr></table></figure>\n<p>配置 uWSGI</p>\n<blockquote>\n<p>在 Flask 项目目录下新建 uWSGI 配置文件 uwsgi_config.ini 并输入</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">[uwsgi]</div><div class=\"line\">master = <span class=\"literal\">true</span></div><div class=\"line\">wsgi-file = hello.py     <span class=\"comment\">#Flask启动程序</span></div><div class=\"line\">callable = app           <span class=\"comment\">#hello.py内的Flask类实例</span></div><div class=\"line\">socket = 127.0.0.1:5001  <span class=\"comment\">#启动端口</span></div><div class=\"line\">processes = 4</div><div class=\"line\">threads = 2</div><div class=\"line\"><span class=\"built_in\">chdir</span> = /home/sun/flask</div></pre></td></tr></table></figure>\n<p>启动 uWSGI</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(flask) [sun@SS flask]$ uwsgi uwsgi_config.ini</div></pre></td></tr></table></figure>\n<p>出现下面输出说明配置正确</p>\n<img src=\"/2017/01/23/使用uWSGI和Nginx部署Flask/uwsgi.png\" alt=\"运行 uWSGI\" title=\"运行 uWSGI\">\n<p>关闭 uWSGI</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pkill -9 uwsgi</div></pre></td></tr></table></figure>\n<h2 id=\"安装Nginx\"><a href=\"#安装Nginx\" class=\"headerlink\" title=\"安装Nginx\"></a>安装Nginx</h2><p>安装 Nginx</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install nginx</div></pre></td></tr></table></figure>\n<p>配置 Nginx</p>\n<blockquote>\n<p>配置文件目录：/etc/nginx/conf.d 目录下的 default.conf</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">  listen 80;</div><div class=\"line\">  server_name x.x.x.x;                      <span class=\"comment\">#公网IP地址</span></div><div class=\"line\">  location / &#123;</div><div class=\"line\">  include uwsgi_params;</div><div class=\"line\">  uwsgi_pass 127.0.0.1:5001;                <span class=\"comment\"># 将所有请求将转发给uwsgi所监听的端口</span></div><div class=\"line\">  uwsgi_param UWSGI_PYHOME /root/env/flask; <span class=\"comment\"># 指向虚拟环境目录</span></div><div class=\"line\">  uwsgi_param UWSGI_CHDIR /root/flask;      <span class=\"comment\"># 指向网站根目录</span></div><div class=\"line\">  uwsgi_param UWSGI_SCRIPT hello:app;       <span class=\"comment\"># 指定启动程序</span></div><div class=\"line\">  uwsgi_read_timeout 10; </div><div class=\"line\"> &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>开启 Nginx</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service nginx start</div></pre></td></tr></table></figure>\n<p>关闭 Nginx</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service nginx stop</div></pre></td></tr></table></figure>\n<h2 id=\"安装supervisor\"><a href=\"#安装supervisor\" class=\"headerlink\" title=\"安装supervisor\"></a>安装supervisor</h2><p>安装完 uWSGI、Nginx 后，Nginx可以直接设置开机启动，但 uWSGI 还不能直接开机启动，这里我用 Supervisor 来启动并守护  uWSGI 运行，在全局 Python 环境安装 Supervisor：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install supervisor</div></pre></td></tr></table></figure>\n<p>配置 supervisor</p>\n<blockquote>\n<p>配置文件目录：/etc/supervisord.conf</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">[program:flask]</div><div class=\"line\"><span class=\"comment\"># 启动命令入口</span></div><div class=\"line\"><span class=\"built_in\">command</span>=/home/sun/env/flask/bin/uwsgi /home/sun/flask/uwsgi_config.ini</div><div class=\"line\"><span class=\"comment\"># 命令程序所在目录</span></div><div class=\"line\">directory=/home/sun/flask</div><div class=\"line\"><span class=\"comment\"># 启动所使用的用户</span></div><div class=\"line\">user=sun</div><div class=\"line\">autostart=<span class=\"literal\">true</span></div><div class=\"line\">autorestart=<span class=\"literal\">true</span></div><div class=\"line\">startsecs=10</div><div class=\"line\">startretries=10</div><div class=\"line\"><span class=\"comment\">#日志地址</span></div><div class=\"line\">stdout_logfile=/home/sun/flask/uwsgi_supervisor.log</div><div class=\"line\">stdout_logfile_maxbytes = 50MB</div><div class=\"line\">stderr_logfile=/home/sun/flask/uwsgi_err.log</div><div class=\"line\">stderr_logfile_maxbytes = 50MB</div></pre></td></tr></table></figure>\n<p>启动 supervisor</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service supervisord start</div></pre></td></tr></table></figure>\n<blockquote>\n<p>启动 supervisor 后，可以手动关闭<code>uwsgi</code>进程，<code>pstree</code>后发现<code>uwsgi</code>进程的确被关闭，稍等片刻再查看进程发现<code>uwsgi</code>进程会再次出现，说明守护进程功能正常。</p>\n</blockquote>\n<p>关闭 supervisor</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service supervisord stop</div></pre></td></tr></table></figure>\n<p>设置 supervisor 开机启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">chkconfig --add supervisord</div><div class=\"line\">chkconfig supervisord on</div></pre></td></tr></table></figure>\n<blockquote>\n<p>查看开机启动项</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; chkconfig</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n","excerpt":"<p>本项目分为以下三层架构，Web 框架为 Flask，WSGI 层选用 <a href=\"http://uwsgi-docs-cn.readthedocs.io/zh_CN/latest/WSGIquickstart.html\">uWSGI</a> ，Web 服务器采用 Nginx。</p>\n<img src=\"/2017/01/23/使用uWSGI和Nginx部署Flask/web.png\" alt=\"Web框架、WSGI与Web服务器的三层关系\" title=\"Web框架、WSGI与Web服务器的三层关系\">\n<h2 id=\"项目地址\"><a href=\"#项目地址\" class=\"headerlink\" title=\"项目地址\"></a>项目地址</h2><p><a href=\"https://github.com/wish007/shadowsocks-flask\">GitHub - wish007/shadowsocks-flask</a></p>","more":"<h2 id=\"创建虚拟环境\"><a href=\"#创建虚拟环境\" class=\"headerlink\" title=\"创建虚拟环境\"></a>创建虚拟环境</h2><h3 id=\"安装虚拟环境库-virtualenv\"><a href=\"#安装虚拟环境库-virtualenv\" class=\"headerlink\" title=\"安装虚拟环境库 virtualenv\"></a>安装虚拟环境库 virtualenv</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip3 install virtualenv</div></pre></td></tr></table></figure>\n<h3 id=\"创建名为-flask-的虚拟环境\"><a href=\"#创建名为-flask-的虚拟环境\" class=\"headerlink\" title=\"创建名为 flask 的虚拟环境\"></a>创建名为 flask 的虚拟环境</h3><blockquote>\n<p>注意：</p>\n<p>下面创建虚拟环境命令的命令可能会报错，因为命令执行文件可能不在当前目录</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">virtualenv flask</div><div class=\"line\">出现报错:</div><div class=\"line\">-bash: virtualenv:<span class=\"built_in\">command</span> not found</div></pre></td></tr></table></figure>\n<p>正确的做法：</p>\n<ol>\n<li>使用命令查找<code>virtualenv</code>安装目录</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">find / -name virtualenv</div><div class=\"line\">输出</div><div class=\"line\">/usr/<span class=\"built_in\">local</span>/python3/bin/virtualenv</div></pre></td></tr></table></figure>\n<ol>\n<li>创建名为<code>flask</code>的虚拟环境命令</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/<span class=\"built_in\">local</span>/python3/bin/virtualenv flask</div><div class=\"line\"></div><div class=\"line\">下列输出表示成功</div><div class=\"line\">Using base prefix<span class=\"string\">'/usr/local/python3'</span></div><div class=\"line\">New python executablein /root/env/flask/bin/python3</div><div class=\"line\">Also creatingexecutable <span class=\"keyword\">in</span> /root/env/flask/bin/python</div><div class=\"line\">Installing setuptools,pip, wheel...done.</div></pre></td></tr></table></figure>\n<h3 id=\"激活虚拟环境\"><a href=\"#激活虚拟环境\" class=\"headerlink\" title=\"激活虚拟环境\"></a>激活虚拟环境</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">source</span> env/flask/bin/activate</div><div class=\"line\">即：</div><div class=\"line\"><span class=\"built_in\">source</span> 虚拟环境目录/bin/activate</div></pre></td></tr></table></figure>\n<p>退出虚拟环境（直接在虚拟环境状态）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">deactivate</div></pre></td></tr></table></figure>\n<h3 id=\"安装Flask的Python库依赖\"><a href=\"#安装Flask的Python库依赖\" class=\"headerlink\" title=\"安装Flask的Python库依赖\"></a>安装Flask的Python库依赖</h3><p>在服务器创建<code>Flask</code>项目目录，将本地项目文件放在此目录下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">[sun@SS ~]$ tree flask/</div><div class=\"line\">flask/</div><div class=\"line\">├── hello.py</div><div class=\"line\">├── requirements.txt</div><div class=\"line\">├── static</div><div class=\"line\">│   └── favicon.ico</div><div class=\"line\">└── templates</div><div class=\"line\">    ├── base.html</div><div class=\"line\">    └── index.html</div></pre></td></tr></table></figure>\n<p>在虚拟环境中安装所有依赖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(flask) [sun@SS env]$ pip install -r requirements.txt</div></pre></td></tr></table></figure>\n<p>如果没有<code>requirements.txt</code>文件，先在本地开发环境执行以下命令生成</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip freeze &gt;requirements.txt</div></pre></td></tr></table></figure>\n<h3 id=\"测试虚拟环境\"><a href=\"#测试虚拟环境\" class=\"headerlink\" title=\"测试虚拟环境\"></a>测试虚拟环境</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(flask) [sun@SS flask]$ python hello.py </div><div class=\"line\"> * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)</div></pre></td></tr></table></figure>\n<p>以下有正确返回说明<code>Flask</code>运行正常</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(flask) [sun@SS flask]$ curl http://127.0.0.1:5000</div></pre></td></tr></table></figure>\n<h2 id=\"安装uWSGI\"><a href=\"#安装uWSGI\" class=\"headerlink\" title=\"安装uWSGI\"></a>安装uWSGI</h2><p>安装 uWSGI</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install uwsgi</div></pre></td></tr></table></figure>\n<p>配置 uWSGI</p>\n<blockquote>\n<p>在 Flask 项目目录下新建 uWSGI 配置文件 uwsgi_config.ini 并输入</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">[uwsgi]</div><div class=\"line\">master = <span class=\"literal\">true</span></div><div class=\"line\">wsgi-file = hello.py     <span class=\"comment\">#Flask启动程序</span></div><div class=\"line\">callable = app           <span class=\"comment\">#hello.py内的Flask类实例</span></div><div class=\"line\">socket = 127.0.0.1:5001  <span class=\"comment\">#启动端口</span></div><div class=\"line\">processes = 4</div><div class=\"line\">threads = 2</div><div class=\"line\"><span class=\"built_in\">chdir</span> = /home/sun/flask</div></pre></td></tr></table></figure>\n<p>启动 uWSGI</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(flask) [sun@SS flask]$ uwsgi uwsgi_config.ini</div></pre></td></tr></table></figure>\n<p>出现下面输出说明配置正确</p>\n<img src=\"/2017/01/23/使用uWSGI和Nginx部署Flask/uwsgi.png\" alt=\"运行 uWSGI\" title=\"运行 uWSGI\">\n<p>关闭 uWSGI</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pkill -9 uwsgi</div></pre></td></tr></table></figure>\n<h2 id=\"安装Nginx\"><a href=\"#安装Nginx\" class=\"headerlink\" title=\"安装Nginx\"></a>安装Nginx</h2><p>安装 Nginx</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install nginx</div></pre></td></tr></table></figure>\n<p>配置 Nginx</p>\n<blockquote>\n<p>配置文件目录：/etc/nginx/conf.d 目录下的 default.conf</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">  listen 80;</div><div class=\"line\">  server_name x.x.x.x;                      <span class=\"comment\">#公网IP地址</span></div><div class=\"line\">  location / &#123;</div><div class=\"line\">  include uwsgi_params;</div><div class=\"line\">  uwsgi_pass 127.0.0.1:5001;                <span class=\"comment\"># 将所有请求将转发给uwsgi所监听的端口</span></div><div class=\"line\">  uwsgi_param UWSGI_PYHOME /root/env/flask; <span class=\"comment\"># 指向虚拟环境目录</span></div><div class=\"line\">  uwsgi_param UWSGI_CHDIR /root/flask;      <span class=\"comment\"># 指向网站根目录</span></div><div class=\"line\">  uwsgi_param UWSGI_SCRIPT hello:app;       <span class=\"comment\"># 指定启动程序</span></div><div class=\"line\">  uwsgi_read_timeout 10; </div><div class=\"line\"> &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>开启 Nginx</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service nginx start</div></pre></td></tr></table></figure>\n<p>关闭 Nginx</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service nginx stop</div></pre></td></tr></table></figure>\n<h2 id=\"安装supervisor\"><a href=\"#安装supervisor\" class=\"headerlink\" title=\"安装supervisor\"></a>安装supervisor</h2><p>安装完 uWSGI、Nginx 后，Nginx可以直接设置开机启动，但 uWSGI 还不能直接开机启动，这里我用 Supervisor 来启动并守护  uWSGI 运行，在全局 Python 环境安装 Supervisor：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install supervisor</div></pre></td></tr></table></figure>\n<p>配置 supervisor</p>\n<blockquote>\n<p>配置文件目录：/etc/supervisord.conf</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">[program:flask]</div><div class=\"line\"><span class=\"comment\"># 启动命令入口</span></div><div class=\"line\"><span class=\"built_in\">command</span>=/home/sun/env/flask/bin/uwsgi /home/sun/flask/uwsgi_config.ini</div><div class=\"line\"><span class=\"comment\"># 命令程序所在目录</span></div><div class=\"line\">directory=/home/sun/flask</div><div class=\"line\"><span class=\"comment\"># 启动所使用的用户</span></div><div class=\"line\">user=sun</div><div class=\"line\">autostart=<span class=\"literal\">true</span></div><div class=\"line\">autorestart=<span class=\"literal\">true</span></div><div class=\"line\">startsecs=10</div><div class=\"line\">startretries=10</div><div class=\"line\"><span class=\"comment\">#日志地址</span></div><div class=\"line\">stdout_logfile=/home/sun/flask/uwsgi_supervisor.log</div><div class=\"line\">stdout_logfile_maxbytes = 50MB</div><div class=\"line\">stderr_logfile=/home/sun/flask/uwsgi_err.log</div><div class=\"line\">stderr_logfile_maxbytes = 50MB</div></pre></td></tr></table></figure>\n<p>启动 supervisor</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service supervisord start</div></pre></td></tr></table></figure>\n<blockquote>\n<p>启动 supervisor 后，可以手动关闭<code>uwsgi</code>进程，<code>pstree</code>后发现<code>uwsgi</code>进程的确被关闭，稍等片刻再查看进程发现<code>uwsgi</code>进程会再次出现，说明守护进程功能正常。</p>\n</blockquote>\n<p>关闭 supervisor</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service supervisord stop</div></pre></td></tr></table></figure>\n<p>设置 supervisor 开机启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">chkconfig --add supervisord</div><div class=\"line\">chkconfig supervisord on</div></pre></td></tr></table></figure>\n<blockquote>\n<p>查看开机启动项</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; chkconfig</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>"},{"title":"在Hexo中插入图片","date":"2016-09-04T16:55:19.000Z","_content":"\n# 最简便的方法\n\n如果你的Hexo项目中只有少量图片，那最简单的方法就是将图片放在`source/images` 文件夹中；然后在文章中通过类似于 `![](/images/image.jpg)` 的方法访问它们；但是当文章多了以后，这种方式显然不便于管理文章中图片。\n\n\n\n# 更好的方法\n\nHexo 提供了更组织化的方式来管理资源，可以通过修改`_config.yml`配置文件中的`post_asset_folder`选项为`ture`来打开\n\n```bash\npost_asset_folder: true\n```\n\n<!--more-->\n\n\n当资源文件管理功能打开后，Hexo将会在你每一次通过 `hexo new <title> `命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个 Markdown 文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的管理方式。\n\n虽然你仍然可以使用常规的 Markdown 语法访问资源，但在 Hexo 中更推荐以下方式引用（图片将会同时出现在文章、主页以及归档页中）\n\n```bash\n{% asset_img example.jpg This is an example image %}\n```\n\n例如：\n\n{% asset_img mountain.jpg This is an example image %}","source":"_posts/在Hexo中插入图片.md","raw":"---\ntitle: 在Hexo中插入图片\ndate: 2016-09-05 00:55:19\ncategories: Hexo\ntags:\n- Hexo\n---\n\n# 最简便的方法\n\n如果你的Hexo项目中只有少量图片，那最简单的方法就是将图片放在`source/images` 文件夹中；然后在文章中通过类似于 `![](/images/image.jpg)` 的方法访问它们；但是当文章多了以后，这种方式显然不便于管理文章中图片。\n\n\n\n# 更好的方法\n\nHexo 提供了更组织化的方式来管理资源，可以通过修改`_config.yml`配置文件中的`post_asset_folder`选项为`ture`来打开\n\n```bash\npost_asset_folder: true\n```\n\n<!--more-->\n\n\n当资源文件管理功能打开后，Hexo将会在你每一次通过 `hexo new <title> `命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个 Markdown 文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的管理方式。\n\n虽然你仍然可以使用常规的 Markdown 语法访问资源，但在 Hexo 中更推荐以下方式引用（图片将会同时出现在文章、主页以及归档页中）\n\n```bash\n{% asset_img example.jpg This is an example image %}\n```\n\n例如：\n\n{% asset_img mountain.jpg This is an example image %}","slug":"在Hexo中插入图片","published":1,"updated":"2017-02-13T14:57:43.076Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz485cmr000bkoceddmb7s4e","content":"<h1 id=\"最简便的方法\"><a href=\"#最简便的方法\" class=\"headerlink\" title=\"最简便的方法\"></a>最简便的方法</h1><p>如果你的Hexo项目中只有少量图片，那最简单的方法就是将图片放在<code>source/images</code> 文件夹中；然后在文章中通过类似于 <code>![](/images/image.jpg)</code> 的方法访问它们；但是当文章多了以后，这种方式显然不便于管理文章中图片。</p>\n<h1 id=\"更好的方法\"><a href=\"#更好的方法\" class=\"headerlink\" title=\"更好的方法\"></a>更好的方法</h1><p>Hexo 提供了更组织化的方式来管理资源，可以通过修改<code>_config.yml</code>配置文件中的<code>post_asset_folder</code>选项为<code>ture</code>来打开</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">post_asset_folder: <span class=\"literal\">true</span></div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>当资源文件管理功能打开后，Hexo将会在你每一次通过 <code>hexo new &lt;title&gt;</code>命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个 Markdown 文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的管理方式。</p>\n<p>虽然你仍然可以使用常规的 Markdown 语法访问资源，但在 Hexo 中更推荐以下方式引用（图片将会同时出现在文章、主页以及归档页中）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% asset_img example.jpg This is an example image %&#125;</div></pre></td></tr></table></figure>\n<p>例如：</p>\n<img src=\"/2016/09/05/在Hexo中插入图片/mountain.jpg\" alt=\"This is an example image\" title=\"This is an example image\">","excerpt":"<h1 id=\"最简便的方法\"><a href=\"#最简便的方法\" class=\"headerlink\" title=\"最简便的方法\"></a>最简便的方法</h1><p>如果你的Hexo项目中只有少量图片，那最简单的方法就是将图片放在<code>source/images</code> 文件夹中；然后在文章中通过类似于 <code>![](/images/image.jpg)</code> 的方法访问它们；但是当文章多了以后，这种方式显然不便于管理文章中图片。</p>\n<h1 id=\"更好的方法\"><a href=\"#更好的方法\" class=\"headerlink\" title=\"更好的方法\"></a>更好的方法</h1><p>Hexo 提供了更组织化的方式来管理资源，可以通过修改<code>_config.yml</code>配置文件中的<code>post_asset_folder</code>选项为<code>ture</code>来打开</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">post_asset_folder: <span class=\"literal\">true</span></div></pre></td></tr></table></figure>","more":"<p>当资源文件管理功能打开后，Hexo将会在你每一次通过 <code>hexo new &lt;title&gt;</code>命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个 Markdown 文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的管理方式。</p>\n<p>虽然你仍然可以使用常规的 Markdown 语法访问资源，但在 Hexo 中更推荐以下方式引用（图片将会同时出现在文章、主页以及归档页中）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% asset_img example.jpg This is an example image %&#125;</div></pre></td></tr></table></figure>\n<p>例如：</p>\n<img src=\"/2016/09/05/在Hexo中插入图片/mountain.jpg\" alt=\"This is an example image\" title=\"This is an example image\">"},{"title":"搭建Django博客（1）环境准备与连接数据库","date":"2016-09-05T10:46:00.000Z","_content":"\n# 环境准备\n\n> 因为我使用的是 Windows 系统，下面所有的操作都是在 Windows 系统下进行的，大部分操作和 Linux、macOS 相似，但有些地方要注意区分。\n\n使用 CMD 命令行创建 Python 虚拟环境，并在虚拟环境中安装 Django\n\n```powershell\n$ virtualenv [虚拟环境名]\n$ pip install django\n```\n\n\n<!--more-->\n\n\n- 在 PyCharm 中创建 Django 项目，并选择刚刚创建的虚拟环境为其解释器，完成后将在指定目录生成 Django 基本目录及文件。\n- 当然，也可以使用 CMD 命令行创建 Django 项目（我创建的项目名是：myblog）：\n\n```powershell\n$ 虚拟环境目录\\Scripts\\django-admin startproject [项目名]\n$ 虚拟环境目录\\Scripts\\django-admin startproject myblog\n```\n\n运行 Django 项目：\n\n```powershell\n$ python manage.py runserver\n```\n\n打开 http://127.0.0.1:8000/ 页面出现如下页面表示 Django 安装成功\n\n{% asset_img WelcomeToDjango.png Welcome to Django %}\n\n创建 Django 项目内的应用（我创建的应用名：blogapp）：\n\n```powershell\n$ python manage.py startapp [应用名]\n$ python manage.py startapp blogapp\n```\n\n# 安装数据库\n\nDjango 官方支持 PostgreSQL、MySQL、SQLite和Oracle 数据库，还有许多第三方提供的数据库也支持在 Django 中使用：SAP SQL Anywhere、IBM DB2、Microsoft SQL Server、Firebird、ODBC\n\n为了方便和在网上能够找到更多资源，我直接选择了官方支持的 PostgreSQL 数据库，下面开始安装：\n\n1. 登陆 PostgreSQL 官网下载数据库直接安装\n\n   https://www.postgresql.org/\n\n2. 安装 psycopg2 扩展让 Django 连接 PostgreSQL 数据库：\n\n   http://initd.org/psycopg/\n\n   CMD 安装 psycopg2 命令：\n\n```powershell\n$ easy_install [安装包名]\n例如：\n$ easy_install psycopg2-2.6.2.win32-py3.4-pg9.5.3-release.exe\n```\n\n*注意：Python 32/64位要对应下载 psycopg2 32/64位程序，否则 Django 连接数据库时会报错；但 PostgreSQL 安装32/64位都没问题*\n\n# **连接数据库**\n\n要连接数据库，当然要先新建一个数据库，直接在 PostgreSQL 管理工具里新建即可，这里数据库取名 `blog`，所有者为 `postgres`\n\n编辑 Django 项目的 `setting.py` 文件中的 `DATABASES`字段，填入数据库信息：\n\n```powershell\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql', #PostgreSQL数据库规定写法\n        'NAME': 'blog', #数据库名称\n        'USER': 'postgres', #数据库用户\n        'PASSWORD': '123', #数据库密码\n        'HOST': '127.0.0.1', #数据库所在的IP地址\n        'PORT': '5432', #连接数据库的端口号\n    }\n}\n```\n\n到这里就成功连接数据库了！","source":"_posts/搭建Django博客（1）环境准备与连接数据库.md","raw":"---\ntitle: 搭建Django博客（1）环境准备与连接数据库\ndate: 2016-09-05 18:46:00\ncategories: \n- Django\ntags:\n- Django\n---\n\n# 环境准备\n\n> 因为我使用的是 Windows 系统，下面所有的操作都是在 Windows 系统下进行的，大部分操作和 Linux、macOS 相似，但有些地方要注意区分。\n\n使用 CMD 命令行创建 Python 虚拟环境，并在虚拟环境中安装 Django\n\n```powershell\n$ virtualenv [虚拟环境名]\n$ pip install django\n```\n\n\n<!--more-->\n\n\n- 在 PyCharm 中创建 Django 项目，并选择刚刚创建的虚拟环境为其解释器，完成后将在指定目录生成 Django 基本目录及文件。\n- 当然，也可以使用 CMD 命令行创建 Django 项目（我创建的项目名是：myblog）：\n\n```powershell\n$ 虚拟环境目录\\Scripts\\django-admin startproject [项目名]\n$ 虚拟环境目录\\Scripts\\django-admin startproject myblog\n```\n\n运行 Django 项目：\n\n```powershell\n$ python manage.py runserver\n```\n\n打开 http://127.0.0.1:8000/ 页面出现如下页面表示 Django 安装成功\n\n{% asset_img WelcomeToDjango.png Welcome to Django %}\n\n创建 Django 项目内的应用（我创建的应用名：blogapp）：\n\n```powershell\n$ python manage.py startapp [应用名]\n$ python manage.py startapp blogapp\n```\n\n# 安装数据库\n\nDjango 官方支持 PostgreSQL、MySQL、SQLite和Oracle 数据库，还有许多第三方提供的数据库也支持在 Django 中使用：SAP SQL Anywhere、IBM DB2、Microsoft SQL Server、Firebird、ODBC\n\n为了方便和在网上能够找到更多资源，我直接选择了官方支持的 PostgreSQL 数据库，下面开始安装：\n\n1. 登陆 PostgreSQL 官网下载数据库直接安装\n\n   https://www.postgresql.org/\n\n2. 安装 psycopg2 扩展让 Django 连接 PostgreSQL 数据库：\n\n   http://initd.org/psycopg/\n\n   CMD 安装 psycopg2 命令：\n\n```powershell\n$ easy_install [安装包名]\n例如：\n$ easy_install psycopg2-2.6.2.win32-py3.4-pg9.5.3-release.exe\n```\n\n*注意：Python 32/64位要对应下载 psycopg2 32/64位程序，否则 Django 连接数据库时会报错；但 PostgreSQL 安装32/64位都没问题*\n\n# **连接数据库**\n\n要连接数据库，当然要先新建一个数据库，直接在 PostgreSQL 管理工具里新建即可，这里数据库取名 `blog`，所有者为 `postgres`\n\n编辑 Django 项目的 `setting.py` 文件中的 `DATABASES`字段，填入数据库信息：\n\n```powershell\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql', #PostgreSQL数据库规定写法\n        'NAME': 'blog', #数据库名称\n        'USER': 'postgres', #数据库用户\n        'PASSWORD': '123', #数据库密码\n        'HOST': '127.0.0.1', #数据库所在的IP地址\n        'PORT': '5432', #连接数据库的端口号\n    }\n}\n```\n\n到这里就成功连接数据库了！","slug":"搭建Django博客（1）环境准备与连接数据库","published":1,"updated":"2017-02-04T12:17:33.008Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz485cmt000dkoceszz0wesi","content":"<h1 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h1><blockquote>\n<p>因为我使用的是 Windows 系统，下面所有的操作都是在 Windows 系统下进行的，大部分操作和 Linux、macOS 相似，但有些地方要注意区分。</p>\n</blockquote>\n<p>使用 CMD 命令行创建 Python 虚拟环境，并在虚拟环境中安装 Django</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ virtualenv [虚拟环境名]</div><div class=\"line\">$ pip install django</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<ul>\n<li>在 PyCharm 中创建 Django 项目，并选择刚刚创建的虚拟环境为其解释器，完成后将在指定目录生成 Django 基本目录及文件。</li>\n<li>当然，也可以使用 CMD 命令行创建 Django 项目（我创建的项目名是：myblog）：</li>\n</ul>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ 虚拟环境目录\\Scripts\\django-admin startproject [项目名]</div><div class=\"line\">$ 虚拟环境目录\\Scripts\\django-admin startproject myblog</div></pre></td></tr></table></figure>\n<p>运行 Django 项目：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ python manage.py runserver</div></pre></td></tr></table></figure>\n<p>打开 <a href=\"http://127.0.0.1:8000/\" target=\"_blank\" rel=\"external\">http://127.0.0.1:8000/</a> 页面出现如下页面表示 Django 安装成功</p>\n<img src=\"/2016/09/05/搭建Django博客（1）环境准备与连接数据库/WelcomeToDjango.png\" alt=\"Welcome to Django\" title=\"Welcome to Django\">\n<p>创建 Django 项目内的应用（我创建的应用名：blogapp）：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ python manage.py startapp [应用名]</div><div class=\"line\">$ python manage.py startapp blogapp</div></pre></td></tr></table></figure>\n<h1 id=\"安装数据库\"><a href=\"#安装数据库\" class=\"headerlink\" title=\"安装数据库\"></a>安装数据库</h1><p>Django 官方支持 PostgreSQL、MySQL、SQLite和Oracle 数据库，还有许多第三方提供的数据库也支持在 Django 中使用：SAP SQL Anywhere、IBM DB2、Microsoft SQL Server、Firebird、ODBC</p>\n<p>为了方便和在网上能够找到更多资源，我直接选择了官方支持的 PostgreSQL 数据库，下面开始安装：</p>\n<ol>\n<li><p>登陆 PostgreSQL 官网下载数据库直接安装</p>\n<p><a href=\"https://www.postgresql.org/\" target=\"_blank\" rel=\"external\">https://www.postgresql.org/</a></p>\n</li>\n<li><p>安装 psycopg2 扩展让 Django 连接 PostgreSQL 数据库：</p>\n<p><a href=\"http://initd.org/psycopg/\" target=\"_blank\" rel=\"external\">http://initd.org/psycopg/</a></p>\n<p>CMD 安装 psycopg2 命令：</p>\n</li>\n</ol>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ easy_install [安装包名]</div><div class=\"line\">例如：</div><div class=\"line\">$ easy_install psycopg2-<span class=\"number\">2.6</span>.<span class=\"number\">2</span>.win32-py3.<span class=\"number\">4</span>-pg9.<span class=\"number\">5.3</span>-release.exe</div></pre></td></tr></table></figure>\n<p><em>注意：Python 32/64位要对应下载 psycopg2 32/64位程序，否则 Django 连接数据库时会报错；但 PostgreSQL 安装32/64位都没问题</em></p>\n<h1 id=\"连接数据库\"><a href=\"#连接数据库\" class=\"headerlink\" title=\"连接数据库\"></a><strong>连接数据库</strong></h1><p>要连接数据库，当然要先新建一个数据库，直接在 PostgreSQL 管理工具里新建即可，这里数据库取名 <code>blog</code>，所有者为 <code>postgres</code></p>\n<p>编辑 Django 项目的 <code>setting.py</code> 文件中的 <code>DATABASES</code>字段，填入数据库信息：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">DATABASES = &#123;</div><div class=\"line\">    <span class=\"string\">'default'</span>: &#123;</div><div class=\"line\">        <span class=\"string\">'ENGINE'</span>: <span class=\"string\">'django.db.backends.postgresql'</span>, <span class=\"comment\">#PostgreSQL数据库规定写法</span></div><div class=\"line\">        <span class=\"string\">'NAME'</span>: <span class=\"string\">'blog'</span>, <span class=\"comment\">#数据库名称</span></div><div class=\"line\">        <span class=\"string\">'USER'</span>: <span class=\"string\">'postgres'</span>, <span class=\"comment\">#数据库用户</span></div><div class=\"line\">        <span class=\"string\">'PASSWORD'</span>: <span class=\"string\">'123'</span>, <span class=\"comment\">#数据库密码</span></div><div class=\"line\">        <span class=\"string\">'HOST'</span>: <span class=\"string\">'127.0.0.1'</span>, <span class=\"comment\">#数据库所在的IP地址</span></div><div class=\"line\">        <span class=\"string\">'PORT'</span>: <span class=\"string\">'5432'</span>, <span class=\"comment\">#连接数据库的端口号</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>到这里就成功连接数据库了！</p>\n","excerpt":"<h1 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h1><blockquote>\n<p>因为我使用的是 Windows 系统，下面所有的操作都是在 Windows 系统下进行的，大部分操作和 Linux、macOS 相似，但有些地方要注意区分。</p>\n</blockquote>\n<p>使用 CMD 命令行创建 Python 虚拟环境，并在虚拟环境中安装 Django</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ virtualenv [虚拟环境名]</div><div class=\"line\">$ pip install django</div></pre></td></tr></table></figure>","more":"<ul>\n<li>在 PyCharm 中创建 Django 项目，并选择刚刚创建的虚拟环境为其解释器，完成后将在指定目录生成 Django 基本目录及文件。</li>\n<li>当然，也可以使用 CMD 命令行创建 Django 项目（我创建的项目名是：myblog）：</li>\n</ul>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ 虚拟环境目录\\Scripts\\django-admin startproject [项目名]</div><div class=\"line\">$ 虚拟环境目录\\Scripts\\django-admin startproject myblog</div></pre></td></tr></table></figure>\n<p>运行 Django 项目：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ python manage.py runserver</div></pre></td></tr></table></figure>\n<p>打开 <a href=\"http://127.0.0.1:8000/\">http://127.0.0.1:8000/</a> 页面出现如下页面表示 Django 安装成功</p>\n<img src=\"/2016/09/05/搭建Django博客（1）环境准备与连接数据库/WelcomeToDjango.png\" alt=\"Welcome to Django\" title=\"Welcome to Django\">\n<p>创建 Django 项目内的应用（我创建的应用名：blogapp）：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ python manage.py startapp [应用名]</div><div class=\"line\">$ python manage.py startapp blogapp</div></pre></td></tr></table></figure>\n<h1 id=\"安装数据库\"><a href=\"#安装数据库\" class=\"headerlink\" title=\"安装数据库\"></a>安装数据库</h1><p>Django 官方支持 PostgreSQL、MySQL、SQLite和Oracle 数据库，还有许多第三方提供的数据库也支持在 Django 中使用：SAP SQL Anywhere、IBM DB2、Microsoft SQL Server、Firebird、ODBC</p>\n<p>为了方便和在网上能够找到更多资源，我直接选择了官方支持的 PostgreSQL 数据库，下面开始安装：</p>\n<ol>\n<li><p>登陆 PostgreSQL 官网下载数据库直接安装</p>\n<p><a href=\"https://www.postgresql.org/\">https://www.postgresql.org/</a></p>\n</li>\n<li><p>安装 psycopg2 扩展让 Django 连接 PostgreSQL 数据库：</p>\n<p><a href=\"http://initd.org/psycopg/\">http://initd.org/psycopg/</a></p>\n<p>CMD 安装 psycopg2 命令：</p>\n</li>\n</ol>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ easy_install [安装包名]</div><div class=\"line\">例如：</div><div class=\"line\">$ easy_install psycopg2-<span class=\"number\">2.6</span>.<span class=\"number\">2</span>.win32-py3.<span class=\"number\">4</span>-pg9.<span class=\"number\">5.3</span>-release.exe</div></pre></td></tr></table></figure>\n<p><em>注意：Python 32/64位要对应下载 psycopg2 32/64位程序，否则 Django 连接数据库时会报错；但 PostgreSQL 安装32/64位都没问题</em></p>\n<h1 id=\"连接数据库\"><a href=\"#连接数据库\" class=\"headerlink\" title=\"连接数据库\"></a><strong>连接数据库</strong></h1><p>要连接数据库，当然要先新建一个数据库，直接在 PostgreSQL 管理工具里新建即可，这里数据库取名 <code>blog</code>，所有者为 <code>postgres</code></p>\n<p>编辑 Django 项目的 <code>setting.py</code> 文件中的 <code>DATABASES</code>字段，填入数据库信息：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">DATABASES = &#123;</div><div class=\"line\">    <span class=\"string\">'default'</span>: &#123;</div><div class=\"line\">        <span class=\"string\">'ENGINE'</span>: <span class=\"string\">'django.db.backends.postgresql'</span>, <span class=\"comment\">#PostgreSQL数据库规定写法</span></div><div class=\"line\">        <span class=\"string\">'NAME'</span>: <span class=\"string\">'blog'</span>, <span class=\"comment\">#数据库名称</span></div><div class=\"line\">        <span class=\"string\">'USER'</span>: <span class=\"string\">'postgres'</span>, <span class=\"comment\">#数据库用户</span></div><div class=\"line\">        <span class=\"string\">'PASSWORD'</span>: <span class=\"string\">'123'</span>, <span class=\"comment\">#数据库密码</span></div><div class=\"line\">        <span class=\"string\">'HOST'</span>: <span class=\"string\">'127.0.0.1'</span>, <span class=\"comment\">#数据库所在的IP地址</span></div><div class=\"line\">        <span class=\"string\">'PORT'</span>: <span class=\"string\">'5432'</span>, <span class=\"comment\">#连接数据库的端口号</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>到这里就成功连接数据库了！</p>"},{"title":"搭建Django博客（2）创建数据模型","date":"2016-09-05T11:46:09.000Z","_content":"\n前面我们创建并连接了数据库，但我们没有向数据库写入任何数据，在 Django 中直接与数据库交互的是数据模型，可以通过数据模型实现对数据库的各种操作。\n\n# 创建博客文章的数据模型\n\nDjango 中用`models.py`文件中的一个类表示数据库中的一张表，类中的属性表示数据库中的一列。因此，我们可以编辑`models.py`文件来创建数据库表。\n\n\n<!--more-->\n\n\n现在我们来创建一个`Article`类，类中的`title` `category` `publish_time` `content`属性分别对应数据库中的一个列。\n\n```python\nfrom django.db import models\n\n# Create your models here.\n\nclass Article(models.Model):\n    title = models.CharField('标题',max_length=50)\n    category = models.CharField('分类',max_length=50, blank=True)\n    publish_time = models.DateField('发布时间',auto_now_add=True)\n    content = models.TextField('正文')\n    # 下面2个属性我觉得没啥必要就注释掉了，以后如果有需要再启用\n    # modify_date = models.DateField('修改日期',auto_now=True)\n    # author = models.CharField('作者',max_length=50)\n\n    class Meta:\n        db_table = 'article'  #数据库表名\n        ordering = ['-id']  # 按创建时分配的 id 倒序排列\n\n    def __str__(self):\n        return self.title\n```\n\n# 将博客应用注册到 Django\n\n编辑`setting.py`文件中的`INSTALLED_APPS`字段，加入应用名称；将创建的博客应用`blogapp`注册到 Django ，使应用的数据模型写入数据库。\n\n```python\nINSTALLED_APPS = [\n    'blogapp',  # 创建的 Django 应用 blogapp\n    'django.contrib.admin',  # Django 默认自带的应用\n    'django.contrib.auth',   # Django 默认自带的应用\n    'django.contrib.contenttypes',   # Django 默认自带的应用\n    'django.contrib.sessions',   # Django 默认自带的应用\n    'django.contrib.messages',   # Django 默认自带的应用\n    'django.contrib.staticfiles',   # Django 默认自带的应用\n]\n```\n\n现在我们已经准备好将自定义的数据模型写入数据库：\n\n```powershell\n$ python manage.py makemigrations\n```\n\n*注意：执行上面命令后，会在`myblog/blogapp/migrations`文件夹下创建一个 python 迁移文件，但数据模型此时并未写入数据库*\n\n真正更新数据库的命令\n\n```powershell\n$ python manage.py migrate\n```\n# 登录 Django 后台管理页面\n\n我们已经在数据库中创建了表和列用来保存我们的数据，那我们怎么把各个列的数据写入数据库呢？显然，用 SQL 语句是可行的，但是，估计用不了多久你就会崩溃掉（微笑脸）\n\n贴心的 Django 已经为我们准备好易于操作的后台管理页面了，只需创建一个后台管理用户：\n\n```powershell\n$ python manage.py createsuperuser\n```\n\n创建用户后，打开[http://127.0.0.1:8000/admin/](http://127.0.0.1:8000/admin/)，使用刚刚创建的用户名和密码登录，看到下面的界面就表示成功了！\n\n{% asset_img login.png Login page %}\n\n{% asset_img admin.png Admin page %}","source":"_posts/搭建Django博客（2）创建数据模型.md","raw":"---\ntitle: 搭建Django博客（2）创建数据模型\ndate: 2016-09-05 19:46:09\ncategories: Django\ntags:\n- Django\n---\n\n前面我们创建并连接了数据库，但我们没有向数据库写入任何数据，在 Django 中直接与数据库交互的是数据模型，可以通过数据模型实现对数据库的各种操作。\n\n# 创建博客文章的数据模型\n\nDjango 中用`models.py`文件中的一个类表示数据库中的一张表，类中的属性表示数据库中的一列。因此，我们可以编辑`models.py`文件来创建数据库表。\n\n\n<!--more-->\n\n\n现在我们来创建一个`Article`类，类中的`title` `category` `publish_time` `content`属性分别对应数据库中的一个列。\n\n```python\nfrom django.db import models\n\n# Create your models here.\n\nclass Article(models.Model):\n    title = models.CharField('标题',max_length=50)\n    category = models.CharField('分类',max_length=50, blank=True)\n    publish_time = models.DateField('发布时间',auto_now_add=True)\n    content = models.TextField('正文')\n    # 下面2个属性我觉得没啥必要就注释掉了，以后如果有需要再启用\n    # modify_date = models.DateField('修改日期',auto_now=True)\n    # author = models.CharField('作者',max_length=50)\n\n    class Meta:\n        db_table = 'article'  #数据库表名\n        ordering = ['-id']  # 按创建时分配的 id 倒序排列\n\n    def __str__(self):\n        return self.title\n```\n\n# 将博客应用注册到 Django\n\n编辑`setting.py`文件中的`INSTALLED_APPS`字段，加入应用名称；将创建的博客应用`blogapp`注册到 Django ，使应用的数据模型写入数据库。\n\n```python\nINSTALLED_APPS = [\n    'blogapp',  # 创建的 Django 应用 blogapp\n    'django.contrib.admin',  # Django 默认自带的应用\n    'django.contrib.auth',   # Django 默认自带的应用\n    'django.contrib.contenttypes',   # Django 默认自带的应用\n    'django.contrib.sessions',   # Django 默认自带的应用\n    'django.contrib.messages',   # Django 默认自带的应用\n    'django.contrib.staticfiles',   # Django 默认自带的应用\n]\n```\n\n现在我们已经准备好将自定义的数据模型写入数据库：\n\n```powershell\n$ python manage.py makemigrations\n```\n\n*注意：执行上面命令后，会在`myblog/blogapp/migrations`文件夹下创建一个 python 迁移文件，但数据模型此时并未写入数据库*\n\n真正更新数据库的命令\n\n```powershell\n$ python manage.py migrate\n```\n# 登录 Django 后台管理页面\n\n我们已经在数据库中创建了表和列用来保存我们的数据，那我们怎么把各个列的数据写入数据库呢？显然，用 SQL 语句是可行的，但是，估计用不了多久你就会崩溃掉（微笑脸）\n\n贴心的 Django 已经为我们准备好易于操作的后台管理页面了，只需创建一个后台管理用户：\n\n```powershell\n$ python manage.py createsuperuser\n```\n\n创建用户后，打开[http://127.0.0.1:8000/admin/](http://127.0.0.1:8000/admin/)，使用刚刚创建的用户名和密码登录，看到下面的界面就表示成功了！\n\n{% asset_img login.png Login page %}\n\n{% asset_img admin.png Admin page %}","slug":"搭建Django博客（2）创建数据模型","published":1,"updated":"2017-02-02T09:35:22.795Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz485cmy000gkocek3yrrmo1","content":"<p>前面我们创建并连接了数据库，但我们没有向数据库写入任何数据，在 Django 中直接与数据库交互的是数据模型，可以通过数据模型实现对数据库的各种操作。</p>\n<h1 id=\"创建博客文章的数据模型\"><a href=\"#创建博客文章的数据模型\" class=\"headerlink\" title=\"创建博客文章的数据模型\"></a>创建博客文章的数据模型</h1><p>Django 中用<code>models.py</code>文件中的一个类表示数据库中的一张表，类中的属性表示数据库中的一列。因此，我们可以编辑<code>models.py</code>文件来创建数据库表。</p>\n<a id=\"more\"></a>\n<p>现在我们来创建一个<code>Article</code>类，类中的<code>title</code> <code>category</code> <code>publish_time</code> <code>content</code>属性分别对应数据库中的一个列。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> models</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Create your models here.</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Article</span><span class=\"params\">(models.Model)</span>:</span></div><div class=\"line\">    title = models.CharField(<span class=\"string\">'标题'</span>,max_length=<span class=\"number\">50</span>)</div><div class=\"line\">    category = models.CharField(<span class=\"string\">'分类'</span>,max_length=<span class=\"number\">50</span>, blank=<span class=\"keyword\">True</span>)</div><div class=\"line\">    publish_time = models.DateField(<span class=\"string\">'发布时间'</span>,auto_now_add=<span class=\"keyword\">True</span>)</div><div class=\"line\">    content = models.TextField(<span class=\"string\">'正文'</span>)</div><div class=\"line\">    <span class=\"comment\"># 下面2个属性我觉得没啥必要就注释掉了，以后如果有需要再启用</span></div><div class=\"line\">    <span class=\"comment\"># modify_date = models.DateField('修改日期',auto_now=True)</span></div><div class=\"line\">    <span class=\"comment\"># author = models.CharField('作者',max_length=50)</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        db_table = <span class=\"string\">'article'</span>  <span class=\"comment\">#数据库表名</span></div><div class=\"line\">        ordering = [<span class=\"string\">'-id'</span>]  <span class=\"comment\"># 按创建时分配的 id 倒序排列</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.title</div></pre></td></tr></table></figure>\n<h1 id=\"将博客应用注册到-Django\"><a href=\"#将博客应用注册到-Django\" class=\"headerlink\" title=\"将博客应用注册到 Django\"></a>将博客应用注册到 Django</h1><p>编辑<code>setting.py</code>文件中的<code>INSTALLED_APPS</code>字段，加入应用名称；将创建的博客应用<code>blogapp</code>注册到 Django ，使应用的数据模型写入数据库。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">INSTALLED_APPS = [</div><div class=\"line\">    <span class=\"string\">'blogapp'</span>,  <span class=\"comment\"># 创建的 Django 应用 blogapp</span></div><div class=\"line\">    <span class=\"string\">'django.contrib.admin'</span>,  <span class=\"comment\"># Django 默认自带的应用</span></div><div class=\"line\">    <span class=\"string\">'django.contrib.auth'</span>,   <span class=\"comment\"># Django 默认自带的应用</span></div><div class=\"line\">    <span class=\"string\">'django.contrib.contenttypes'</span>,   <span class=\"comment\"># Django 默认自带的应用</span></div><div class=\"line\">    <span class=\"string\">'django.contrib.sessions'</span>,   <span class=\"comment\"># Django 默认自带的应用</span></div><div class=\"line\">    <span class=\"string\">'django.contrib.messages'</span>,   <span class=\"comment\"># Django 默认自带的应用</span></div><div class=\"line\">    <span class=\"string\">'django.contrib.staticfiles'</span>,   <span class=\"comment\"># Django 默认自带的应用</span></div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<p>现在我们已经准备好将自定义的数据模型写入数据库：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ python manage.py makemigrations</div></pre></td></tr></table></figure>\n<p><em>注意：执行上面命令后，会在<code>myblog/blogapp/migrations</code>文件夹下创建一个 python 迁移文件，但数据模型此时并未写入数据库</em></p>\n<p>真正更新数据库的命令</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ python manage.py migrate</div></pre></td></tr></table></figure>\n<h1 id=\"登录-Django-后台管理页面\"><a href=\"#登录-Django-后台管理页面\" class=\"headerlink\" title=\"登录 Django 后台管理页面\"></a>登录 Django 后台管理页面</h1><p>我们已经在数据库中创建了表和列用来保存我们的数据，那我们怎么把各个列的数据写入数据库呢？显然，用 SQL 语句是可行的，但是，估计用不了多久你就会崩溃掉（微笑脸）</p>\n<p>贴心的 Django 已经为我们准备好易于操作的后台管理页面了，只需创建一个后台管理用户：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ python manage.py createsuperuser</div></pre></td></tr></table></figure>\n<p>创建用户后，打开<a href=\"http://127.0.0.1:8000/admin/\" target=\"_blank\" rel=\"external\">http://127.0.0.1:8000/admin/</a>，使用刚刚创建的用户名和密码登录，看到下面的界面就表示成功了！</p>\n<img src=\"/2016/09/05/搭建Django博客（2）创建数据模型/login.png\" alt=\"Login page\" title=\"Login page\">\n<img src=\"/2016/09/05/搭建Django博客（2）创建数据模型/admin.png\" alt=\"Admin page\" title=\"Admin page\">","excerpt":"<p>前面我们创建并连接了数据库，但我们没有向数据库写入任何数据，在 Django 中直接与数据库交互的是数据模型，可以通过数据模型实现对数据库的各种操作。</p>\n<h1 id=\"创建博客文章的数据模型\"><a href=\"#创建博客文章的数据模型\" class=\"headerlink\" title=\"创建博客文章的数据模型\"></a>创建博客文章的数据模型</h1><p>Django 中用<code>models.py</code>文件中的一个类表示数据库中的一张表，类中的属性表示数据库中的一列。因此，我们可以编辑<code>models.py</code>文件来创建数据库表。</p>","more":"<p>现在我们来创建一个<code>Article</code>类，类中的<code>title</code> <code>category</code> <code>publish_time</code> <code>content</code>属性分别对应数据库中的一个列。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> models</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Create your models here.</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Article</span><span class=\"params\">(models.Model)</span>:</span></div><div class=\"line\">    title = models.CharField(<span class=\"string\">'标题'</span>,max_length=<span class=\"number\">50</span>)</div><div class=\"line\">    category = models.CharField(<span class=\"string\">'分类'</span>,max_length=<span class=\"number\">50</span>, blank=<span class=\"keyword\">True</span>)</div><div class=\"line\">    publish_time = models.DateField(<span class=\"string\">'发布时间'</span>,auto_now_add=<span class=\"keyword\">True</span>)</div><div class=\"line\">    content = models.TextField(<span class=\"string\">'正文'</span>)</div><div class=\"line\">    <span class=\"comment\"># 下面2个属性我觉得没啥必要就注释掉了，以后如果有需要再启用</span></div><div class=\"line\">    <span class=\"comment\"># modify_date = models.DateField('修改日期',auto_now=True)</span></div><div class=\"line\">    <span class=\"comment\"># author = models.CharField('作者',max_length=50)</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        db_table = <span class=\"string\">'article'</span>  <span class=\"comment\">#数据库表名</span></div><div class=\"line\">        ordering = [<span class=\"string\">'-id'</span>]  <span class=\"comment\"># 按创建时分配的 id 倒序排列</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.title</div></pre></td></tr></table></figure>\n<h1 id=\"将博客应用注册到-Django\"><a href=\"#将博客应用注册到-Django\" class=\"headerlink\" title=\"将博客应用注册到 Django\"></a>将博客应用注册到 Django</h1><p>编辑<code>setting.py</code>文件中的<code>INSTALLED_APPS</code>字段，加入应用名称；将创建的博客应用<code>blogapp</code>注册到 Django ，使应用的数据模型写入数据库。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">INSTALLED_APPS = [</div><div class=\"line\">    <span class=\"string\">'blogapp'</span>,  <span class=\"comment\"># 创建的 Django 应用 blogapp</span></div><div class=\"line\">    <span class=\"string\">'django.contrib.admin'</span>,  <span class=\"comment\"># Django 默认自带的应用</span></div><div class=\"line\">    <span class=\"string\">'django.contrib.auth'</span>,   <span class=\"comment\"># Django 默认自带的应用</span></div><div class=\"line\">    <span class=\"string\">'django.contrib.contenttypes'</span>,   <span class=\"comment\"># Django 默认自带的应用</span></div><div class=\"line\">    <span class=\"string\">'django.contrib.sessions'</span>,   <span class=\"comment\"># Django 默认自带的应用</span></div><div class=\"line\">    <span class=\"string\">'django.contrib.messages'</span>,   <span class=\"comment\"># Django 默认自带的应用</span></div><div class=\"line\">    <span class=\"string\">'django.contrib.staticfiles'</span>,   <span class=\"comment\"># Django 默认自带的应用</span></div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<p>现在我们已经准备好将自定义的数据模型写入数据库：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ python manage.py makemigrations</div></pre></td></tr></table></figure>\n<p><em>注意：执行上面命令后，会在<code>myblog/blogapp/migrations</code>文件夹下创建一个 python 迁移文件，但数据模型此时并未写入数据库</em></p>\n<p>真正更新数据库的命令</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ python manage.py migrate</div></pre></td></tr></table></figure>\n<h1 id=\"登录-Django-后台管理页面\"><a href=\"#登录-Django-后台管理页面\" class=\"headerlink\" title=\"登录 Django 后台管理页面\"></a>登录 Django 后台管理页面</h1><p>我们已经在数据库中创建了表和列用来保存我们的数据，那我们怎么把各个列的数据写入数据库呢？显然，用 SQL 语句是可行的，但是，估计用不了多久你就会崩溃掉（微笑脸）</p>\n<p>贴心的 Django 已经为我们准备好易于操作的后台管理页面了，只需创建一个后台管理用户：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ python manage.py createsuperuser</div></pre></td></tr></table></figure>\n<p>创建用户后，打开<a href=\"http://127.0.0.1:8000/admin/\">http://127.0.0.1:8000/admin/</a>，使用刚刚创建的用户名和密码登录，看到下面的界面就表示成功了！</p>\n<img src=\"/2016/09/05/搭建Django博客（2）创建数据模型/login.png\" alt=\"Login page\" title=\"Login page\">\n<img src=\"/2016/09/05/搭建Django博客（2）创建数据模型/admin.png\" alt=\"Admin page\" title=\"Admin page\">"},{"title":"搭建Django博客（3）网页处理逻辑","date":"2016-09-05T13:18:32.000Z","_content":"\n# 网页程序的逻辑\n\n# 前言\n\n> 把数据存取逻辑、业务逻辑和表现逻辑组合在一起的概念有时被称为软件架构的 Model-View-Controller(MVC) 模式。\n>\n> Model 代表数据存取层，View 代表的是系统中选择显示什么和怎么显示的部分，Controller 指的是系统中根据用户输入并视需要访问模型，以决定使用哪个视图的那部分。\n\nDjango 也遵循这种 MVC 开发模式，下面是 Django 所对应的 MVC：\n\n- M  数据存取部分，由 Django 数据库层处理。\n- V  选择哪些数据要显示以及怎样显示的部分，由视图和模板处理。\n- C  根据用户输入分配视图的部分，由 Django 框架根据 URLconf 设置，对给定的 URL 调用适当的函数。\n\n由于 Django 里面 C 由框架自行处理，而 Django 里更关注的是模型（Model）、模板（Template）和视图（Views），所以 Django 也被称为 MTV 框架 。在 MTV 开发模式中：\n\n- M  代表模型（Model），即数据存取层。 该层处理与数据相关的所有事务： 如何存取、如何验证有效性、包含哪些行为以及数据之间的关系等。\n- T  代表模板（Template），即表现层。 该层处理与表现相关的决定： 如何在页面或其他类型文档中进行显示。\n- V  代表视图（Views），即业务逻辑层。 该层包含存取模型及调取恰当模板的相关逻辑，可以把它看作模型与模板之间的桥梁。\n\nDjango 处理请求的流程：\n\n{% asset_img flow.png Django 请求处理流程 %}\n\nrequest 进来-->`urls.py`根据 url 指配处理函数-->`views.py`处理 request 请求-->返回 response\n\n\n<!--more-->\n\n\n# URL 调度器 urls.py\n\n编写`urls.py`将 request 请求传递给`views.py`相应的函数处理\n\n```python\nfrom django.conf.urls import url\nfrom django.contrib import admin\nfrom blogapp import views\n\nurlpatterns = [\n    url(r'^admin/', admin.site.urls),  # 匹配传递给管理页面函数\n    url(r'^$', views.home),  # 匹配传递给 home 视图函数\n]\n```\n\n# Views 视图函数 views.py\n\n编写`views.py`处理由`urls.py`转来的 request 请求，home 视图函数处理完后返回 response\n\n```python\nfrom django.shortcuts import render\nfrom django.http import HttpResponse\n\n# Create your views here.\ndef home(request):\n    return HttpResponse(\"Hello World, Django\")\n```\n\n# 模板Templates\n\n为了使返回的 response 达到更好的显示效果，可以让视图函数加载模板处理后再返回。\n\n在`setting.py`的 `TEMPLATES` 设置模板文件的存放路径\n\n```python\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # 设置模板文件路径\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n```\n\n相应的也要修改 `views.py`中的视图函数，将`request 请求`、`模板文件`和`参数`传入传递函数`render`渲染后返回\n\n```python\nfrom django.shortcuts import render\nfrom django.http import HttpResponse\nfrom blogapp.models import Article\n\n# Create your views here.\ndef home(request):\n    posts_list = Article.objects.all()\n    return render(request, 'home.html', {'post_list' : post_list})\n```\n\n在`templates`文件夹编写`home.html`文件\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n\n    {% for post in post_list %}\n        标题：<a href=\"{{ post.id }}\">{{ post.title }}</a>\n        发布时间： <a class=\"post-author\" href=\"\">{{ post.publish_time |date:\"Y/m/d\"}}</a>\n        分类： <a class=\"post-category post-category-yui\" href=\"/categories/\">{{ post.category }}</a>\n        正文： <p>{{ post.content }}</p>\n    {% endfor %}\n\n</body>\n</html>\n```","source":"_posts/搭建Django博客（3）网页处理逻辑.md","raw":"---\ntitle: 搭建Django博客（3）网页处理逻辑\ndate: 2016-09-05 21:18:32\ncategories: Django\ntags:\n- Django\n---\n\n# 网页程序的逻辑\n\n# 前言\n\n> 把数据存取逻辑、业务逻辑和表现逻辑组合在一起的概念有时被称为软件架构的 Model-View-Controller(MVC) 模式。\n>\n> Model 代表数据存取层，View 代表的是系统中选择显示什么和怎么显示的部分，Controller 指的是系统中根据用户输入并视需要访问模型，以决定使用哪个视图的那部分。\n\nDjango 也遵循这种 MVC 开发模式，下面是 Django 所对应的 MVC：\n\n- M  数据存取部分，由 Django 数据库层处理。\n- V  选择哪些数据要显示以及怎样显示的部分，由视图和模板处理。\n- C  根据用户输入分配视图的部分，由 Django 框架根据 URLconf 设置，对给定的 URL 调用适当的函数。\n\n由于 Django 里面 C 由框架自行处理，而 Django 里更关注的是模型（Model）、模板（Template）和视图（Views），所以 Django 也被称为 MTV 框架 。在 MTV 开发模式中：\n\n- M  代表模型（Model），即数据存取层。 该层处理与数据相关的所有事务： 如何存取、如何验证有效性、包含哪些行为以及数据之间的关系等。\n- T  代表模板（Template），即表现层。 该层处理与表现相关的决定： 如何在页面或其他类型文档中进行显示。\n- V  代表视图（Views），即业务逻辑层。 该层包含存取模型及调取恰当模板的相关逻辑，可以把它看作模型与模板之间的桥梁。\n\nDjango 处理请求的流程：\n\n{% asset_img flow.png Django 请求处理流程 %}\n\nrequest 进来-->`urls.py`根据 url 指配处理函数-->`views.py`处理 request 请求-->返回 response\n\n\n<!--more-->\n\n\n# URL 调度器 urls.py\n\n编写`urls.py`将 request 请求传递给`views.py`相应的函数处理\n\n```python\nfrom django.conf.urls import url\nfrom django.contrib import admin\nfrom blogapp import views\n\nurlpatterns = [\n    url(r'^admin/', admin.site.urls),  # 匹配传递给管理页面函数\n    url(r'^$', views.home),  # 匹配传递给 home 视图函数\n]\n```\n\n# Views 视图函数 views.py\n\n编写`views.py`处理由`urls.py`转来的 request 请求，home 视图函数处理完后返回 response\n\n```python\nfrom django.shortcuts import render\nfrom django.http import HttpResponse\n\n# Create your views here.\ndef home(request):\n    return HttpResponse(\"Hello World, Django\")\n```\n\n# 模板Templates\n\n为了使返回的 response 达到更好的显示效果，可以让视图函数加载模板处理后再返回。\n\n在`setting.py`的 `TEMPLATES` 设置模板文件的存放路径\n\n```python\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # 设置模板文件路径\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n```\n\n相应的也要修改 `views.py`中的视图函数，将`request 请求`、`模板文件`和`参数`传入传递函数`render`渲染后返回\n\n```python\nfrom django.shortcuts import render\nfrom django.http import HttpResponse\nfrom blogapp.models import Article\n\n# Create your views here.\ndef home(request):\n    posts_list = Article.objects.all()\n    return render(request, 'home.html', {'post_list' : post_list})\n```\n\n在`templates`文件夹编写`home.html`文件\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n\n    {% for post in post_list %}\n        标题：<a href=\"{{ post.id }}\">{{ post.title }}</a>\n        发布时间： <a class=\"post-author\" href=\"\">{{ post.publish_time |date:\"Y/m/d\"}}</a>\n        分类： <a class=\"post-category post-category-yui\" href=\"/categories/\">{{ post.category }}</a>\n        正文： <p>{{ post.content }}</p>\n    {% endfor %}\n\n</body>\n</html>\n```","slug":"搭建Django博客（3）网页处理逻辑","published":1,"updated":"2017-02-04T12:13:49.244Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz485cn9000ikocezrmri47s","content":"<h1 id=\"网页程序的逻辑\"><a href=\"#网页程序的逻辑\" class=\"headerlink\" title=\"网页程序的逻辑\"></a>网页程序的逻辑</h1><h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>把数据存取逻辑、业务逻辑和表现逻辑组合在一起的概念有时被称为软件架构的 Model-View-Controller(MVC) 模式。</p>\n<p>Model 代表数据存取层，View 代表的是系统中选择显示什么和怎么显示的部分，Controller 指的是系统中根据用户输入并视需要访问模型，以决定使用哪个视图的那部分。</p>\n</blockquote>\n<p>Django 也遵循这种 MVC 开发模式，下面是 Django 所对应的 MVC：</p>\n<ul>\n<li>M  数据存取部分，由 Django 数据库层处理。</li>\n<li>V  选择哪些数据要显示以及怎样显示的部分，由视图和模板处理。</li>\n<li>C  根据用户输入分配视图的部分，由 Django 框架根据 URLconf 设置，对给定的 URL 调用适当的函数。</li>\n</ul>\n<p>由于 Django 里面 C 由框架自行处理，而 Django 里更关注的是模型（Model）、模板（Template）和视图（Views），所以 Django 也被称为 MTV 框架 。在 MTV 开发模式中：</p>\n<ul>\n<li>M  代表模型（Model），即数据存取层。 该层处理与数据相关的所有事务： 如何存取、如何验证有效性、包含哪些行为以及数据之间的关系等。</li>\n<li>T  代表模板（Template），即表现层。 该层处理与表现相关的决定： 如何在页面或其他类型文档中进行显示。</li>\n<li>V  代表视图（Views），即业务逻辑层。 该层包含存取模型及调取恰当模板的相关逻辑，可以把它看作模型与模板之间的桥梁。</li>\n</ul>\n<p>Django 处理请求的流程：</p>\n<img src=\"/2016/09/05/搭建Django博客（3）网页处理逻辑/flow.png\" alt=\"Django 请求处理流程\" title=\"Django 请求处理流程\">\n<p>request 进来–&gt;<code>urls.py</code>根据 url 指配处理函数–&gt;<code>views.py</code>处理 request 请求–&gt;返回 response</p>\n<a id=\"more\"></a>\n<h1 id=\"URL-调度器-urls-py\"><a href=\"#URL-调度器-urls-py\" class=\"headerlink\" title=\"URL 调度器 urls.py\"></a>URL 调度器 urls.py</h1><p>编写<code>urls.py</code>将 request 请求传递给<code>views.py</code>相应的函数处理</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> url</div><div class=\"line\"><span class=\"keyword\">from</span> django.contrib <span class=\"keyword\">import</span> admin</div><div class=\"line\"><span class=\"keyword\">from</span> blogapp <span class=\"keyword\">import</span> views</div><div class=\"line\"></div><div class=\"line\">urlpatterns = [</div><div class=\"line\">    url(<span class=\"string\">r'^admin/'</span>, admin.site.urls),  <span class=\"comment\"># 匹配传递给管理页面函数</span></div><div class=\"line\">    url(<span class=\"string\">r'^$'</span>, views.home),  <span class=\"comment\"># 匹配传递给 home 视图函数</span></div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<h1 id=\"Views-视图函数-views-py\"><a href=\"#Views-视图函数-views-py\" class=\"headerlink\" title=\"Views 视图函数 views.py\"></a>Views 视图函数 views.py</h1><p>编写<code>views.py</code>处理由<code>urls.py</code>转来的 request 请求，home 视图函数处理完后返回 response</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> render</div><div class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Create your views here.</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">home</span><span class=\"params\">(request)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> HttpResponse(<span class=\"string\">\"Hello World, Django\"</span>)</div></pre></td></tr></table></figure>\n<h1 id=\"模板Templates\"><a href=\"#模板Templates\" class=\"headerlink\" title=\"模板Templates\"></a>模板Templates</h1><p>为了使返回的 response 达到更好的显示效果，可以让视图函数加载模板处理后再返回。</p>\n<p>在<code>setting.py</code>的 <code>TEMPLATES</code> 设置模板文件的存放路径</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">TEMPLATES = [</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"string\">'BACKEND'</span>: <span class=\"string\">'django.template.backends.django.DjangoTemplates'</span>,</div><div class=\"line\">        <span class=\"string\">'DIRS'</span>: [os.path.join(BASE_DIR, <span class=\"string\">'templates'</span>)],  <span class=\"comment\"># 设置模板文件路径</span></div><div class=\"line\">        <span class=\"string\">'APP_DIRS'</span>: <span class=\"keyword\">True</span>,</div><div class=\"line\">        <span class=\"string\">'OPTIONS'</span>: &#123;</div><div class=\"line\">            <span class=\"string\">'context_processors'</span>: [</div><div class=\"line\">                <span class=\"string\">'django.template.context_processors.debug'</span>,</div><div class=\"line\">                <span class=\"string\">'django.template.context_processors.request'</span>,</div><div class=\"line\">                <span class=\"string\">'django.contrib.auth.context_processors.auth'</span>,</div><div class=\"line\">                <span class=\"string\">'django.contrib.messages.context_processors.messages'</span>,</div><div class=\"line\">            ],</div><div class=\"line\">        &#125;,</div><div class=\"line\">    &#125;,</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<p>相应的也要修改 <code>views.py</code>中的视图函数，将<code>request 请求</code>、<code>模板文件</code>和<code>参数</code>传入传递函数<code>render</code>渲染后返回</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> render</div><div class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse</div><div class=\"line\"><span class=\"keyword\">from</span> blogapp.models <span class=\"keyword\">import</span> Article</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Create your views here.</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">home</span><span class=\"params\">(request)</span>:</span></div><div class=\"line\">    posts_list = Article.objects.all()</div><div class=\"line\">    <span class=\"keyword\">return</span> render(request, <span class=\"string\">'home.html'</span>, &#123;<span class=\"string\">'post_list'</span> : post_list&#125;)</div></pre></td></tr></table></figure>\n<p>在<code>templates</code>文件夹编写<code>home.html</code>文件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    &#123;% for post in post_list %&#125;</div><div class=\"line\">        标题：<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;&#123; post.id &#125;&#125;\"</span>&gt;</span>&#123;&#123; post.title &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">        发布时间： <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"post-author\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span>&#123;&#123; post.publish_time |date:\"Y/m/d\"&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">        分类： <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"post-category post-category-yui\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/categories/\"</span>&gt;</span>&#123;&#123; post.category &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">        正文： <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; post.content &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    &#123;% endfor %&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>","excerpt":"<h1 id=\"网页程序的逻辑\"><a href=\"#网页程序的逻辑\" class=\"headerlink\" title=\"网页程序的逻辑\"></a>网页程序的逻辑</h1><h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>把数据存取逻辑、业务逻辑和表现逻辑组合在一起的概念有时被称为软件架构的 Model-View-Controller(MVC) 模式。</p>\n<p>Model 代表数据存取层，View 代表的是系统中选择显示什么和怎么显示的部分，Controller 指的是系统中根据用户输入并视需要访问模型，以决定使用哪个视图的那部分。</p>\n</blockquote>\n<p>Django 也遵循这种 MVC 开发模式，下面是 Django 所对应的 MVC：</p>\n<ul>\n<li>M  数据存取部分，由 Django 数据库层处理。</li>\n<li>V  选择哪些数据要显示以及怎样显示的部分，由视图和模板处理。</li>\n<li>C  根据用户输入分配视图的部分，由 Django 框架根据 URLconf 设置，对给定的 URL 调用适当的函数。</li>\n</ul>\n<p>由于 Django 里面 C 由框架自行处理，而 Django 里更关注的是模型（Model）、模板（Template）和视图（Views），所以 Django 也被称为 MTV 框架 。在 MTV 开发模式中：</p>\n<ul>\n<li>M  代表模型（Model），即数据存取层。 该层处理与数据相关的所有事务： 如何存取、如何验证有效性、包含哪些行为以及数据之间的关系等。</li>\n<li>T  代表模板（Template），即表现层。 该层处理与表现相关的决定： 如何在页面或其他类型文档中进行显示。</li>\n<li>V  代表视图（Views），即业务逻辑层。 该层包含存取模型及调取恰当模板的相关逻辑，可以把它看作模型与模板之间的桥梁。</li>\n</ul>\n<p>Django 处理请求的流程：</p>\n<img src=\"/2016/09/05/搭建Django博客（3）网页处理逻辑/flow.png\" alt=\"Django 请求处理流程\" title=\"Django 请求处理流程\">\n<p>request 进来–&gt;<code>urls.py</code>根据 url 指配处理函数–&gt;<code>views.py</code>处理 request 请求–&gt;返回 response</p>","more":"<h1 id=\"URL-调度器-urls-py\"><a href=\"#URL-调度器-urls-py\" class=\"headerlink\" title=\"URL 调度器 urls.py\"></a>URL 调度器 urls.py</h1><p>编写<code>urls.py</code>将 request 请求传递给<code>views.py</code>相应的函数处理</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> url</div><div class=\"line\"><span class=\"keyword\">from</span> django.contrib <span class=\"keyword\">import</span> admin</div><div class=\"line\"><span class=\"keyword\">from</span> blogapp <span class=\"keyword\">import</span> views</div><div class=\"line\"></div><div class=\"line\">urlpatterns = [</div><div class=\"line\">    url(<span class=\"string\">r'^admin/'</span>, admin.site.urls),  <span class=\"comment\"># 匹配传递给管理页面函数</span></div><div class=\"line\">    url(<span class=\"string\">r'^$'</span>, views.home),  <span class=\"comment\"># 匹配传递给 home 视图函数</span></div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<h1 id=\"Views-视图函数-views-py\"><a href=\"#Views-视图函数-views-py\" class=\"headerlink\" title=\"Views 视图函数 views.py\"></a>Views 视图函数 views.py</h1><p>编写<code>views.py</code>处理由<code>urls.py</code>转来的 request 请求，home 视图函数处理完后返回 response</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> render</div><div class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Create your views here.</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">home</span><span class=\"params\">(request)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> HttpResponse(<span class=\"string\">\"Hello World, Django\"</span>)</div></pre></td></tr></table></figure>\n<h1 id=\"模板Templates\"><a href=\"#模板Templates\" class=\"headerlink\" title=\"模板Templates\"></a>模板Templates</h1><p>为了使返回的 response 达到更好的显示效果，可以让视图函数加载模板处理后再返回。</p>\n<p>在<code>setting.py</code>的 <code>TEMPLATES</code> 设置模板文件的存放路径</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">TEMPLATES = [</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"string\">'BACKEND'</span>: <span class=\"string\">'django.template.backends.django.DjangoTemplates'</span>,</div><div class=\"line\">        <span class=\"string\">'DIRS'</span>: [os.path.join(BASE_DIR, <span class=\"string\">'templates'</span>)],  <span class=\"comment\"># 设置模板文件路径</span></div><div class=\"line\">        <span class=\"string\">'APP_DIRS'</span>: <span class=\"keyword\">True</span>,</div><div class=\"line\">        <span class=\"string\">'OPTIONS'</span>: &#123;</div><div class=\"line\">            <span class=\"string\">'context_processors'</span>: [</div><div class=\"line\">                <span class=\"string\">'django.template.context_processors.debug'</span>,</div><div class=\"line\">                <span class=\"string\">'django.template.context_processors.request'</span>,</div><div class=\"line\">                <span class=\"string\">'django.contrib.auth.context_processors.auth'</span>,</div><div class=\"line\">                <span class=\"string\">'django.contrib.messages.context_processors.messages'</span>,</div><div class=\"line\">            ],</div><div class=\"line\">        &#125;,</div><div class=\"line\">    &#125;,</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<p>相应的也要修改 <code>views.py</code>中的视图函数，将<code>request 请求</code>、<code>模板文件</code>和<code>参数</code>传入传递函数<code>render</code>渲染后返回</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> render</div><div class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse</div><div class=\"line\"><span class=\"keyword\">from</span> blogapp.models <span class=\"keyword\">import</span> Article</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Create your views here.</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">home</span><span class=\"params\">(request)</span>:</span></div><div class=\"line\">    posts_list = Article.objects.all()</div><div class=\"line\">    <span class=\"keyword\">return</span> render(request, <span class=\"string\">'home.html'</span>, &#123;<span class=\"string\">'post_list'</span> : post_list&#125;)</div></pre></td></tr></table></figure>\n<p>在<code>templates</code>文件夹编写<code>home.html</code>文件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    &#123;% for post in post_list %&#125;</div><div class=\"line\">        标题：<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;&#123; post.id &#125;&#125;\"</span>&gt;</span>&#123;&#123; post.title &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">        发布时间： <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"post-author\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span>&#123;&#123; post.publish_time |date:\"Y/m/d\"&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">        分类： <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"post-category post-category-yui\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/categories/\"</span>&gt;</span>&#123;&#123; post.category &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">        正文： <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; post.content &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">    &#123;% endfor %&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>"},{"title":"搭建Django博客（4）多说评论框","date":"2016-09-05T13:29:02.000Z","_content":"\n1. 注册[多说](http://duoshuo.com)账号，得到多说`short_name`\n\n2. 在`myblog/templates`文件夹新建`duoshuo.html`并加入代码\n\n   ```javascript\n      <!-- 多说评论框 start -->\n      \t    <div class=\"ds-thread\" data-thread-key=\"{{ post.id }}\" data-title=\"{{ post.title }}\"></div>\n      <!-- 多说评论框 end -->\n      <!-- 多说公共JS代码 start  -->\n      \t<script type=\"text/javascript\">\n            <!-- short_name 填自己的多说名字 -->\n      \tvar duoshuoQuery = {short_name:\"wish007\"};\n      \t    (function() {\n      \t        var ds = document.createElement('script');\n      \t        ds.type = 'text/javascript';ds.async = true;\n      \t        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n      \t        ds.charset = 'UTF-8';\n      \t        (document.getElementsByTagName('head')[0]\n      \t         || document.getElementsByTagName('body')[0]).appendChild(ds);\n      \t    })();\n      \t    </script>\n      <!-- 多说公共JS代码 end -->\n   ```\n\n\n3. 在需要增加多说评论框的`</div>`标签前面添加以下代码\n\n   ```html\n   {% include \"duoshuo.html\" %}\n   ```\n\n","source":"_posts/搭建Django博客（4）多说评论框.md","raw":"---\ntitle: 搭建Django博客（4）多说评论框\ndate: 2016-09-05 21:29:02\ncategories: Django\ntags:\n- Django\n---\n\n1. 注册[多说](http://duoshuo.com)账号，得到多说`short_name`\n\n2. 在`myblog/templates`文件夹新建`duoshuo.html`并加入代码\n\n   ```javascript\n      <!-- 多说评论框 start -->\n      \t    <div class=\"ds-thread\" data-thread-key=\"{{ post.id }}\" data-title=\"{{ post.title }}\"></div>\n      <!-- 多说评论框 end -->\n      <!-- 多说公共JS代码 start  -->\n      \t<script type=\"text/javascript\">\n            <!-- short_name 填自己的多说名字 -->\n      \tvar duoshuoQuery = {short_name:\"wish007\"};\n      \t    (function() {\n      \t        var ds = document.createElement('script');\n      \t        ds.type = 'text/javascript';ds.async = true;\n      \t        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n      \t        ds.charset = 'UTF-8';\n      \t        (document.getElementsByTagName('head')[0]\n      \t         || document.getElementsByTagName('body')[0]).appendChild(ds);\n      \t    })();\n      \t    </script>\n      <!-- 多说公共JS代码 end -->\n   ```\n\n\n3. 在需要增加多说评论框的`</div>`标签前面添加以下代码\n\n   ```html\n   {% include \"duoshuo.html\" %}\n   ```\n\n","slug":"搭建Django博客（4）多说评论框","published":1,"updated":"2017-02-03T13:37:06.183Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz485cni000nkocekms8rvew","content":"<ol>\n<li><p>注册<a href=\"http://duoshuo.com\" target=\"_blank\" rel=\"external\">多说</a>账号，得到多说<code>short_name</code></p>\n</li>\n<li><p>在<code>myblog/templates</code>文件夹新建<code>duoshuo.html</code>并加入代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 多说评论框 start --&gt;</div><div class=\"line\">\t    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ds-thread\"</span> <span class=\"attr\">data-thread-key</span>=<span class=\"string\">\"&#123;&#123; post.id &#125;&#125;\"</span> <span class=\"attr\">data-title</span>=<span class=\"string\">\"&#123;&#123; post.title &#125;&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">&lt;!-- 多说评论框 end --&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 多说公共JS代码 start  --&gt;</span></span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">      &lt;!-- short_name 填自己的多说名字 --&gt;</div><div class=\"line\">\t<span class=\"keyword\">var</span> duoshuoQuery = &#123;<span class=\"attr\">short_name</span>:<span class=\"string\">\"wish007\"</span>&#125;;</div><div class=\"line\">\t    (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t        <span class=\"keyword\">var</span> ds = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</div><div class=\"line\">\t        ds.type = <span class=\"string\">'text/javascript'</span>;ds.async = <span class=\"literal\">true</span>;</div><div class=\"line\">\t        ds.src = (<span class=\"built_in\">document</span>.location.protocol == <span class=\"string\">'https:'</span> ? <span class=\"string\">'https:'</span> : <span class=\"string\">'http:'</span>) + <span class=\"string\">'//static.duoshuo.com/embed.js'</span>;</div><div class=\"line\">\t        ds.charset = <span class=\"string\">'UTF-8'</span>;</div><div class=\"line\">\t        (<span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'head'</span>)[<span class=\"number\">0</span>]</div><div class=\"line\">\t         || <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'body'</span>)[<span class=\"number\">0</span>]).appendChild(ds);</div><div class=\"line\">\t    &#125;)();</div><div class=\"line\">\t    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 多说公共JS代码 end --&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>在需要增加多说评论框的<code>&lt;/div&gt;</code>标签前面添加以下代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% include \"duoshuo.html\" %&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n","excerpt":"","more":"<ol>\n<li><p>注册<a href=\"http://duoshuo.com\">多说</a>账号，得到多说<code>short_name</code></p>\n</li>\n<li><p>在<code>myblog/templates</code>文件夹新建<code>duoshuo.html</code>并加入代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 多说评论框 start --&gt;</div><div class=\"line\">\t    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ds-thread\"</span> <span class=\"attr\">data-thread-key</span>=<span class=\"string\">\"&#123;&#123; post.id &#125;&#125;\"</span> <span class=\"attr\">data-title</span>=<span class=\"string\">\"&#123;&#123; post.title &#125;&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">&lt;!-- 多说评论框 end --&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- 多说公共JS代码 start  --&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">      &lt;!-- short_name 填自己的多说名字 --&gt;</div><div class=\"line\">\t<span class=\"keyword\">var</span> duoshuoQuery = &#123;<span class=\"attr\">short_name</span>:<span class=\"string\">\"wish007\"</span>&#125;;</div><div class=\"line\">\t    (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t        <span class=\"keyword\">var</span> ds = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</div><div class=\"line\">\t        ds.type = <span class=\"string\">'text/javascript'</span>;ds.async = <span class=\"literal\">true</span>;</div><div class=\"line\">\t        ds.src = (<span class=\"built_in\">document</span>.location.protocol == <span class=\"string\">'https:'</span> ? <span class=\"string\">'https:'</span> : <span class=\"string\">'http:'</span>) + <span class=\"string\">'//static.duoshuo.com/embed.js'</span>;</div><div class=\"line\">\t        ds.charset = <span class=\"string\">'UTF-8'</span>;</div><div class=\"line\">\t        (<span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'head'</span>)[<span class=\"number\">0</span>]</div><div class=\"line\">\t         || <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'body'</span>)[<span class=\"number\">0</span>]).appendChild(ds);</div><div class=\"line\">\t    &#125;)();</div><div class=\"line\">\t    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"comment\">&lt;!-- 多说公共JS代码 end --&gt;</span></span></div></pre></td></tr></table></figure>\n</li>\n<li><p>在需要增加多说评论框的<code>&lt;/div&gt;</code>标签前面添加以下代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% include \"duoshuo.html\" %&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"搭建Django博客（7）Django博客搭建总结","date":"2016-09-05T13:34:48.000Z","_content":"\n# 项目地址\n\n[GitHub - wish007/django_blog](https://github.com/wish007/django_blog)\n\n# 效果展示\n\n{% asset_img home.png Home page %}\n\n<!--more-->\n\n{% asset_img archives.png Archives page %}\n\n{% asset_img post.png Post page %}\n\n\n# TO DO\n\n- 增加 ABOUT ME 页面\n- 优化 CATEGORIES 页面\n- 将博客部署到 VPS（完成）\n\n# 参考资料\n\n官方文档： [https://docs.djangoproject.com/](https://docs.djangoproject.com/)\n\n中文文档： [http://python.usyiyi.cn/django/index.html](http://python.usyiyi.cn/django/index.html)\n\nDjango Book： [http://djangobook.py3k.cn/2.0/](http://djangobook.py3k.cn/2.0/)\n\nandrew.liu 的教程： [https://andrew-liu.gitbooks.io/django-blog/content/](https://andrew-liu.gitbooks.io/django-blog/content/)\n\nPure.css 官网： [http://purecss.io/](http://purecss.io/)\n\n中文 Pure.css 网站： [http://www.purecss.org/](http://www.purecss.org/)\n\nPure.css 调试网站： [https://codepen.io/teamgroove/pen/vrdHu](https://codepen.io/teamgroove/pen/vrdHu)","source":"_posts/搭建Django博客（7）Django 博客搭建总结.md","raw":"---\ntitle: 搭建Django博客（7）Django博客搭建总结\ndate: 2016-09-05 21:34:48\ncategories: \n- Django\ntags:\n- Django\n---\n\n# 项目地址\n\n[GitHub - wish007/django_blog](https://github.com/wish007/django_blog)\n\n# 效果展示\n\n{% asset_img home.png Home page %}\n\n<!--more-->\n\n{% asset_img archives.png Archives page %}\n\n{% asset_img post.png Post page %}\n\n\n# TO DO\n\n- 增加 ABOUT ME 页面\n- 优化 CATEGORIES 页面\n- 将博客部署到 VPS（完成）\n\n# 参考资料\n\n官方文档： [https://docs.djangoproject.com/](https://docs.djangoproject.com/)\n\n中文文档： [http://python.usyiyi.cn/django/index.html](http://python.usyiyi.cn/django/index.html)\n\nDjango Book： [http://djangobook.py3k.cn/2.0/](http://djangobook.py3k.cn/2.0/)\n\nandrew.liu 的教程： [https://andrew-liu.gitbooks.io/django-blog/content/](https://andrew-liu.gitbooks.io/django-blog/content/)\n\nPure.css 官网： [http://purecss.io/](http://purecss.io/)\n\n中文 Pure.css 网站： [http://www.purecss.org/](http://www.purecss.org/)\n\nPure.css 调试网站： [https://codepen.io/teamgroove/pen/vrdHu](https://codepen.io/teamgroove/pen/vrdHu)","slug":"搭建Django博客（7）Django 博客搭建总结","published":1,"updated":"2017-02-04T12:24:44.006Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz485cnu000pkoceujtonpld","content":"<h1 id=\"项目地址\"><a href=\"#项目地址\" class=\"headerlink\" title=\"项目地址\"></a>项目地址</h1><p><a href=\"https://github.com/wish007/django_blog\" target=\"_blank\" rel=\"external\">GitHub - wish007/django_blog</a></p>\n<h1 id=\"效果展示\"><a href=\"#效果展示\" class=\"headerlink\" title=\"效果展示\"></a>效果展示</h1><img src=\"/2016/09/05/搭建Django博客（7）Django%20博客搭建总结/home.png\" alt=\"Home page\" title=\"Home page\">\n<a id=\"more\"></a>\n<img src=\"/2016/09/05/搭建Django博客（7）Django%20博客搭建总结/archives.png\" alt=\"Archives page\" title=\"Archives page\">\n<img src=\"/2016/09/05/搭建Django博客（7）Django%20博客搭建总结/post.png\" alt=\"Post page\" title=\"Post page\">\n<h1 id=\"TO-DO\"><a href=\"#TO-DO\" class=\"headerlink\" title=\"TO DO\"></a>TO DO</h1><ul>\n<li>增加 ABOUT ME 页面</li>\n<li>优化 CATEGORIES 页面</li>\n<li>将博客部署到 VPS（完成）</li>\n</ul>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p>官方文档： <a href=\"https://docs.djangoproject.com/\" target=\"_blank\" rel=\"external\">https://docs.djangoproject.com/</a></p>\n<p>中文文档： <a href=\"http://python.usyiyi.cn/django/index.html\" target=\"_blank\" rel=\"external\">http://python.usyiyi.cn/django/index.html</a></p>\n<p>Django Book： <a href=\"http://djangobook.py3k.cn/2.0/\" target=\"_blank\" rel=\"external\">http://djangobook.py3k.cn/2.0/</a></p>\n<p>andrew.liu 的教程： <a href=\"https://andrew-liu.gitbooks.io/django-blog/content/\" target=\"_blank\" rel=\"external\">https://andrew-liu.gitbooks.io/django-blog/content/</a></p>\n<p>Pure.css 官网： <a href=\"http://purecss.io/\" target=\"_blank\" rel=\"external\">http://purecss.io/</a></p>\n<p>中文 Pure.css 网站： <a href=\"http://www.purecss.org/\" target=\"_blank\" rel=\"external\">http://www.purecss.org/</a></p>\n<p>Pure.css 调试网站： <a href=\"https://codepen.io/teamgroove/pen/vrdHu\" target=\"_blank\" rel=\"external\">https://codepen.io/teamgroove/pen/vrdHu</a></p>\n","excerpt":"<h1 id=\"项目地址\"><a href=\"#项目地址\" class=\"headerlink\" title=\"项目地址\"></a>项目地址</h1><p><a href=\"https://github.com/wish007/django_blog\">GitHub - wish007/django_blog</a></p>\n<h1 id=\"效果展示\"><a href=\"#效果展示\" class=\"headerlink\" title=\"效果展示\"></a>效果展示</h1><img src=\"/2016/09/05/搭建Django博客（7）Django%20博客搭建总结/home.png\" alt=\"Home page\" title=\"Home page\">","more":"<img src=\"/2016/09/05/搭建Django博客（7）Django%20博客搭建总结/archives.png\" alt=\"Archives page\" title=\"Archives page\">\n<img src=\"/2016/09/05/搭建Django博客（7）Django%20博客搭建总结/post.png\" alt=\"Post page\" title=\"Post page\">\n<h1 id=\"TO-DO\"><a href=\"#TO-DO\" class=\"headerlink\" title=\"TO DO\"></a>TO DO</h1><ul>\n<li>增加 ABOUT ME 页面</li>\n<li>优化 CATEGORIES 页面</li>\n<li>将博客部署到 VPS（完成）</li>\n</ul>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p>官方文档： <a href=\"https://docs.djangoproject.com/\">https://docs.djangoproject.com/</a></p>\n<p>中文文档： <a href=\"http://python.usyiyi.cn/django/index.html\">http://python.usyiyi.cn/django/index.html</a></p>\n<p>Django Book： <a href=\"http://djangobook.py3k.cn/2.0/\">http://djangobook.py3k.cn/2.0/</a></p>\n<p>andrew.liu 的教程： <a href=\"https://andrew-liu.gitbooks.io/django-blog/content/\">https://andrew-liu.gitbooks.io/django-blog/content/</a></p>\n<p>Pure.css 官网： <a href=\"http://purecss.io/\">http://purecss.io/</a></p>\n<p>中文 Pure.css 网站： <a href=\"http://www.purecss.org/\">http://www.purecss.org/</a></p>\n<p>Pure.css 调试网站： <a href=\"https://codepen.io/teamgroove/pen/vrdHu\">https://codepen.io/teamgroove/pen/vrdHu</a></p>"},{"title":"搭建Django博客（5）Markdown语法显示文章","date":"2016-09-05T13:30:40.000Z","_content":"\n安装 Markdown 库\n\n```powershell\n$ pip install markdown2\n```\n\n\n<!--more-->\n\n\n在 blogapp 下建立新文件夹`templatetags`，然后定义自己的 template filter，在`templatetags`中新建`_init.py`, 让文件夹可以被看做一个包，在文件夹中新建`custom_markdown.py`文件并编辑\n\n```python\nimport markdown2\nfrom django import template\nfrom django.template.defaultfilters import stringfilter\nfrom django.utils.encoding import force_text\nfrom django.utils.safestring import mark_safe\n\nregister = template.Library()\n\n@register.filter(is_safe=True)\n@stringfilter\ndef custom_markdown(value):\n    return mark_safe(markdown2.markdown(force_text(value), extras=[\"fenced-code-blocks\", \"cuddled-lists\", \"metadata\", \"tables\", \"spoiler\"]))\n```\n\n对模板文件中需要 Markdown 显示的地方增加`custom_markdown`过滤器\n\n```html\n{% load custom_markdown %}\n.\n.\n.\n{{ post.content|custom_markdown }}\n```","source":"_posts/搭建Django博客（5）Markdown语法显示文章.md","raw":"---\ntitle: 搭建Django博客（5）Markdown语法显示文章\ndate: 2016-09-05 21:30:40\ncategories: Django\ntags:\n- Django\n---\n\n安装 Markdown 库\n\n```powershell\n$ pip install markdown2\n```\n\n\n<!--more-->\n\n\n在 blogapp 下建立新文件夹`templatetags`，然后定义自己的 template filter，在`templatetags`中新建`_init.py`, 让文件夹可以被看做一个包，在文件夹中新建`custom_markdown.py`文件并编辑\n\n```python\nimport markdown2\nfrom django import template\nfrom django.template.defaultfilters import stringfilter\nfrom django.utils.encoding import force_text\nfrom django.utils.safestring import mark_safe\n\nregister = template.Library()\n\n@register.filter(is_safe=True)\n@stringfilter\ndef custom_markdown(value):\n    return mark_safe(markdown2.markdown(force_text(value), extras=[\"fenced-code-blocks\", \"cuddled-lists\", \"metadata\", \"tables\", \"spoiler\"]))\n```\n\n对模板文件中需要 Markdown 显示的地方增加`custom_markdown`过滤器\n\n```html\n{% load custom_markdown %}\n.\n.\n.\n{{ post.content|custom_markdown }}\n```","slug":"搭建Django博客（5）Markdown语法显示文章","published":1,"updated":"2016-09-07T16:37:31.659Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz485cnx000tkocek2s3g386","content":"<p>安装 Markdown 库</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ pip install markdown2</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>在 blogapp 下建立新文件夹<code>templatetags</code>，然后定义自己的 template filter，在<code>templatetags</code>中新建<code>_init.py</code>, 让文件夹可以被看做一个包，在文件夹中新建<code>custom_markdown.py</code>文件并编辑</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> markdown2</div><div class=\"line\"><span class=\"keyword\">from</span> django <span class=\"keyword\">import</span> template</div><div class=\"line\"><span class=\"keyword\">from</span> django.template.defaultfilters <span class=\"keyword\">import</span> stringfilter</div><div class=\"line\"><span class=\"keyword\">from</span> django.utils.encoding <span class=\"keyword\">import</span> force_text</div><div class=\"line\"><span class=\"keyword\">from</span> django.utils.safestring <span class=\"keyword\">import</span> mark_safe</div><div class=\"line\"></div><div class=\"line\">register = template.Library()</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@register.filter(is_safe=True)</span></div><div class=\"line\"><span class=\"meta\">@stringfilter</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">custom_markdown</span><span class=\"params\">(value)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> mark_safe(markdown2.markdown(force_text(value), extras=[<span class=\"string\">\"fenced-code-blocks\"</span>, <span class=\"string\">\"cuddled-lists\"</span>, <span class=\"string\">\"metadata\"</span>, <span class=\"string\">\"tables\"</span>, <span class=\"string\">\"spoiler\"</span>]))</div></pre></td></tr></table></figure>\n<p>对模板文件中需要 Markdown 显示的地方增加<code>custom_markdown</code>过滤器</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% load custom_markdown %&#125;</div><div class=\"line\">.</div><div class=\"line\">.</div><div class=\"line\">.</div><div class=\"line\">&#123;&#123; post.content|custom_markdown &#125;&#125;</div></pre></td></tr></table></figure>","excerpt":"<p>安装 Markdown 库</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ pip install markdown2</div></pre></td></tr></table></figure>","more":"<p>在 blogapp 下建立新文件夹<code>templatetags</code>，然后定义自己的 template filter，在<code>templatetags</code>中新建<code>_init.py</code>, 让文件夹可以被看做一个包，在文件夹中新建<code>custom_markdown.py</code>文件并编辑</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> markdown2</div><div class=\"line\"><span class=\"keyword\">from</span> django <span class=\"keyword\">import</span> template</div><div class=\"line\"><span class=\"keyword\">from</span> django.template.defaultfilters <span class=\"keyword\">import</span> stringfilter</div><div class=\"line\"><span class=\"keyword\">from</span> django.utils.encoding <span class=\"keyword\">import</span> force_text</div><div class=\"line\"><span class=\"keyword\">from</span> django.utils.safestring <span class=\"keyword\">import</span> mark_safe</div><div class=\"line\"></div><div class=\"line\">register = template.Library()</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@register.filter(is_safe=True)</span></div><div class=\"line\"><span class=\"meta\">@stringfilter</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">custom_markdown</span><span class=\"params\">(value)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> mark_safe(markdown2.markdown(force_text(value), extras=[<span class=\"string\">\"fenced-code-blocks\"</span>, <span class=\"string\">\"cuddled-lists\"</span>, <span class=\"string\">\"metadata\"</span>, <span class=\"string\">\"tables\"</span>, <span class=\"string\">\"spoiler\"</span>]))</div></pre></td></tr></table></figure>\n<p>对模板文件中需要 Markdown 显示的地方增加<code>custom_markdown</code>过滤器</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% load custom_markdown %&#125;</div><div class=\"line\">.</div><div class=\"line\">.</div><div class=\"line\">.</div><div class=\"line\">&#123;&#123; post.content|custom_markdown &#125;&#125;</div></pre></td></tr></table></figure>"},{"title":"搭建Django博客（6）代码高亮及后台Markdown编辑器","date":"2016-09-05T13:32:17.000Z","_content":"\n\n\n# 代码高亮\n\n安装语法高亮库 Pygments\n\n```powershell\n$ pip install Pygments\n```\n\n<!--more-->\n\n\n将 pygments 的 css 主题文件放到七牛云，可享受 CDN 加速，并在 base.html 的`<head>` `</head>`之间加入`<link rel=\"stylesheet\" href=\"http://picturebag.qiniudn.com/monokai.css\">`\n\n```html\n<!doctype html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n<meta name=\"description\" content=\"A layout example that shows off a blog page with a list of posts.\">\n\n    <title>WISH007 Blog</title>\n    <link rel=\"stylesheet\" href=\"http://yui.yahooapis.com/pure/0.5.0/pure-min.css\">\n    <link rel=\"stylesheet\" href=\"http://yui.yahooapis.com/pure/0.5.0/grids-responsive-min.css\">\n    <link rel=\"stylesheet\" href=\"http://picturebag.qiniudn.com/blog.css\">\n    <link rel=\"stylesheet\" href=\"http://picturebag.qiniudn.com/monokai.css\">\n</head>\n```\n\n# 后台 Markdown 编辑器\n\n安装`django-pagedown`编辑器\n\n```powershell\npip3 install django-pagedown\n```\n在`setting.py`的`INSTALLED_APPS`添加`pagedown`\n```python\nINSTALLED_APPS = [\n    'blogapp',\n    'pagedown',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\n```\n\n编辑`admin.py`\n\n```python\nfrom django.contrib import admin\nfrom blogapp.models import Article\nfrom pagedown.widgets import AdminPagedownWidget\nfrom django import forms\n\n# Define your form here.\nclass ArticleForm(forms.ModelForm):\n    content = forms.CharField(widget=AdminPagedownWidget())\n\n    class Meta:\n        model = Article\n        fields = '__all__'\n\nclass ArticleAdmin(admin.ModelAdmin):\n    form = ArticleForm\n\n# Register your models here.\nadmin.site.register(Article,ArticleAdmin)\n```\n后台 Markdown 编辑器效果：\n\n{% asset_img markdown_editor.png %}","source":"_posts/搭建Django博客（6）代码高亮及后台Markdown编辑器.md","raw":"---\ntitle: 搭建Django博客（6）代码高亮及后台Markdown编辑器\ndate: 2016-09-05 21:32:17\ncategories: Django\ntags:\n- Django\n---\n\n\n\n# 代码高亮\n\n安装语法高亮库 Pygments\n\n```powershell\n$ pip install Pygments\n```\n\n<!--more-->\n\n\n将 pygments 的 css 主题文件放到七牛云，可享受 CDN 加速，并在 base.html 的`<head>` `</head>`之间加入`<link rel=\"stylesheet\" href=\"http://picturebag.qiniudn.com/monokai.css\">`\n\n```html\n<!doctype html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n<meta name=\"description\" content=\"A layout example that shows off a blog page with a list of posts.\">\n\n    <title>WISH007 Blog</title>\n    <link rel=\"stylesheet\" href=\"http://yui.yahooapis.com/pure/0.5.0/pure-min.css\">\n    <link rel=\"stylesheet\" href=\"http://yui.yahooapis.com/pure/0.5.0/grids-responsive-min.css\">\n    <link rel=\"stylesheet\" href=\"http://picturebag.qiniudn.com/blog.css\">\n    <link rel=\"stylesheet\" href=\"http://picturebag.qiniudn.com/monokai.css\">\n</head>\n```\n\n# 后台 Markdown 编辑器\n\n安装`django-pagedown`编辑器\n\n```powershell\npip3 install django-pagedown\n```\n在`setting.py`的`INSTALLED_APPS`添加`pagedown`\n```python\nINSTALLED_APPS = [\n    'blogapp',\n    'pagedown',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\n```\n\n编辑`admin.py`\n\n```python\nfrom django.contrib import admin\nfrom blogapp.models import Article\nfrom pagedown.widgets import AdminPagedownWidget\nfrom django import forms\n\n# Define your form here.\nclass ArticleForm(forms.ModelForm):\n    content = forms.CharField(widget=AdminPagedownWidget())\n\n    class Meta:\n        model = Article\n        fields = '__all__'\n\nclass ArticleAdmin(admin.ModelAdmin):\n    form = ArticleForm\n\n# Register your models here.\nadmin.site.register(Article,ArticleAdmin)\n```\n后台 Markdown 编辑器效果：\n\n{% asset_img markdown_editor.png %}","slug":"搭建Django博客（6）代码高亮及后台Markdown编辑器","published":1,"updated":"2017-02-04T12:01:42.117Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz485cny000ukoceasxlttz8","content":"<h1 id=\"代码高亮\"><a href=\"#代码高亮\" class=\"headerlink\" title=\"代码高亮\"></a>代码高亮</h1><p>安装语法高亮库 Pygments</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ pip install Pygments</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>将 pygments 的 css 主题文件放到七牛云，可享受 CDN 加速，并在 base.html 的<code>&lt;head&gt;</code> <code>&lt;/head&gt;</code>之间加入<code>&lt;link rel=&quot;stylesheet&quot; href=&quot;http://picturebag.qiniudn.com/monokai.css&quot;&gt;</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"description\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"A layout example that shows off a blog page with a list of posts.\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>WISH007 Blog<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://yui.yahooapis.com/pure/0.5.0/pure-min.css\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://yui.yahooapis.com/pure/0.5.0/grids-responsive-min.css\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://picturebag.qiniudn.com/blog.css\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://picturebag.qiniudn.com/monokai.css\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div></pre></td></tr></table></figure>\n<h1 id=\"后台-Markdown-编辑器\"><a href=\"#后台-Markdown-编辑器\" class=\"headerlink\" title=\"后台 Markdown 编辑器\"></a>后台 Markdown 编辑器</h1><p>安装<code>django-pagedown</code>编辑器</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip3 install django-pagedown</div></pre></td></tr></table></figure>\n<p>在<code>setting.py</code>的<code>INSTALLED_APPS</code>添加<code>pagedown</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">INSTALLED_APPS = [</div><div class=\"line\">    <span class=\"string\">'blogapp'</span>,</div><div class=\"line\">    <span class=\"string\">'pagedown'</span>,</div><div class=\"line\">    <span class=\"string\">'django.contrib.admin'</span>,</div><div class=\"line\">    <span class=\"string\">'django.contrib.auth'</span>,</div><div class=\"line\">    <span class=\"string\">'django.contrib.contenttypes'</span>,</div><div class=\"line\">    <span class=\"string\">'django.contrib.sessions'</span>,</div><div class=\"line\">    <span class=\"string\">'django.contrib.messages'</span>,</div><div class=\"line\">    <span class=\"string\">'django.contrib.staticfiles'</span>,</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<p>编辑<code>admin.py</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.contrib <span class=\"keyword\">import</span> admin</div><div class=\"line\"><span class=\"keyword\">from</span> blogapp.models <span class=\"keyword\">import</span> Article</div><div class=\"line\"><span class=\"keyword\">from</span> pagedown.widgets <span class=\"keyword\">import</span> AdminPagedownWidget</div><div class=\"line\"><span class=\"keyword\">from</span> django <span class=\"keyword\">import</span> forms</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Define your form here.</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArticleForm</span><span class=\"params\">(forms.ModelForm)</span>:</span></div><div class=\"line\">    content = forms.CharField(widget=AdminPagedownWidget())</div><div class=\"line\"></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        model = Article</div><div class=\"line\">        fields = <span class=\"string\">'__all__'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArticleAdmin</span><span class=\"params\">(admin.ModelAdmin)</span>:</span></div><div class=\"line\">    form = ArticleForm</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Register your models here.</span></div><div class=\"line\">admin.site.register(Article,ArticleAdmin)</div></pre></td></tr></table></figure>\n<p>后台 Markdown 编辑器效果：</p>\n<img src=\"/2016/09/05/搭建Django博客（6）代码高亮及后台Markdown编辑器/markdown_editor.png\" alt=\"markdown_editor.png\" title=\"\">","excerpt":"<h1 id=\"代码高亮\"><a href=\"#代码高亮\" class=\"headerlink\" title=\"代码高亮\"></a>代码高亮</h1><p>安装语法高亮库 Pygments</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ pip install Pygments</div></pre></td></tr></table></figure>","more":"<p>将 pygments 的 css 主题文件放到七牛云，可享受 CDN 加速，并在 base.html 的<code>&lt;head&gt;</code> <code>&lt;/head&gt;</code>之间加入<code>&lt;link rel=&quot;stylesheet&quot; href=&quot;http://picturebag.qiniudn.com/monokai.css&quot;&gt;</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"description\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"A layout example that shows off a blog page with a list of posts.\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>WISH007 Blog<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://yui.yahooapis.com/pure/0.5.0/pure-min.css\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://yui.yahooapis.com/pure/0.5.0/grids-responsive-min.css\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://picturebag.qiniudn.com/blog.css\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://picturebag.qiniudn.com/monokai.css\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div></pre></td></tr></table></figure>\n<h1 id=\"后台-Markdown-编辑器\"><a href=\"#后台-Markdown-编辑器\" class=\"headerlink\" title=\"后台 Markdown 编辑器\"></a>后台 Markdown 编辑器</h1><p>安装<code>django-pagedown</code>编辑器</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip3 install django-pagedown</div></pre></td></tr></table></figure>\n<p>在<code>setting.py</code>的<code>INSTALLED_APPS</code>添加<code>pagedown</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">INSTALLED_APPS = [</div><div class=\"line\">    <span class=\"string\">'blogapp'</span>,</div><div class=\"line\">    <span class=\"string\">'pagedown'</span>,</div><div class=\"line\">    <span class=\"string\">'django.contrib.admin'</span>,</div><div class=\"line\">    <span class=\"string\">'django.contrib.auth'</span>,</div><div class=\"line\">    <span class=\"string\">'django.contrib.contenttypes'</span>,</div><div class=\"line\">    <span class=\"string\">'django.contrib.sessions'</span>,</div><div class=\"line\">    <span class=\"string\">'django.contrib.messages'</span>,</div><div class=\"line\">    <span class=\"string\">'django.contrib.staticfiles'</span>,</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<p>编辑<code>admin.py</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.contrib <span class=\"keyword\">import</span> admin</div><div class=\"line\"><span class=\"keyword\">from</span> blogapp.models <span class=\"keyword\">import</span> Article</div><div class=\"line\"><span class=\"keyword\">from</span> pagedown.widgets <span class=\"keyword\">import</span> AdminPagedownWidget</div><div class=\"line\"><span class=\"keyword\">from</span> django <span class=\"keyword\">import</span> forms</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Define your form here.</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArticleForm</span><span class=\"params\">(forms.ModelForm)</span>:</span></div><div class=\"line\">    content = forms.CharField(widget=AdminPagedownWidget())</div><div class=\"line\"></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        model = Article</div><div class=\"line\">        fields = <span class=\"string\">'__all__'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArticleAdmin</span><span class=\"params\">(admin.ModelAdmin)</span>:</span></div><div class=\"line\">    form = ArticleForm</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Register your models here.</span></div><div class=\"line\">admin.site.register(Article,ArticleAdmin)</div></pre></td></tr></table></figure>\n<p>后台 Markdown 编辑器效果：</p>\n<img src=\"/2016/09/05/搭建Django博客（6）代码高亮及后台Markdown编辑器/markdown_editor.png\" alt=\"markdown_editor.png\" title=\"\">"},{"title":"搭建Django博客（8）部署Django博客到VPS","date":"2017-02-02T04:08:20.000Z","_content":"\n\n\n\n\n本项目采用三层架构部署，Nginx 作为反向代理服务器，WSGI 层使用 [uWSGI](http://uwsgi-docs-cn.readthedocs.io/zh_CN/latest/WSGIquickstart.html)，Web 应用为 Django；同时，使用  Supervisor 进程守护工具守护 uWSGI 进程。\n\n{% asset_img deploy.png Nginx + uWSGI + Django + Supervisor %}\n\n\n# 项目地址\n\n[GitHub - wish007/django_blog](https://github.com/wish007/django_blog)\n\n<!--more-->\n\n\n# 准备工作\n\n在开发阶段，调试模式处于打开状态可以方便我们调试，但部署到生产环境显然不能这么做，必须对 Django 项目设置文件`settings.py`做些修改，提升系统安全性：\n\n```python\nSECRET_KEY = 'This is a secret key!'  -->\nSECRET_KEY = 'sqDZl^NeQ7SB1wJqeDoxhpf8RnTA1hMhJd5NQApcLizIx*!GRe'  \n# 此项修改尤为重要，自行生成一串足够长和复杂的 KEY，如果你把项目代码放到 GitHub，也记得要在生产环境修改此字段\n\nDEBUG = True --> DEBUG = False  #关闭调试模式\nALLOWED_HOSTS = [] --> ALLOWED_HOSTS = ['*']  #允许所有IP访问，否则他人无法访问\n```\n\n开发阶段，调试模式开启时 Django 会自动找到项目的静态文件来响应请求，关闭后 Django 将不处理对静态文件的请求，对这些请求返回 404 错误；部署到线上时，Nginx 会处理对静态文件的请求，所以必须将项目涉及到的静态文件搜集起来。在`settings.py`文件中添加`STATIC_ROOT`字段，设置搜集起来的静态文件的保存目录：\n\n```python\nSTATIC_ROOT = os.path.join(BASE_DIR, \"static\")\n```\n\n执行搜集静态文件的命令：\n\n```bash\npython manage.py collectstatic\n```\n\n在项目根目录下将生产一个`static`文件夹，里面保存了项目用到的所有静态文件。\n\n创建运行环境依赖文件`requirements.txt`:\n\n```bash\npip freeze > requirements.txt\n```\n\n\n\n# 正式部署\n\n\n\n## 创建运行环境\n\n首先，将项目所有的文件导入服务器用户目录 /home/sun/django_blog，创建运行环境：\n\n```bash\ncd /home/sun/django_blog\nvirtualenv venv\nsource venv/bin/activate\npip install -r requirements.txt\n```\n\n\n\n##  创建数据库\n\n原项目里的数据库文件可以保留，跳过这一步也没问题；如果不保留原有数据库，可以按下面步骤重新创建数据库并导入数据结构：\n\n生成数据库文件：\n\n```bash\npython manage.py runserver \n```\n\n生成数据结构迁移文件：\n\n```bash\npython manage.py makemigrations\n```\n\n将数据结构写入数据库：\n\n```bash\npython manage.py migrate\n```\n\n创建管理员账号：\n\n```bash\npython manage.py createsuperuser\n```\n\n运行 Django：\n\n```bash\ncd /home/sun/django_blog\nsource venv/bin/activate\npython manage.py runserver\n```\n\n测试输出是否正常：\n\n```bash\ncurl http://127.0.0.1:8000\n```\n\n\n\n##  配置uWSGI\n\n安装 uWSGI\n\n```bash\npip install uwsgi\n```\n\n配置 uWSGI\n\n> 在 Django 项目目录下新建 uWSGI 配置文件 uwsgi_config.ini 并输入\n\n```bash\n[uwsgi]\n\n# Django-related settings\nchdir = /home/sun/django_blog\nhome = /home/sun/django_blog/venv\nmodule = myblog.wsgi\n\n# process-related settings\nmaster = true\nsocket = 127.0.0.1:8000\nprocesses = 4\nthreads = 2\nbuffer-size = 32768\n```\n\n启动 uWSGI\n\n```bash\n(venv) [sun@SS django_blog]$ uwsgi uwsgi_config.ini\n```\n\n\n\n## 配置Nginx\n\n安装 Nginx\n\n```bash\nyum install nginx\n```\n\n配置 Nginx\n\n> 配置文件目录：/etc/nginx/conf.d 目录下的 default.conf\n>\n> 即使已经有监听同一个端口的应用，也可以直接添加另一个应用，因为他们的`server_name`不同，Nginx 会自动处理好不同站点的转发。\n\n```bash\nserver { \n  listen 80; \n  server_name xx.xx.xx.xx; #公网地址 \n  location / { \n  include uwsgi_params;\n  uwsgi_pass 127.0.0.1:8000; # 指向uwsgi 所应用的内部地址,所有请求将转发给uwsgi 处理 \n  uwsgi_param UWSGI_PYHOME /home/sun/env/django_blog; # 指向虚拟环境目录 \n  uwsgi_param UWSGI_CHDIR /home/sun/django_blog; # 指向网站根目录 \n  uwsgi_param UWSGI_SCRIPT manage:app; # 指定启动程序\n  uwsgi_read_timeout 100; \n }\n  location /static/ {  #转发对静态文件的请求\n  root /home/sun/django_blog;  #必须填 static 文件夹所在目录\n}\n}\n```\n\n启动 Nginx：\n\n```bash\nservice nginx start\n```\n\nNginx 相关命令：\n\n```bash\n# 关闭 Nginx\nservice nginx stop\n\n# 重启 Nginx\nservice nginx restart\n```\n\n\n\n## 配置Supervisor\n\n> [Supervisor](http://supervisord.org/) 有两个主要的组成部分：\n>\n> 1. supervisord\n>\n>    它是 Supervisor 的服务端，运行 Supervisor 时会启动一个 supervisord 进程，负责启动所管理的进程，并将所管理的进程作为自己的子进程来启动，将普通的命令行进程变为后台daemon，响应客户端命令、监控进程状态、自动重启 crashed 掉的子进程、记录子进程的 stdout、stderr 等。\n>\n> 2. supervisorctl\n>\n>    它是 Supervisor 的客户端，提供了 shell-like 接口来调用 supervisord，通过 supervisorctl 用户可以连接到多个 supervisord 进程，获取supervisord 所管理的子进程状态，可以执行 stop、start、restart 等命令来管理这些子进程。\n\n安装完 uWSGI、Nginx 后，Nginx 可以直接设置开机启动，但 uWSGI 还不能直接开机启动，这里我用 Supervisor 来启动并守护  uWSGI 运行，在全局 Python 环境安装 Supervisor：\n\n```bash\npip install supervisor\n```\n\n配置 Supervisor：\n\n> 配置文件目录：/etc/supervisord.conf\n\n```bash\n[program:django_blog]\n# 启动命令入口\ncommand=/home/sun/env/django_blog/bin/uwsgi /home/sun/django_blog/uwsgi_config.ini\n# 命令程序所在目录\ndirectory=/home/sun/django_blog\nuser=sun\nautostart=true\nautorestart=true\nstartsecs=10\nstartretries=10\n#日志地址\nstdout_logfile=/home/sun/django_blog/uwsgi_supervisor.log\nstdout_logfile_maxbytes = 50MB\nstderr_logfile=/home/sun/django_blog/uwsgi_err.log\nstderr_logfile_maxbytes = 50MB\n```\n\n设置 supervisord 开机启动\n\n```bash\nchkconfig --add supervisord\nchkconfig supervisord on\n```\n启动 supervisord\n\n```bash\nservice supervisord start\n```\n查看 django_blog 进程是否运行\n\n```bash\nsupervisorctl status\n# 输出 RUNNING 说明子进程成功运行\ndjango_blog    RUNNING   pid 17168, uptime 0:03:25\n```\n\n\n\nsupervisord 相关命令\n\n```bash\n# 重启 supervisord 进程\nservice supervisord restart\n\n# 停止 supervisord 进程\nservice supervisord stop\n\n# 注意：supervisord 重启或停止后，uwsgi 进程会不受 supervisord 控制，必须手动 kill 掉 uwsgi 进程后再启动 supervisord 进程\n```\n\nsupervisorctl 相关命令\n\n```bash\n# 启动某个进程，program_name 为 [program:x] 里的 x\nsupervisorctl start program_name\n# 停止某个进程\nsupervisorctl stop program_name\n# 重启某个进程\nsupervisorctl restart program_name\n\n# 结束所有属于名为 groupworker 这个分组的进程 (start，restart 同理)\nsupervisorctl stop groupworker:\n# 结束 groupworker:name1 这个进程 (start，restart 同理)\nsupervisorctl stop groupworker:name1\n# 停止全部进程，注意：start、restart、stop 都不会载入最新的配置文件\nsupervisorctl stop all\n\n# 停止所有进程并按新的配置启动所有进程\nsupervisorctl reload\n# 重启配置有改动的进程，启动配置中新加入的进程，配置没有改动的进程会保持原有的启动或停止状态\nsupervisorctl update\n```\n\n\n\n\n\n# Django静态文件处理\n\n根据上面的步骤，一般能成功运行起来 Django，主页面的访问也没问题。\n\n当打开 Django 管理页面 `公网IP:端口/admin`，发现登录页面的样式丢失了，查看网页源代码，发现点击静态文件会产生 403 错误的返回，说明服务器收到了请求但拒绝处理请求，信息是 Nginx 服务器返回的，接着想到查看 Nginx 日志，打开 /var/log/nginx/error.log 文件，发现有这样的错误：\n\n```bash\n2017/02/03 13:05:27 [error] 31497#0: *1 open() \"/home/sun/django_blog/static/admin/css/login.css\" failed (13: Permission denied), client: 12.56.11.158, server: xx.xx.xx.xx, request: \"GET /static/admin/css/login.css HTTP/1.1\", host: \"xx.xx.xx.xx\"\n```\n\n说明打开静态文件失败是由于`Permission denied`产生的，很可能与 Nginx 进程的权限和静态文件的权限有关，打开 Nginx 配置文件 /etc/nginx/nginx.conf ：\n\n```bash\nuser nginx;\nworker_processes auto;\nerror_log /var/log/nginx/error.log;\npid /var/run/nginx.pid;\n```\n\n发现 Nginx worker process 是以 nginx 用户启动的，将 worker 启动用户改为 django_blog/static/ 目录所有者用户相同：\n\n```bash\nuser nginx --> user sun\n```\n\n重启 Nginx 进程\n\n```bash\nservice nginx restart\n```\n\nDjango 管理页面的样式恢复了。\n\n\n\n参考：[nginx+django+uwsgi static files 403 Forbidden](http://stackoverflow.com/questions/28732692/nginxdjangouwsgi-static-files-403-forbidden)\n\n\n\n\n\n# 进阶阅读\n\n[利用 NGINX 最大化 Python 性能  第一部分：Web 服务和缓存](http://www.ituring.com.cn/article/214859)\n\n[利用 NGINX 最大化 Python 性能  第二部分：负载均衡和监控](http://www.ituring.com.cn/article/215554)","source":"_posts/搭建Django博客（8）部署Django博客到VPS.md","raw":"---\ntitle: 搭建Django博客（8）部署Django博客到VPS\ncategories:\n  - Django\ntags:\n  - Django\n  - VPS\n  - Linux\n  - Nginx\n  - WSGI\n  - uWSGI\n  - supervisor\ndate: 2017-02-02 12:08:20\n---\n\n\n\n\n\n本项目采用三层架构部署，Nginx 作为反向代理服务器，WSGI 层使用 [uWSGI](http://uwsgi-docs-cn.readthedocs.io/zh_CN/latest/WSGIquickstart.html)，Web 应用为 Django；同时，使用  Supervisor 进程守护工具守护 uWSGI 进程。\n\n{% asset_img deploy.png Nginx + uWSGI + Django + Supervisor %}\n\n\n# 项目地址\n\n[GitHub - wish007/django_blog](https://github.com/wish007/django_blog)\n\n<!--more-->\n\n\n# 准备工作\n\n在开发阶段，调试模式处于打开状态可以方便我们调试，但部署到生产环境显然不能这么做，必须对 Django 项目设置文件`settings.py`做些修改，提升系统安全性：\n\n```python\nSECRET_KEY = 'This is a secret key!'  -->\nSECRET_KEY = 'sqDZl^NeQ7SB1wJqeDoxhpf8RnTA1hMhJd5NQApcLizIx*!GRe'  \n# 此项修改尤为重要，自行生成一串足够长和复杂的 KEY，如果你把项目代码放到 GitHub，也记得要在生产环境修改此字段\n\nDEBUG = True --> DEBUG = False  #关闭调试模式\nALLOWED_HOSTS = [] --> ALLOWED_HOSTS = ['*']  #允许所有IP访问，否则他人无法访问\n```\n\n开发阶段，调试模式开启时 Django 会自动找到项目的静态文件来响应请求，关闭后 Django 将不处理对静态文件的请求，对这些请求返回 404 错误；部署到线上时，Nginx 会处理对静态文件的请求，所以必须将项目涉及到的静态文件搜集起来。在`settings.py`文件中添加`STATIC_ROOT`字段，设置搜集起来的静态文件的保存目录：\n\n```python\nSTATIC_ROOT = os.path.join(BASE_DIR, \"static\")\n```\n\n执行搜集静态文件的命令：\n\n```bash\npython manage.py collectstatic\n```\n\n在项目根目录下将生产一个`static`文件夹，里面保存了项目用到的所有静态文件。\n\n创建运行环境依赖文件`requirements.txt`:\n\n```bash\npip freeze > requirements.txt\n```\n\n\n\n# 正式部署\n\n\n\n## 创建运行环境\n\n首先，将项目所有的文件导入服务器用户目录 /home/sun/django_blog，创建运行环境：\n\n```bash\ncd /home/sun/django_blog\nvirtualenv venv\nsource venv/bin/activate\npip install -r requirements.txt\n```\n\n\n\n##  创建数据库\n\n原项目里的数据库文件可以保留，跳过这一步也没问题；如果不保留原有数据库，可以按下面步骤重新创建数据库并导入数据结构：\n\n生成数据库文件：\n\n```bash\npython manage.py runserver \n```\n\n生成数据结构迁移文件：\n\n```bash\npython manage.py makemigrations\n```\n\n将数据结构写入数据库：\n\n```bash\npython manage.py migrate\n```\n\n创建管理员账号：\n\n```bash\npython manage.py createsuperuser\n```\n\n运行 Django：\n\n```bash\ncd /home/sun/django_blog\nsource venv/bin/activate\npython manage.py runserver\n```\n\n测试输出是否正常：\n\n```bash\ncurl http://127.0.0.1:8000\n```\n\n\n\n##  配置uWSGI\n\n安装 uWSGI\n\n```bash\npip install uwsgi\n```\n\n配置 uWSGI\n\n> 在 Django 项目目录下新建 uWSGI 配置文件 uwsgi_config.ini 并输入\n\n```bash\n[uwsgi]\n\n# Django-related settings\nchdir = /home/sun/django_blog\nhome = /home/sun/django_blog/venv\nmodule = myblog.wsgi\n\n# process-related settings\nmaster = true\nsocket = 127.0.0.1:8000\nprocesses = 4\nthreads = 2\nbuffer-size = 32768\n```\n\n启动 uWSGI\n\n```bash\n(venv) [sun@SS django_blog]$ uwsgi uwsgi_config.ini\n```\n\n\n\n## 配置Nginx\n\n安装 Nginx\n\n```bash\nyum install nginx\n```\n\n配置 Nginx\n\n> 配置文件目录：/etc/nginx/conf.d 目录下的 default.conf\n>\n> 即使已经有监听同一个端口的应用，也可以直接添加另一个应用，因为他们的`server_name`不同，Nginx 会自动处理好不同站点的转发。\n\n```bash\nserver { \n  listen 80; \n  server_name xx.xx.xx.xx; #公网地址 \n  location / { \n  include uwsgi_params;\n  uwsgi_pass 127.0.0.1:8000; # 指向uwsgi 所应用的内部地址,所有请求将转发给uwsgi 处理 \n  uwsgi_param UWSGI_PYHOME /home/sun/env/django_blog; # 指向虚拟环境目录 \n  uwsgi_param UWSGI_CHDIR /home/sun/django_blog; # 指向网站根目录 \n  uwsgi_param UWSGI_SCRIPT manage:app; # 指定启动程序\n  uwsgi_read_timeout 100; \n }\n  location /static/ {  #转发对静态文件的请求\n  root /home/sun/django_blog;  #必须填 static 文件夹所在目录\n}\n}\n```\n\n启动 Nginx：\n\n```bash\nservice nginx start\n```\n\nNginx 相关命令：\n\n```bash\n# 关闭 Nginx\nservice nginx stop\n\n# 重启 Nginx\nservice nginx restart\n```\n\n\n\n## 配置Supervisor\n\n> [Supervisor](http://supervisord.org/) 有两个主要的组成部分：\n>\n> 1. supervisord\n>\n>    它是 Supervisor 的服务端，运行 Supervisor 时会启动一个 supervisord 进程，负责启动所管理的进程，并将所管理的进程作为自己的子进程来启动，将普通的命令行进程变为后台daemon，响应客户端命令、监控进程状态、自动重启 crashed 掉的子进程、记录子进程的 stdout、stderr 等。\n>\n> 2. supervisorctl\n>\n>    它是 Supervisor 的客户端，提供了 shell-like 接口来调用 supervisord，通过 supervisorctl 用户可以连接到多个 supervisord 进程，获取supervisord 所管理的子进程状态，可以执行 stop、start、restart 等命令来管理这些子进程。\n\n安装完 uWSGI、Nginx 后，Nginx 可以直接设置开机启动，但 uWSGI 还不能直接开机启动，这里我用 Supervisor 来启动并守护  uWSGI 运行，在全局 Python 环境安装 Supervisor：\n\n```bash\npip install supervisor\n```\n\n配置 Supervisor：\n\n> 配置文件目录：/etc/supervisord.conf\n\n```bash\n[program:django_blog]\n# 启动命令入口\ncommand=/home/sun/env/django_blog/bin/uwsgi /home/sun/django_blog/uwsgi_config.ini\n# 命令程序所在目录\ndirectory=/home/sun/django_blog\nuser=sun\nautostart=true\nautorestart=true\nstartsecs=10\nstartretries=10\n#日志地址\nstdout_logfile=/home/sun/django_blog/uwsgi_supervisor.log\nstdout_logfile_maxbytes = 50MB\nstderr_logfile=/home/sun/django_blog/uwsgi_err.log\nstderr_logfile_maxbytes = 50MB\n```\n\n设置 supervisord 开机启动\n\n```bash\nchkconfig --add supervisord\nchkconfig supervisord on\n```\n启动 supervisord\n\n```bash\nservice supervisord start\n```\n查看 django_blog 进程是否运行\n\n```bash\nsupervisorctl status\n# 输出 RUNNING 说明子进程成功运行\ndjango_blog    RUNNING   pid 17168, uptime 0:03:25\n```\n\n\n\nsupervisord 相关命令\n\n```bash\n# 重启 supervisord 进程\nservice supervisord restart\n\n# 停止 supervisord 进程\nservice supervisord stop\n\n# 注意：supervisord 重启或停止后，uwsgi 进程会不受 supervisord 控制，必须手动 kill 掉 uwsgi 进程后再启动 supervisord 进程\n```\n\nsupervisorctl 相关命令\n\n```bash\n# 启动某个进程，program_name 为 [program:x] 里的 x\nsupervisorctl start program_name\n# 停止某个进程\nsupervisorctl stop program_name\n# 重启某个进程\nsupervisorctl restart program_name\n\n# 结束所有属于名为 groupworker 这个分组的进程 (start，restart 同理)\nsupervisorctl stop groupworker:\n# 结束 groupworker:name1 这个进程 (start，restart 同理)\nsupervisorctl stop groupworker:name1\n# 停止全部进程，注意：start、restart、stop 都不会载入最新的配置文件\nsupervisorctl stop all\n\n# 停止所有进程并按新的配置启动所有进程\nsupervisorctl reload\n# 重启配置有改动的进程，启动配置中新加入的进程，配置没有改动的进程会保持原有的启动或停止状态\nsupervisorctl update\n```\n\n\n\n\n\n# Django静态文件处理\n\n根据上面的步骤，一般能成功运行起来 Django，主页面的访问也没问题。\n\n当打开 Django 管理页面 `公网IP:端口/admin`，发现登录页面的样式丢失了，查看网页源代码，发现点击静态文件会产生 403 错误的返回，说明服务器收到了请求但拒绝处理请求，信息是 Nginx 服务器返回的，接着想到查看 Nginx 日志，打开 /var/log/nginx/error.log 文件，发现有这样的错误：\n\n```bash\n2017/02/03 13:05:27 [error] 31497#0: *1 open() \"/home/sun/django_blog/static/admin/css/login.css\" failed (13: Permission denied), client: 12.56.11.158, server: xx.xx.xx.xx, request: \"GET /static/admin/css/login.css HTTP/1.1\", host: \"xx.xx.xx.xx\"\n```\n\n说明打开静态文件失败是由于`Permission denied`产生的，很可能与 Nginx 进程的权限和静态文件的权限有关，打开 Nginx 配置文件 /etc/nginx/nginx.conf ：\n\n```bash\nuser nginx;\nworker_processes auto;\nerror_log /var/log/nginx/error.log;\npid /var/run/nginx.pid;\n```\n\n发现 Nginx worker process 是以 nginx 用户启动的，将 worker 启动用户改为 django_blog/static/ 目录所有者用户相同：\n\n```bash\nuser nginx --> user sun\n```\n\n重启 Nginx 进程\n\n```bash\nservice nginx restart\n```\n\nDjango 管理页面的样式恢复了。\n\n\n\n参考：[nginx+django+uwsgi static files 403 Forbidden](http://stackoverflow.com/questions/28732692/nginxdjangouwsgi-static-files-403-forbidden)\n\n\n\n\n\n# 进阶阅读\n\n[利用 NGINX 最大化 Python 性能  第一部分：Web 服务和缓存](http://www.ituring.com.cn/article/214859)\n\n[利用 NGINX 最大化 Python 性能  第二部分：负载均衡和监控](http://www.ituring.com.cn/article/215554)","slug":"搭建Django博客（8）部署Django博客到VPS","published":1,"updated":"2017-02-13T15:06:07.354Z","_id":"ciz485co0000xkocezf3749zz","comments":1,"layout":"post","photos":[],"link":"","content":"<p>本项目采用三层架构部署，Nginx 作为反向代理服务器，WSGI 层使用 <a href=\"http://uwsgi-docs-cn.readthedocs.io/zh_CN/latest/WSGIquickstart.html\" target=\"_blank\" rel=\"external\">uWSGI</a>，Web 应用为 Django；同时，使用  Supervisor 进程守护工具守护 uWSGI 进程。</p>\n<img src=\"/2017/02/02/搭建Django博客（8）部署Django博客到VPS/deploy.png\" alt=\"Nginx + uWSGI + Django + Supervisor\" title=\"Nginx + uWSGI + Django + Supervisor\">\n<h1 id=\"项目地址\"><a href=\"#项目地址\" class=\"headerlink\" title=\"项目地址\"></a>项目地址</h1><p><a href=\"https://github.com/wish007/django_blog\" target=\"_blank\" rel=\"external\">GitHub - wish007/django_blog</a></p>\n<a id=\"more\"></a>\n<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><p>在开发阶段，调试模式处于打开状态可以方便我们调试，但部署到生产环境显然不能这么做，必须对 Django 项目设置文件<code>settings.py</code>做些修改，提升系统安全性：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">SECRET_KEY = 'This is a secret key!'  --&gt;</div><div class=\"line\">SECRET_KEY = 'sqDZl^NeQ7SB1wJqeDoxhpf8RnTA1hMhJd5NQApcLizIx*!GRe'  </div><div class=\"line\"># 此项修改尤为重要，自行生成一串足够长和复杂的 KEY，如果你把项目代码放到 GitHub，也记得要在生产环境修改此字段</div><div class=\"line\"></div><div class=\"line\">DEBUG = True --&gt; DEBUG = False  #关闭调试模式</div><div class=\"line\">ALLOWED_HOSTS = [] --&gt; ALLOWED_HOSTS = ['*']  #允许所有IP访问，否则他人无法访问</div></pre></td></tr></table></figure>\n<p>开发阶段，调试模式开启时 Django 会自动找到项目的静态文件来响应请求，关闭后 Django 将不处理对静态文件的请求，对这些请求返回 404 错误；部署到线上时，Nginx 会处理对静态文件的请求，所以必须将项目涉及到的静态文件搜集起来。在<code>settings.py</code>文件中添加<code>STATIC_ROOT</code>字段，设置搜集起来的静态文件的保存目录：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">STATIC_ROOT = os.path.join(BASE_DIR, <span class=\"string\">\"static\"</span>)</div></pre></td></tr></table></figure>\n<p>执行搜集静态文件的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python manage.py collectstatic</div></pre></td></tr></table></figure>\n<p>在项目根目录下将生产一个<code>static</code>文件夹，里面保存了项目用到的所有静态文件。</p>\n<p>创建运行环境依赖文件<code>requirements.txt</code>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip freeze &gt; requirements.txt</div></pre></td></tr></table></figure>\n<h1 id=\"正式部署\"><a href=\"#正式部署\" class=\"headerlink\" title=\"正式部署\"></a>正式部署</h1><h2 id=\"创建运行环境\"><a href=\"#创建运行环境\" class=\"headerlink\" title=\"创建运行环境\"></a>创建运行环境</h2><p>首先，将项目所有的文件导入服务器用户目录 /home/sun/django_blog，创建运行环境：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> /home/sun/django_blog</div><div class=\"line\">virtualenv venv</div><div class=\"line\"><span class=\"built_in\">source</span> venv/bin/activate</div><div class=\"line\">pip install -r requirements.txt</div></pre></td></tr></table></figure>\n<h2 id=\"创建数据库\"><a href=\"#创建数据库\" class=\"headerlink\" title=\"创建数据库\"></a>创建数据库</h2><p>原项目里的数据库文件可以保留，跳过这一步也没问题；如果不保留原有数据库，可以按下面步骤重新创建数据库并导入数据结构：</p>\n<p>生成数据库文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python manage.py runserver</div></pre></td></tr></table></figure>\n<p>生成数据结构迁移文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python manage.py makemigrations</div></pre></td></tr></table></figure>\n<p>将数据结构写入数据库：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python manage.py migrate</div></pre></td></tr></table></figure>\n<p>创建管理员账号：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python manage.py createsuperuser</div></pre></td></tr></table></figure>\n<p>运行 Django：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> /home/sun/django_blog</div><div class=\"line\"><span class=\"built_in\">source</span> venv/bin/activate</div><div class=\"line\">python manage.py runserver</div></pre></td></tr></table></figure>\n<p>测试输出是否正常：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl http://127.0.0.1:8000</div></pre></td></tr></table></figure>\n<h2 id=\"配置uWSGI\"><a href=\"#配置uWSGI\" class=\"headerlink\" title=\"配置uWSGI\"></a>配置uWSGI</h2><p>安装 uWSGI</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install uwsgi</div></pre></td></tr></table></figure>\n<p>配置 uWSGI</p>\n<blockquote>\n<p>在 Django 项目目录下新建 uWSGI 配置文件 uwsgi_config.ini 并输入</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">[uwsgi]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Django-related settings</span></div><div class=\"line\"><span class=\"built_in\">chdir</span> = /home/sun/django_blog</div><div class=\"line\">home = /home/sun/django_blog/venv</div><div class=\"line\">module = myblog.wsgi</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># process-related settings</span></div><div class=\"line\">master = <span class=\"literal\">true</span></div><div class=\"line\">socket = 127.0.0.1:8000</div><div class=\"line\">processes = 4</div><div class=\"line\">threads = 2</div><div class=\"line\">buffer-size = 32768</div></pre></td></tr></table></figure>\n<p>启动 uWSGI</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(venv) [sun@SS django_blog]$ uwsgi uwsgi_config.ini</div></pre></td></tr></table></figure>\n<h2 id=\"配置Nginx\"><a href=\"#配置Nginx\" class=\"headerlink\" title=\"配置Nginx\"></a>配置Nginx</h2><p>安装 Nginx</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install nginx</div></pre></td></tr></table></figure>\n<p>配置 Nginx</p>\n<blockquote>\n<p>配置文件目录：/etc/nginx/conf.d 目录下的 default.conf</p>\n<p>即使已经有监听同一个端口的应用，也可以直接添加另一个应用，因为他们的<code>server_name</code>不同，Nginx 会自动处理好不同站点的转发。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123; </div><div class=\"line\">  listen 80; </div><div class=\"line\">  server_name xx.xx.xx.xx; <span class=\"comment\">#公网地址 </span></div><div class=\"line\">  location / &#123; </div><div class=\"line\">  include uwsgi_params;</div><div class=\"line\">  uwsgi_pass 127.0.0.1:8000; <span class=\"comment\"># 指向uwsgi 所应用的内部地址,所有请求将转发给uwsgi 处理 </span></div><div class=\"line\">  uwsgi_param UWSGI_PYHOME /home/sun/env/django_blog; <span class=\"comment\"># 指向虚拟环境目录 </span></div><div class=\"line\">  uwsgi_param UWSGI_CHDIR /home/sun/django_blog; <span class=\"comment\"># 指向网站根目录 </span></div><div class=\"line\">  uwsgi_param UWSGI_SCRIPT manage:app; <span class=\"comment\"># 指定启动程序</span></div><div class=\"line\">  uwsgi_read_timeout 100; </div><div class=\"line\"> &#125;</div><div class=\"line\">  location /static/ &#123;  <span class=\"comment\">#转发对静态文件的请求</span></div><div class=\"line\">  root /home/sun/django_blog;  <span class=\"comment\">#必须填 static 文件夹所在目录</span></div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>启动 Nginx：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service nginx start</div></pre></td></tr></table></figure>\n<p>Nginx 相关命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 关闭 Nginx</span></div><div class=\"line\">service nginx stop</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 重启 Nginx</span></div><div class=\"line\">service nginx restart</div></pre></td></tr></table></figure>\n<h2 id=\"配置Supervisor\"><a href=\"#配置Supervisor\" class=\"headerlink\" title=\"配置Supervisor\"></a>配置Supervisor</h2><blockquote>\n<p><a href=\"http://supervisord.org/\" target=\"_blank\" rel=\"external\">Supervisor</a> 有两个主要的组成部分：</p>\n<ol>\n<li><p>supervisord</p>\n<p>它是 Supervisor 的服务端，运行 Supervisor 时会启动一个 supervisord 进程，负责启动所管理的进程，并将所管理的进程作为自己的子进程来启动，将普通的命令行进程变为后台daemon，响应客户端命令、监控进程状态、自动重启 crashed 掉的子进程、记录子进程的 stdout、stderr 等。</p>\n</li>\n<li><p>supervisorctl</p>\n<p>它是 Supervisor 的客户端，提供了 shell-like 接口来调用 supervisord，通过 supervisorctl 用户可以连接到多个 supervisord 进程，获取supervisord 所管理的子进程状态，可以执行 stop、start、restart 等命令来管理这些子进程。</p>\n</li>\n</ol>\n</blockquote>\n<p>安装完 uWSGI、Nginx 后，Nginx 可以直接设置开机启动，但 uWSGI 还不能直接开机启动，这里我用 Supervisor 来启动并守护  uWSGI 运行，在全局 Python 环境安装 Supervisor：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install supervisor</div></pre></td></tr></table></figure>\n<p>配置 Supervisor：</p>\n<blockquote>\n<p>配置文件目录：/etc/supervisord.conf</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">[program:django_blog]</div><div class=\"line\"><span class=\"comment\"># 启动命令入口</span></div><div class=\"line\"><span class=\"built_in\">command</span>=/home/sun/env/django_blog/bin/uwsgi /home/sun/django_blog/uwsgi_config.ini</div><div class=\"line\"><span class=\"comment\"># 命令程序所在目录</span></div><div class=\"line\">directory=/home/sun/django_blog</div><div class=\"line\">user=sun</div><div class=\"line\">autostart=<span class=\"literal\">true</span></div><div class=\"line\">autorestart=<span class=\"literal\">true</span></div><div class=\"line\">startsecs=10</div><div class=\"line\">startretries=10</div><div class=\"line\"><span class=\"comment\">#日志地址</span></div><div class=\"line\">stdout_logfile=/home/sun/django_blog/uwsgi_supervisor.log</div><div class=\"line\">stdout_logfile_maxbytes = 50MB</div><div class=\"line\">stderr_logfile=/home/sun/django_blog/uwsgi_err.log</div><div class=\"line\">stderr_logfile_maxbytes = 50MB</div></pre></td></tr></table></figure>\n<p>设置 supervisord 开机启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">chkconfig --add supervisord</div><div class=\"line\">chkconfig supervisord on</div></pre></td></tr></table></figure>\n<p>启动 supervisord</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service supervisord start</div></pre></td></tr></table></figure>\n<p>查看 django_blog 进程是否运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">supervisorctl status</div><div class=\"line\"><span class=\"comment\"># 输出 RUNNING 说明子进程成功运行</span></div><div class=\"line\">django_blog    RUNNING   pid 17168, uptime 0:03:25</div></pre></td></tr></table></figure>\n<p>supervisord 相关命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 重启 supervisord 进程</span></div><div class=\"line\">service supervisord restart</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 停止 supervisord 进程</span></div><div class=\"line\">service supervisord stop</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 注意：supervisord 重启或停止后，uwsgi 进程会不受 supervisord 控制，必须手动 kill 掉 uwsgi 进程后再启动 supervisord 进程</span></div></pre></td></tr></table></figure>\n<p>supervisorctl 相关命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 启动某个进程，program_name 为 [program:x] 里的 x</span></div><div class=\"line\">supervisorctl start program_name</div><div class=\"line\"><span class=\"comment\"># 停止某个进程</span></div><div class=\"line\">supervisorctl stop program_name</div><div class=\"line\"><span class=\"comment\"># 重启某个进程</span></div><div class=\"line\">supervisorctl restart program_name</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 结束所有属于名为 groupworker 这个分组的进程 (start，restart 同理)</span></div><div class=\"line\">supervisorctl stop groupworker:</div><div class=\"line\"><span class=\"comment\"># 结束 groupworker:name1 这个进程 (start，restart 同理)</span></div><div class=\"line\">supervisorctl stop groupworker:name1</div><div class=\"line\"><span class=\"comment\"># 停止全部进程，注意：start、restart、stop 都不会载入最新的配置文件</span></div><div class=\"line\">supervisorctl stop all</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 停止所有进程并按新的配置启动所有进程</span></div><div class=\"line\">supervisorctl reload</div><div class=\"line\"><span class=\"comment\"># 重启配置有改动的进程，启动配置中新加入的进程，配置没有改动的进程会保持原有的启动或停止状态</span></div><div class=\"line\">supervisorctl update</div></pre></td></tr></table></figure>\n<h1 id=\"Django静态文件处理\"><a href=\"#Django静态文件处理\" class=\"headerlink\" title=\"Django静态文件处理\"></a>Django静态文件处理</h1><p>根据上面的步骤，一般能成功运行起来 Django，主页面的访问也没问题。</p>\n<p>当打开 Django 管理页面 <code>公网IP:端口/admin</code>，发现登录页面的样式丢失了，查看网页源代码，发现点击静态文件会产生 403 错误的返回，说明服务器收到了请求但拒绝处理请求，信息是 Nginx 服务器返回的，接着想到查看 Nginx 日志，打开 /var/log/nginx/error.log 文件，发现有这样的错误：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">2017/02/03 13:05:27 [error] 31497<span class=\"comment\">#0: *1 open() \"/home/sun/django_blog/static/admin/css/login.css\" failed (13: Permission denied), client: 12.56.11.158, server: xx.xx.xx.xx, request: \"GET /static/admin/css/login.css HTTP/1.1\", host: \"xx.xx.xx.xx\"</span></div></pre></td></tr></table></figure>\n<p>说明打开静态文件失败是由于<code>Permission denied</code>产生的，很可能与 Nginx 进程的权限和静态文件的权限有关，打开 Nginx 配置文件 /etc/nginx/nginx.conf ：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">user nginx;</div><div class=\"line\">worker_processes auto;</div><div class=\"line\">error_log /var/<span class=\"built_in\">log</span>/nginx/error.log;</div><div class=\"line\">pid /var/run/nginx.pid;</div></pre></td></tr></table></figure>\n<p>发现 Nginx worker process 是以 nginx 用户启动的，将 worker 启动用户改为 django_blog/static/ 目录所有者用户相同：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">user nginx --&gt; user sun</div></pre></td></tr></table></figure>\n<p>重启 Nginx 进程</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service nginx restart</div></pre></td></tr></table></figure>\n<p>Django 管理页面的样式恢复了。</p>\n<p>参考：<a href=\"http://stackoverflow.com/questions/28732692/nginxdjangouwsgi-static-files-403-forbidden\" target=\"_blank\" rel=\"external\">nginx+django+uwsgi static files 403 Forbidden</a></p>\n<h1 id=\"进阶阅读\"><a href=\"#进阶阅读\" class=\"headerlink\" title=\"进阶阅读\"></a>进阶阅读</h1><p><a href=\"http://www.ituring.com.cn/article/214859\" target=\"_blank\" rel=\"external\">利用 NGINX 最大化 Python 性能  第一部分：Web 服务和缓存</a></p>\n<p><a href=\"http://www.ituring.com.cn/article/215554\" target=\"_blank\" rel=\"external\">利用 NGINX 最大化 Python 性能  第二部分：负载均衡和监控</a></p>\n","excerpt":"<p>本项目采用三层架构部署，Nginx 作为反向代理服务器，WSGI 层使用 <a href=\"http://uwsgi-docs-cn.readthedocs.io/zh_CN/latest/WSGIquickstart.html\">uWSGI</a>，Web 应用为 Django；同时，使用  Supervisor 进程守护工具守护 uWSGI 进程。</p>\n<img src=\"/2017/02/02/搭建Django博客（8）部署Django博客到VPS/deploy.png\" alt=\"Nginx + uWSGI + Django + Supervisor\" title=\"Nginx + uWSGI + Django + Supervisor\">\n<h1 id=\"项目地址\"><a href=\"#项目地址\" class=\"headerlink\" title=\"项目地址\"></a>项目地址</h1><p><a href=\"https://github.com/wish007/django_blog\">GitHub - wish007/django_blog</a></p>","more":"<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><p>在开发阶段，调试模式处于打开状态可以方便我们调试，但部署到生产环境显然不能这么做，必须对 Django 项目设置文件<code>settings.py</code>做些修改，提升系统安全性：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">SECRET_KEY = 'This is a secret key!'  --&gt;</div><div class=\"line\">SECRET_KEY = 'sqDZl^NeQ7SB1wJqeDoxhpf8RnTA1hMhJd5NQApcLizIx*!GRe'  </div><div class=\"line\"># 此项修改尤为重要，自行生成一串足够长和复杂的 KEY，如果你把项目代码放到 GitHub，也记得要在生产环境修改此字段</div><div class=\"line\"></div><div class=\"line\">DEBUG = True --&gt; DEBUG = False  #关闭调试模式</div><div class=\"line\">ALLOWED_HOSTS = [] --&gt; ALLOWED_HOSTS = ['*']  #允许所有IP访问，否则他人无法访问</div></pre></td></tr></table></figure>\n<p>开发阶段，调试模式开启时 Django 会自动找到项目的静态文件来响应请求，关闭后 Django 将不处理对静态文件的请求，对这些请求返回 404 错误；部署到线上时，Nginx 会处理对静态文件的请求，所以必须将项目涉及到的静态文件搜集起来。在<code>settings.py</code>文件中添加<code>STATIC_ROOT</code>字段，设置搜集起来的静态文件的保存目录：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">STATIC_ROOT = os.path.join(BASE_DIR, <span class=\"string\">\"static\"</span>)</div></pre></td></tr></table></figure>\n<p>执行搜集静态文件的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python manage.py collectstatic</div></pre></td></tr></table></figure>\n<p>在项目根目录下将生产一个<code>static</code>文件夹，里面保存了项目用到的所有静态文件。</p>\n<p>创建运行环境依赖文件<code>requirements.txt</code>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip freeze &gt; requirements.txt</div></pre></td></tr></table></figure>\n<h1 id=\"正式部署\"><a href=\"#正式部署\" class=\"headerlink\" title=\"正式部署\"></a>正式部署</h1><h2 id=\"创建运行环境\"><a href=\"#创建运行环境\" class=\"headerlink\" title=\"创建运行环境\"></a>创建运行环境</h2><p>首先，将项目所有的文件导入服务器用户目录 /home/sun/django_blog，创建运行环境：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> /home/sun/django_blog</div><div class=\"line\">virtualenv venv</div><div class=\"line\"><span class=\"built_in\">source</span> venv/bin/activate</div><div class=\"line\">pip install -r requirements.txt</div></pre></td></tr></table></figure>\n<h2 id=\"创建数据库\"><a href=\"#创建数据库\" class=\"headerlink\" title=\"创建数据库\"></a>创建数据库</h2><p>原项目里的数据库文件可以保留，跳过这一步也没问题；如果不保留原有数据库，可以按下面步骤重新创建数据库并导入数据结构：</p>\n<p>生成数据库文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python manage.py runserver</div></pre></td></tr></table></figure>\n<p>生成数据结构迁移文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python manage.py makemigrations</div></pre></td></tr></table></figure>\n<p>将数据结构写入数据库：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python manage.py migrate</div></pre></td></tr></table></figure>\n<p>创建管理员账号：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">python manage.py createsuperuser</div></pre></td></tr></table></figure>\n<p>运行 Django：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> /home/sun/django_blog</div><div class=\"line\"><span class=\"built_in\">source</span> venv/bin/activate</div><div class=\"line\">python manage.py runserver</div></pre></td></tr></table></figure>\n<p>测试输出是否正常：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl http://127.0.0.1:8000</div></pre></td></tr></table></figure>\n<h2 id=\"配置uWSGI\"><a href=\"#配置uWSGI\" class=\"headerlink\" title=\"配置uWSGI\"></a>配置uWSGI</h2><p>安装 uWSGI</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install uwsgi</div></pre></td></tr></table></figure>\n<p>配置 uWSGI</p>\n<blockquote>\n<p>在 Django 项目目录下新建 uWSGI 配置文件 uwsgi_config.ini 并输入</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">[uwsgi]</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Django-related settings</span></div><div class=\"line\"><span class=\"built_in\">chdir</span> = /home/sun/django_blog</div><div class=\"line\">home = /home/sun/django_blog/venv</div><div class=\"line\">module = myblog.wsgi</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># process-related settings</span></div><div class=\"line\">master = <span class=\"literal\">true</span></div><div class=\"line\">socket = 127.0.0.1:8000</div><div class=\"line\">processes = 4</div><div class=\"line\">threads = 2</div><div class=\"line\">buffer-size = 32768</div></pre></td></tr></table></figure>\n<p>启动 uWSGI</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(venv) [sun@SS django_blog]$ uwsgi uwsgi_config.ini</div></pre></td></tr></table></figure>\n<h2 id=\"配置Nginx\"><a href=\"#配置Nginx\" class=\"headerlink\" title=\"配置Nginx\"></a>配置Nginx</h2><p>安装 Nginx</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum install nginx</div></pre></td></tr></table></figure>\n<p>配置 Nginx</p>\n<blockquote>\n<p>配置文件目录：/etc/nginx/conf.d 目录下的 default.conf</p>\n<p>即使已经有监听同一个端口的应用，也可以直接添加另一个应用，因为他们的<code>server_name</code>不同，Nginx 会自动处理好不同站点的转发。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123; </div><div class=\"line\">  listen 80; </div><div class=\"line\">  server_name xx.xx.xx.xx; <span class=\"comment\">#公网地址 </span></div><div class=\"line\">  location / &#123; </div><div class=\"line\">  include uwsgi_params;</div><div class=\"line\">  uwsgi_pass 127.0.0.1:8000; <span class=\"comment\"># 指向uwsgi 所应用的内部地址,所有请求将转发给uwsgi 处理 </span></div><div class=\"line\">  uwsgi_param UWSGI_PYHOME /home/sun/env/django_blog; <span class=\"comment\"># 指向虚拟环境目录 </span></div><div class=\"line\">  uwsgi_param UWSGI_CHDIR /home/sun/django_blog; <span class=\"comment\"># 指向网站根目录 </span></div><div class=\"line\">  uwsgi_param UWSGI_SCRIPT manage:app; <span class=\"comment\"># 指定启动程序</span></div><div class=\"line\">  uwsgi_read_timeout 100; </div><div class=\"line\"> &#125;</div><div class=\"line\">  location /static/ &#123;  <span class=\"comment\">#转发对静态文件的请求</span></div><div class=\"line\">  root /home/sun/django_blog;  <span class=\"comment\">#必须填 static 文件夹所在目录</span></div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>启动 Nginx：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service nginx start</div></pre></td></tr></table></figure>\n<p>Nginx 相关命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 关闭 Nginx</span></div><div class=\"line\">service nginx stop</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 重启 Nginx</span></div><div class=\"line\">service nginx restart</div></pre></td></tr></table></figure>\n<h2 id=\"配置Supervisor\"><a href=\"#配置Supervisor\" class=\"headerlink\" title=\"配置Supervisor\"></a>配置Supervisor</h2><blockquote>\n<p><a href=\"http://supervisord.org/\">Supervisor</a> 有两个主要的组成部分：</p>\n<ol>\n<li><p>supervisord</p>\n<p>它是 Supervisor 的服务端，运行 Supervisor 时会启动一个 supervisord 进程，负责启动所管理的进程，并将所管理的进程作为自己的子进程来启动，将普通的命令行进程变为后台daemon，响应客户端命令、监控进程状态、自动重启 crashed 掉的子进程、记录子进程的 stdout、stderr 等。</p>\n</li>\n<li><p>supervisorctl</p>\n<p>它是 Supervisor 的客户端，提供了 shell-like 接口来调用 supervisord，通过 supervisorctl 用户可以连接到多个 supervisord 进程，获取supervisord 所管理的子进程状态，可以执行 stop、start、restart 等命令来管理这些子进程。</p>\n</li>\n</ol>\n</blockquote>\n<p>安装完 uWSGI、Nginx 后，Nginx 可以直接设置开机启动，但 uWSGI 还不能直接开机启动，这里我用 Supervisor 来启动并守护  uWSGI 运行，在全局 Python 环境安装 Supervisor：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install supervisor</div></pre></td></tr></table></figure>\n<p>配置 Supervisor：</p>\n<blockquote>\n<p>配置文件目录：/etc/supervisord.conf</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">[program:django_blog]</div><div class=\"line\"><span class=\"comment\"># 启动命令入口</span></div><div class=\"line\"><span class=\"built_in\">command</span>=/home/sun/env/django_blog/bin/uwsgi /home/sun/django_blog/uwsgi_config.ini</div><div class=\"line\"><span class=\"comment\"># 命令程序所在目录</span></div><div class=\"line\">directory=/home/sun/django_blog</div><div class=\"line\">user=sun</div><div class=\"line\">autostart=<span class=\"literal\">true</span></div><div class=\"line\">autorestart=<span class=\"literal\">true</span></div><div class=\"line\">startsecs=10</div><div class=\"line\">startretries=10</div><div class=\"line\"><span class=\"comment\">#日志地址</span></div><div class=\"line\">stdout_logfile=/home/sun/django_blog/uwsgi_supervisor.log</div><div class=\"line\">stdout_logfile_maxbytes = 50MB</div><div class=\"line\">stderr_logfile=/home/sun/django_blog/uwsgi_err.log</div><div class=\"line\">stderr_logfile_maxbytes = 50MB</div></pre></td></tr></table></figure>\n<p>设置 supervisord 开机启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">chkconfig --add supervisord</div><div class=\"line\">chkconfig supervisord on</div></pre></td></tr></table></figure>\n<p>启动 supervisord</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service supervisord start</div></pre></td></tr></table></figure>\n<p>查看 django_blog 进程是否运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">supervisorctl status</div><div class=\"line\"><span class=\"comment\"># 输出 RUNNING 说明子进程成功运行</span></div><div class=\"line\">django_blog    RUNNING   pid 17168, uptime 0:03:25</div></pre></td></tr></table></figure>\n<p>supervisord 相关命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 重启 supervisord 进程</span></div><div class=\"line\">service supervisord restart</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 停止 supervisord 进程</span></div><div class=\"line\">service supervisord stop</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 注意：supervisord 重启或停止后，uwsgi 进程会不受 supervisord 控制，必须手动 kill 掉 uwsgi 进程后再启动 supervisord 进程</span></div></pre></td></tr></table></figure>\n<p>supervisorctl 相关命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 启动某个进程，program_name 为 [program:x] 里的 x</span></div><div class=\"line\">supervisorctl start program_name</div><div class=\"line\"><span class=\"comment\"># 停止某个进程</span></div><div class=\"line\">supervisorctl stop program_name</div><div class=\"line\"><span class=\"comment\"># 重启某个进程</span></div><div class=\"line\">supervisorctl restart program_name</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 结束所有属于名为 groupworker 这个分组的进程 (start，restart 同理)</span></div><div class=\"line\">supervisorctl stop groupworker:</div><div class=\"line\"><span class=\"comment\"># 结束 groupworker:name1 这个进程 (start，restart 同理)</span></div><div class=\"line\">supervisorctl stop groupworker:name1</div><div class=\"line\"><span class=\"comment\"># 停止全部进程，注意：start、restart、stop 都不会载入最新的配置文件</span></div><div class=\"line\">supervisorctl stop all</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># 停止所有进程并按新的配置启动所有进程</span></div><div class=\"line\">supervisorctl reload</div><div class=\"line\"><span class=\"comment\"># 重启配置有改动的进程，启动配置中新加入的进程，配置没有改动的进程会保持原有的启动或停止状态</span></div><div class=\"line\">supervisorctl update</div></pre></td></tr></table></figure>\n<h1 id=\"Django静态文件处理\"><a href=\"#Django静态文件处理\" class=\"headerlink\" title=\"Django静态文件处理\"></a>Django静态文件处理</h1><p>根据上面的步骤，一般能成功运行起来 Django，主页面的访问也没问题。</p>\n<p>当打开 Django 管理页面 <code>公网IP:端口/admin</code>，发现登录页面的样式丢失了，查看网页源代码，发现点击静态文件会产生 403 错误的返回，说明服务器收到了请求但拒绝处理请求，信息是 Nginx 服务器返回的，接着想到查看 Nginx 日志，打开 /var/log/nginx/error.log 文件，发现有这样的错误：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">2017/02/03 13:05:27 [error] 31497<span class=\"comment\">#0: *1 open() \"/home/sun/django_blog/static/admin/css/login.css\" failed (13: Permission denied), client: 12.56.11.158, server: xx.xx.xx.xx, request: \"GET /static/admin/css/login.css HTTP/1.1\", host: \"xx.xx.xx.xx\"</span></div></pre></td></tr></table></figure>\n<p>说明打开静态文件失败是由于<code>Permission denied</code>产生的，很可能与 Nginx 进程的权限和静态文件的权限有关，打开 Nginx 配置文件 /etc/nginx/nginx.conf ：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">user nginx;</div><div class=\"line\">worker_processes auto;</div><div class=\"line\">error_log /var/<span class=\"built_in\">log</span>/nginx/error.log;</div><div class=\"line\">pid /var/run/nginx.pid;</div></pre></td></tr></table></figure>\n<p>发现 Nginx worker process 是以 nginx 用户启动的，将 worker 启动用户改为 django_blog/static/ 目录所有者用户相同：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">user nginx --&gt; user sun</div></pre></td></tr></table></figure>\n<p>重启 Nginx 进程</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service nginx restart</div></pre></td></tr></table></figure>\n<p>Django 管理页面的样式恢复了。</p>\n<p>参考：<a href=\"http://stackoverflow.com/questions/28732692/nginxdjangouwsgi-static-files-403-forbidden\">nginx+django+uwsgi static files 403 Forbidden</a></p>\n<h1 id=\"进阶阅读\"><a href=\"#进阶阅读\" class=\"headerlink\" title=\"进阶阅读\"></a>进阶阅读</h1><p><a href=\"http://www.ituring.com.cn/article/214859\">利用 NGINX 最大化 Python 性能  第一部分：Web 服务和缓存</a></p>\n<p><a href=\"http://www.ituring.com.cn/article/215554\">利用 NGINX 最大化 Python 性能  第二部分：负载均衡和监控</a></p>"},{"title":"模拟登陆无线路由器（TL-WDR5600）","date":"2016-11-02T14:16:28.000Z","_content":"\n# Why\n\n最近对模拟登录很感兴趣，因为很多事情都需要登录了才能做，利用程序实现自动化能做到许多十分有趣的事情。\n\n我已经打手头上这台 TP-LINK 的 WDR5600 主意很久了，趁着最近在学习 HTTP ，正好实现以前的一些想法。\n\n# GitHub Repository\n\n[GitHub - wish007/router](https://github.com/wish007/router)\n\n# Library\n\n- [Requests](http://docs.python-requests.org/zh_CN/latest/) ：HTTP for Humans ，涉及到 HTTP 怎能少了它\n- [json](https://docs.python.org/3.5/library/json.html)：JSON 数据格式的编码和解码\n- [urllib.parse](https://docs.python.org/3.5/library/urllib.parse.html)：对 URL 编码进行解码\n- Chrome开发者工具：调试 HTTP 请求、JavaScript 的利器\n\n<!--more-->\n\n# How\n\n既然无线路由器是通过 Web 页面登录的，那直接打开登录页面用Chrome开发者工具获取网络通信过程。\n\n- 输入 http://192.168.1.1 打开登录页面，现在有些无线路由器只需要密码就可以登录了，我手头上的就是这种：\n\n  {% asset_img 登录界面.png %}\n\n  ​\n\n  输入密码`administrator`点登录开始抓包：\n\n  {% asset_img 登录.png %}\n\n  ​\n\n  {% asset_img stok.png %}\n\n  ​\n\n  在 Request Payload 可以很明显看到`{\"password\":\"WaQ7xPr3L41vMwK\"}`，Response 返回`{ \"stok\": \"b686b22c7a3f1c1fb983b0e30aa98fae\", \"error_code\": 0 }`，`password`应该就是我们要找密码字段，返回的`stok`相当于后续通信的`token`口令，`error_code`的值为`0`表示认证通过。\n\n- 但是请求的`{\"password\":\"WaQ7xPr3L41vMwK\"}`和真正的密码`administrator`完全不同，应该是对密码进行了加密处理，打开登录界面时加载了许多 JavaScript 文件，猜测可能是通过 JavaScript 来加密，切换到 Chrome 开发者工具的 Soures 标签页，尝试搜索`password`、`pwd`等密码相关的关键字，多试几次就可以找到加密代码，实在不行就设置断点单步查看登录涉及的代码。\n\n  设置断点后在`orgAuthPwd`函数发现传入的`pwd`参数值为真实的密码`administrator`，最后返回一个带参数的`securityEncode`函数，继续运行可以看到变量`output`的值在一步步变为登录请求的`{\"password\":\"WaQ7xPr3L41vMwK\"}`\n\n  {% asset_img 加密函数1.png %}\n\n  ​\n\n  {% asset_img 加密函数2.png %}\n\n  ​\n\n  既然找到了加密代码，那就马上用 Python 重写：\n\n  ```python\n  def encrypt_pwd(password):\n      input1 = \"RDpbLfCPsJZ7fiv\"\n      input3 = \"yLwVl0zKqws7LgKPRQ84Mdt708T1qQ3Ha7xv3H7NyU84p21BriUWBU43odz3iP4rBL3cD02KZciXTysVXiV8ngg6vL48rPJyAUw0HurW20xqxv9aYb4M9wK1Ae0wlro510qXeU07kV57fQMc8L6aLgMLwygtc0F10a0Dg70TOoouyFhdysuRMO51yY5ZlOZZLEal1h0t9YQW0Ko7oBwmCAHoic4HYbUyVeU3sfQ1xtXcPcf1aT303wAQhv66qzW\"\n      len1 = len(input1)\n      len2 = len(password)\n      dictionary = input3\n      lenDict = len(dictionary)\n      output = ''\n      if len1 > len2:\n          length = len1\n      else:\n          length = len2\n      index = 0\n      while index < length:\n          # 十六进制数 0xBB 的十进制为 187\n          cl = 187\n          cr = 187\n          if index >= len1:\n              # ord() 函数返回字符的整数表示\n              cr = ord(password[index])\n          elif index >= len2:\n              cl = ord(input1[index])\n          else:\n              cl = ord(input1[index])\n              cr = ord(password[index])\n          index += 1\n          # chr() 函数返回整数对应的字符\n          output = output + chr(ord(dictionary[cl ^ cr]) % lenDict)\n      return output\n  ```\n\n- 有了加密后的密码，顺理成章地将它作为 Payload 发送请求，返回的响应为 JSON 格式数据，通过 json 库解析获得 token：\n\n  ```python\n  encryptPwd = '加密后的密码'\n  url = 'http://192.168.1.1/'\n  headers = {'Content-Type': 'application/json; charset=UTF-8'}\n  payload = '{\"method\":\"do\",\"login\":{\"password\":\"%s\"}}' % encryptPwd\n  response = requests.post(url, data=payload, headers=headers)\n  stok = json.loads(response.text)['stok']\n  ```\n\n- 获得 stok 后就可以将它加入请求 URL 中获取数据了\n\n  例如获取用户当前的上传速度、下载速度、限速信息等；返回的信息为 JSON 格式数据，可以解析做格式化处理增强可读性。\n\n  {% asset_img 获取数据.png 获取数据 %}\n\n  ​\n\n  **获取数据代码：**\n\n  ```python\n  stok = json.loads(response.text)['stok']\n  headers = {'Content-Type': 'application/json; charset=UTF-8'}\n  url = '%sstok=%s/ds' % ('http://192.168.1.1/',stok)\n  payload = '{\"hosts_info\":{\"table\":\"host_info\"},\"method\":\"get\"}'\n  response = requests.post(url, data=payload, headers=headers)\n  ```\n  ​\n\n  **返回的 JSON 数据：**\n\n  ```json\n  {\n      \"hosts_info\": {\n          \"host_info\": [\n              {\n                  \"host_info_1\": {\n                      \"mac\": \"D4-45-9D-62-8E-2D\",\n                      \"up_speed\": \"45773\",\n                      \"ssid\": \"\",\n                      \"plan_rule\": [],\n                      \"ip\": \"192.168.1.100\",\n                      \"type\": \"0\",\n                      \"is_cur_host\": \"0\",\n                      \"cfg_valid\": \"1\",\n                      \"blocked\": \"0\",\n                      \"down_limit\": \"0\",\n                      \"down_speed\": \"808\",\n                      \"hostname\": \"hehe\",\n                      \"up_limit\": \"0\"\n                  }\n              },\n              {\n                  \"host_info_2\": {\n                      \"mac\": \"5A-54-33-0C-92-2D\",\n                      \"up_speed\": \"59\",\n                      \"ssid\": \"aaa\",\n                      \"plan_rule\": [],\n                      \"wifi_mode\": \"0\",\n                      \"ip\": \"192.168.1.98\",\n                      \"type\": \"1\",\n                      \"is_cur_host\": \"1\",\n                      \"cfg_valid\": \"1\",\n                      \"blocked\": \"0\",\n                      \"down_limit\": \"0\",\n                      \"down_speed\": \"70\",\n                      \"hostname\": \"HaHa\",\n                      \"up_limit\": \"0\"\n                  }\n              }\n          ]\n      },\n      \"error_code\": 0\n  }\n  ```\n\n  对 JSON 数据进一步可视化处理后：\n\n  {% asset_img 抓取结果.png 抓取结果 %}\n\n  ​\n\n  # More\n\n  根据上面的分析，发现整个过程的关键点有几个：\n\n  - 请求参数\n  - 密码加密函数\n  - 获取 stok\n\n  获取到 stok 可以做的事情就很多了，可以更改请求参数（具体参数要提前抓取）获取数据、操作路由器，有兴趣的可以根据我的代码自行拓展。\n\n  ​\n\n","source":"_posts/模拟登陆无线路由器（TL-WDR5600）.md","raw":"---\ntitle: 模拟登陆无线路由器（TL-WDR5600）\ndate: 2016-11-02 22:16:28\ncategories: Python\ntags:\n- Python\n- 爬虫\n- 无线路由器\n---\n\n# Why\n\n最近对模拟登录很感兴趣，因为很多事情都需要登录了才能做，利用程序实现自动化能做到许多十分有趣的事情。\n\n我已经打手头上这台 TP-LINK 的 WDR5600 主意很久了，趁着最近在学习 HTTP ，正好实现以前的一些想法。\n\n# GitHub Repository\n\n[GitHub - wish007/router](https://github.com/wish007/router)\n\n# Library\n\n- [Requests](http://docs.python-requests.org/zh_CN/latest/) ：HTTP for Humans ，涉及到 HTTP 怎能少了它\n- [json](https://docs.python.org/3.5/library/json.html)：JSON 数据格式的编码和解码\n- [urllib.parse](https://docs.python.org/3.5/library/urllib.parse.html)：对 URL 编码进行解码\n- Chrome开发者工具：调试 HTTP 请求、JavaScript 的利器\n\n<!--more-->\n\n# How\n\n既然无线路由器是通过 Web 页面登录的，那直接打开登录页面用Chrome开发者工具获取网络通信过程。\n\n- 输入 http://192.168.1.1 打开登录页面，现在有些无线路由器只需要密码就可以登录了，我手头上的就是这种：\n\n  {% asset_img 登录界面.png %}\n\n  ​\n\n  输入密码`administrator`点登录开始抓包：\n\n  {% asset_img 登录.png %}\n\n  ​\n\n  {% asset_img stok.png %}\n\n  ​\n\n  在 Request Payload 可以很明显看到`{\"password\":\"WaQ7xPr3L41vMwK\"}`，Response 返回`{ \"stok\": \"b686b22c7a3f1c1fb983b0e30aa98fae\", \"error_code\": 0 }`，`password`应该就是我们要找密码字段，返回的`stok`相当于后续通信的`token`口令，`error_code`的值为`0`表示认证通过。\n\n- 但是请求的`{\"password\":\"WaQ7xPr3L41vMwK\"}`和真正的密码`administrator`完全不同，应该是对密码进行了加密处理，打开登录界面时加载了许多 JavaScript 文件，猜测可能是通过 JavaScript 来加密，切换到 Chrome 开发者工具的 Soures 标签页，尝试搜索`password`、`pwd`等密码相关的关键字，多试几次就可以找到加密代码，实在不行就设置断点单步查看登录涉及的代码。\n\n  设置断点后在`orgAuthPwd`函数发现传入的`pwd`参数值为真实的密码`administrator`，最后返回一个带参数的`securityEncode`函数，继续运行可以看到变量`output`的值在一步步变为登录请求的`{\"password\":\"WaQ7xPr3L41vMwK\"}`\n\n  {% asset_img 加密函数1.png %}\n\n  ​\n\n  {% asset_img 加密函数2.png %}\n\n  ​\n\n  既然找到了加密代码，那就马上用 Python 重写：\n\n  ```python\n  def encrypt_pwd(password):\n      input1 = \"RDpbLfCPsJZ7fiv\"\n      input3 = \"yLwVl0zKqws7LgKPRQ84Mdt708T1qQ3Ha7xv3H7NyU84p21BriUWBU43odz3iP4rBL3cD02KZciXTysVXiV8ngg6vL48rPJyAUw0HurW20xqxv9aYb4M9wK1Ae0wlro510qXeU07kV57fQMc8L6aLgMLwygtc0F10a0Dg70TOoouyFhdysuRMO51yY5ZlOZZLEal1h0t9YQW0Ko7oBwmCAHoic4HYbUyVeU3sfQ1xtXcPcf1aT303wAQhv66qzW\"\n      len1 = len(input1)\n      len2 = len(password)\n      dictionary = input3\n      lenDict = len(dictionary)\n      output = ''\n      if len1 > len2:\n          length = len1\n      else:\n          length = len2\n      index = 0\n      while index < length:\n          # 十六进制数 0xBB 的十进制为 187\n          cl = 187\n          cr = 187\n          if index >= len1:\n              # ord() 函数返回字符的整数表示\n              cr = ord(password[index])\n          elif index >= len2:\n              cl = ord(input1[index])\n          else:\n              cl = ord(input1[index])\n              cr = ord(password[index])\n          index += 1\n          # chr() 函数返回整数对应的字符\n          output = output + chr(ord(dictionary[cl ^ cr]) % lenDict)\n      return output\n  ```\n\n- 有了加密后的密码，顺理成章地将它作为 Payload 发送请求，返回的响应为 JSON 格式数据，通过 json 库解析获得 token：\n\n  ```python\n  encryptPwd = '加密后的密码'\n  url = 'http://192.168.1.1/'\n  headers = {'Content-Type': 'application/json; charset=UTF-8'}\n  payload = '{\"method\":\"do\",\"login\":{\"password\":\"%s\"}}' % encryptPwd\n  response = requests.post(url, data=payload, headers=headers)\n  stok = json.loads(response.text)['stok']\n  ```\n\n- 获得 stok 后就可以将它加入请求 URL 中获取数据了\n\n  例如获取用户当前的上传速度、下载速度、限速信息等；返回的信息为 JSON 格式数据，可以解析做格式化处理增强可读性。\n\n  {% asset_img 获取数据.png 获取数据 %}\n\n  ​\n\n  **获取数据代码：**\n\n  ```python\n  stok = json.loads(response.text)['stok']\n  headers = {'Content-Type': 'application/json; charset=UTF-8'}\n  url = '%sstok=%s/ds' % ('http://192.168.1.1/',stok)\n  payload = '{\"hosts_info\":{\"table\":\"host_info\"},\"method\":\"get\"}'\n  response = requests.post(url, data=payload, headers=headers)\n  ```\n  ​\n\n  **返回的 JSON 数据：**\n\n  ```json\n  {\n      \"hosts_info\": {\n          \"host_info\": [\n              {\n                  \"host_info_1\": {\n                      \"mac\": \"D4-45-9D-62-8E-2D\",\n                      \"up_speed\": \"45773\",\n                      \"ssid\": \"\",\n                      \"plan_rule\": [],\n                      \"ip\": \"192.168.1.100\",\n                      \"type\": \"0\",\n                      \"is_cur_host\": \"0\",\n                      \"cfg_valid\": \"1\",\n                      \"blocked\": \"0\",\n                      \"down_limit\": \"0\",\n                      \"down_speed\": \"808\",\n                      \"hostname\": \"hehe\",\n                      \"up_limit\": \"0\"\n                  }\n              },\n              {\n                  \"host_info_2\": {\n                      \"mac\": \"5A-54-33-0C-92-2D\",\n                      \"up_speed\": \"59\",\n                      \"ssid\": \"aaa\",\n                      \"plan_rule\": [],\n                      \"wifi_mode\": \"0\",\n                      \"ip\": \"192.168.1.98\",\n                      \"type\": \"1\",\n                      \"is_cur_host\": \"1\",\n                      \"cfg_valid\": \"1\",\n                      \"blocked\": \"0\",\n                      \"down_limit\": \"0\",\n                      \"down_speed\": \"70\",\n                      \"hostname\": \"HaHa\",\n                      \"up_limit\": \"0\"\n                  }\n              }\n          ]\n      },\n      \"error_code\": 0\n  }\n  ```\n\n  对 JSON 数据进一步可视化处理后：\n\n  {% asset_img 抓取结果.png 抓取结果 %}\n\n  ​\n\n  # More\n\n  根据上面的分析，发现整个过程的关键点有几个：\n\n  - 请求参数\n  - 密码加密函数\n  - 获取 stok\n\n  获取到 stok 可以做的事情就很多了，可以更改请求参数（具体参数要提前抓取）获取数据、操作路由器，有兴趣的可以根据我的代码自行拓展。\n\n  ​\n\n","slug":"模拟登陆无线路由器（TL-WDR5600）","published":1,"updated":"2016-11-06T12:02:41.586Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz485co30010kocemofc2xnx","content":"<h1 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why\"></a>Why</h1><p>最近对模拟登录很感兴趣，因为很多事情都需要登录了才能做，利用程序实现自动化能做到许多十分有趣的事情。</p>\n<p>我已经打手头上这台 TP-LINK 的 WDR5600 主意很久了，趁着最近在学习 HTTP ，正好实现以前的一些想法。</p>\n<h1 id=\"GitHub-Repository\"><a href=\"#GitHub-Repository\" class=\"headerlink\" title=\"GitHub Repository\"></a>GitHub Repository</h1><p><a href=\"https://github.com/wish007/router\" target=\"_blank\" rel=\"external\">GitHub - wish007/router</a></p>\n<h1 id=\"Library\"><a href=\"#Library\" class=\"headerlink\" title=\"Library\"></a>Library</h1><ul>\n<li><a href=\"http://docs.python-requests.org/zh_CN/latest/\" target=\"_blank\" rel=\"external\">Requests</a> ：HTTP for Humans ，涉及到 HTTP 怎能少了它</li>\n<li><a href=\"https://docs.python.org/3.5/library/json.html\" target=\"_blank\" rel=\"external\">json</a>：JSON 数据格式的编码和解码</li>\n<li><a href=\"https://docs.python.org/3.5/library/urllib.parse.html\" target=\"_blank\" rel=\"external\">urllib.parse</a>：对 URL 编码进行解码</li>\n<li>Chrome开发者工具：调试 HTTP 请求、JavaScript 的利器</li>\n</ul>\n<a id=\"more\"></a>\n<h1 id=\"How\"><a href=\"#How\" class=\"headerlink\" title=\"How\"></a>How</h1><p>既然无线路由器是通过 Web 页面登录的，那直接打开登录页面用Chrome开发者工具获取网络通信过程。</p>\n<ul>\n<li><p>输入 <a href=\"http://192.168.1.1\" target=\"_blank\" rel=\"external\">http://192.168.1.1</a> 打开登录页面，现在有些无线路由器只需要密码就可以登录了，我手头上的就是这种：</p>\n<img src=\"/2016/11/02/模拟登陆无线路由器（TL-WDR5600）/登录界面.png\" alt=\"登录界面.png\" title=\"\">\n<p>​</p>\n<p>输入密码<code>administrator</code>点登录开始抓包：</p>\n<img src=\"/2016/11/02/模拟登陆无线路由器（TL-WDR5600）/登录.png\" alt=\"登录.png\" title=\"\">\n<p>​</p>\n<img src=\"/2016/11/02/模拟登陆无线路由器（TL-WDR5600）/stok.png\" alt=\"stok.png\" title=\"\">\n<p>​</p>\n<p>在 Request Payload 可以很明显看到<code>{&quot;password&quot;:&quot;WaQ7xPr3L41vMwK&quot;}</code>，Response 返回<code>{ &quot;stok&quot;: &quot;b686b22c7a3f1c1fb983b0e30aa98fae&quot;, &quot;error_code&quot;: 0 }</code>，<code>password</code>应该就是我们要找密码字段，返回的<code>stok</code>相当于后续通信的<code>token</code>口令，<code>error_code</code>的值为<code>0</code>表示认证通过。</p>\n</li>\n<li><p>但是请求的<code>{&quot;password&quot;:&quot;WaQ7xPr3L41vMwK&quot;}</code>和真正的密码<code>administrator</code>完全不同，应该是对密码进行了加密处理，打开登录界面时加载了许多 JavaScript 文件，猜测可能是通过 JavaScript 来加密，切换到 Chrome 开发者工具的 Soures 标签页，尝试搜索<code>password</code>、<code>pwd</code>等密码相关的关键字，多试几次就可以找到加密代码，实在不行就设置断点单步查看登录涉及的代码。</p>\n<p>设置断点后在<code>orgAuthPwd</code>函数发现传入的<code>pwd</code>参数值为真实的密码<code>administrator</code>，最后返回一个带参数的<code>securityEncode</code>函数，继续运行可以看到变量<code>output</code>的值在一步步变为登录请求的<code>{&quot;password&quot;:&quot;WaQ7xPr3L41vMwK&quot;}</code></p>\n<img src=\"/2016/11/02/模拟登陆无线路由器（TL-WDR5600）/加密函数1.png\" alt=\"加密函数1.png\" title=\"\">\n<p>​</p>\n<img src=\"/2016/11/02/模拟登陆无线路由器（TL-WDR5600）/加密函数2.png\" alt=\"加密函数2.png\" title=\"\">\n<p>​</p>\n<p>既然找到了加密代码，那就马上用 Python 重写：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">encrypt_pwd</span><span class=\"params\">(password)</span>:</span></div><div class=\"line\">    input1 = <span class=\"string\">\"RDpbLfCPsJZ7fiv\"</span></div><div class=\"line\">    input3 = <span class=\"string\">\"yLwVl0zKqws7LgKPRQ84Mdt708T1qQ3Ha7xv3H7NyU84p21BriUWBU43odz3iP4rBL3cD02KZciXTysVXiV8ngg6vL48rPJyAUw0HurW20xqxv9aYb4M9wK1Ae0wlro510qXeU07kV57fQMc8L6aLgMLwygtc0F10a0Dg70TOoouyFhdysuRMO51yY5ZlOZZLEal1h0t9YQW0Ko7oBwmCAHoic4HYbUyVeU3sfQ1xtXcPcf1aT303wAQhv66qzW\"</span></div><div class=\"line\">    len1 = len(input1)</div><div class=\"line\">    len2 = len(password)</div><div class=\"line\">    dictionary = input3</div><div class=\"line\">    lenDict = len(dictionary)</div><div class=\"line\">    output = <span class=\"string\">''</span></div><div class=\"line\">    <span class=\"keyword\">if</span> len1 &gt; len2:</div><div class=\"line\">        length = len1</div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        length = len2</div><div class=\"line\">    index = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">while</span> index &lt; length:</div><div class=\"line\">        <span class=\"comment\"># 十六进制数 0xBB 的十进制为 187</span></div><div class=\"line\">        cl = <span class=\"number\">187</span></div><div class=\"line\">        cr = <span class=\"number\">187</span></div><div class=\"line\">        <span class=\"keyword\">if</span> index &gt;= len1:</div><div class=\"line\">            <span class=\"comment\"># ord() 函数返回字符的整数表示</span></div><div class=\"line\">            cr = ord(password[index])</div><div class=\"line\">        <span class=\"keyword\">elif</span> index &gt;= len2:</div><div class=\"line\">            cl = ord(input1[index])</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            cl = ord(input1[index])</div><div class=\"line\">            cr = ord(password[index])</div><div class=\"line\">        index += <span class=\"number\">1</span></div><div class=\"line\">        <span class=\"comment\"># chr() 函数返回整数对应的字符</span></div><div class=\"line\">        output = output + chr(ord(dictionary[cl ^ cr]) % lenDict)</div><div class=\"line\">    <span class=\"keyword\">return</span> output</div></pre></td></tr></table></figure>\n</li>\n<li><p>有了加密后的密码，顺理成章地将它作为 Payload 发送请求，返回的响应为 JSON 格式数据，通过 json 库解析获得 token：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">encryptPwd = <span class=\"string\">'加密后的密码'</span></div><div class=\"line\">url = <span class=\"string\">'http://192.168.1.1/'</span></div><div class=\"line\">headers = &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json; charset=UTF-8'</span>&#125;</div><div class=\"line\">payload = <span class=\"string\">'&#123;\"method\":\"do\",\"login\":&#123;\"password\":\"%s\"&#125;&#125;'</span> % encryptPwd</div><div class=\"line\">response = requests.post(url, data=payload, headers=headers)</div><div class=\"line\">stok = json.loads(response.text)[<span class=\"string\">'stok'</span>]</div></pre></td></tr></table></figure>\n</li>\n<li><p>获得 stok 后就可以将它加入请求 URL 中获取数据了</p>\n<p>例如获取用户当前的上传速度、下载速度、限速信息等；返回的信息为 JSON 格式数据，可以解析做格式化处理增强可读性。</p>\n<img src=\"/2016/11/02/模拟登陆无线路由器（TL-WDR5600）/获取数据.png\" alt=\"获取数据\" title=\"获取数据\">\n<p>​</p>\n<p><strong>获取数据代码：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">stok = json.loads(response.text)[<span class=\"string\">'stok'</span>]</div><div class=\"line\">headers = &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json; charset=UTF-8'</span>&#125;</div><div class=\"line\">url = <span class=\"string\">'%sstok=%s/ds'</span> % (<span class=\"string\">'http://192.168.1.1/'</span>,stok)</div><div class=\"line\">payload = <span class=\"string\">'&#123;\"hosts_info\":&#123;\"table\":\"host_info\"&#125;,\"method\":\"get\"&#125;'</span></div><div class=\"line\">response = requests.post(url, data=payload, headers=headers)</div></pre></td></tr></table></figure>\n<p>​</p>\n<p><strong>返回的 JSON 数据：</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"hosts_info\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"host_info\"</span>: [</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"attr\">\"host_info_1\"</span>: &#123;</div><div class=\"line\">                    <span class=\"attr\">\"mac\"</span>: <span class=\"string\">\"D4-45-9D-62-8E-2D\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"up_speed\"</span>: <span class=\"string\">\"45773\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"ssid\"</span>: <span class=\"string\">\"\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"plan_rule\"</span>: [],</div><div class=\"line\">                    <span class=\"attr\">\"ip\"</span>: <span class=\"string\">\"192.168.1.100\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"0\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"is_cur_host\"</span>: <span class=\"string\">\"0\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"cfg_valid\"</span>: <span class=\"string\">\"1\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"blocked\"</span>: <span class=\"string\">\"0\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"down_limit\"</span>: <span class=\"string\">\"0\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"down_speed\"</span>: <span class=\"string\">\"808\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"hostname\"</span>: <span class=\"string\">\"hehe\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"up_limit\"</span>: <span class=\"string\">\"0\"</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;,</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"attr\">\"host_info_2\"</span>: &#123;</div><div class=\"line\">                    <span class=\"attr\">\"mac\"</span>: <span class=\"string\">\"5A-54-33-0C-92-2D\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"up_speed\"</span>: <span class=\"string\">\"59\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"ssid\"</span>: <span class=\"string\">\"aaa\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"plan_rule\"</span>: [],</div><div class=\"line\">                    <span class=\"attr\">\"wifi_mode\"</span>: <span class=\"string\">\"0\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"ip\"</span>: <span class=\"string\">\"192.168.1.98\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"1\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"is_cur_host\"</span>: <span class=\"string\">\"1\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"cfg_valid\"</span>: <span class=\"string\">\"1\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"blocked\"</span>: <span class=\"string\">\"0\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"down_limit\"</span>: <span class=\"string\">\"0\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"down_speed\"</span>: <span class=\"string\">\"70\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"hostname\"</span>: <span class=\"string\">\"HaHa\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"up_limit\"</span>: <span class=\"string\">\"0\"</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"error_code\"</span>: <span class=\"number\">0</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>对 JSON 数据进一步可视化处理后：</p>\n<img src=\"/2016/11/02/模拟登陆无线路由器（TL-WDR5600）/抓取结果.png\" alt=\"抓取结果\" title=\"抓取结果\">\n<p>​</p>\n<h1 id=\"More\"><a href=\"#More\" class=\"headerlink\" title=\"More\"></a>More</h1><p>根据上面的分析，发现整个过程的关键点有几个：</p>\n<ul>\n<li>请求参数</li>\n<li>密码加密函数</li>\n<li>获取 stok</li>\n</ul>\n<p>获取到 stok 可以做的事情就很多了，可以更改请求参数（具体参数要提前抓取）获取数据、操作路由器，有兴趣的可以根据我的代码自行拓展。</p>\n<p>​</p>\n</li>\n</ul>\n","excerpt":"<h1 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why\"></a>Why</h1><p>最近对模拟登录很感兴趣，因为很多事情都需要登录了才能做，利用程序实现自动化能做到许多十分有趣的事情。</p>\n<p>我已经打手头上这台 TP-LINK 的 WDR5600 主意很久了，趁着最近在学习 HTTP ，正好实现以前的一些想法。</p>\n<h1 id=\"GitHub-Repository\"><a href=\"#GitHub-Repository\" class=\"headerlink\" title=\"GitHub Repository\"></a>GitHub Repository</h1><p><a href=\"https://github.com/wish007/router\">GitHub - wish007/router</a></p>\n<h1 id=\"Library\"><a href=\"#Library\" class=\"headerlink\" title=\"Library\"></a>Library</h1><ul>\n<li><a href=\"http://docs.python-requests.org/zh_CN/latest/\">Requests</a> ：HTTP for Humans ，涉及到 HTTP 怎能少了它</li>\n<li><a href=\"https://docs.python.org/3.5/library/json.html\">json</a>：JSON 数据格式的编码和解码</li>\n<li><a href=\"https://docs.python.org/3.5/library/urllib.parse.html\">urllib.parse</a>：对 URL 编码进行解码</li>\n<li>Chrome开发者工具：调试 HTTP 请求、JavaScript 的利器</li>\n</ul>","more":"<h1 id=\"How\"><a href=\"#How\" class=\"headerlink\" title=\"How\"></a>How</h1><p>既然无线路由器是通过 Web 页面登录的，那直接打开登录页面用Chrome开发者工具获取网络通信过程。</p>\n<ul>\n<li><p>输入 <a href=\"http://192.168.1.1\">http://192.168.1.1</a> 打开登录页面，现在有些无线路由器只需要密码就可以登录了，我手头上的就是这种：</p>\n<img src=\"/2016/11/02/模拟登陆无线路由器（TL-WDR5600）/登录界面.png\" alt=\"登录界面.png\" title=\"\">\n<p>​</p>\n<p>输入密码<code>administrator</code>点登录开始抓包：</p>\n<img src=\"/2016/11/02/模拟登陆无线路由器（TL-WDR5600）/登录.png\" alt=\"登录.png\" title=\"\">\n<p>​</p>\n<img src=\"/2016/11/02/模拟登陆无线路由器（TL-WDR5600）/stok.png\" alt=\"stok.png\" title=\"\">\n<p>​</p>\n<p>在 Request Payload 可以很明显看到<code>{&quot;password&quot;:&quot;WaQ7xPr3L41vMwK&quot;}</code>，Response 返回<code>{ &quot;stok&quot;: &quot;b686b22c7a3f1c1fb983b0e30aa98fae&quot;, &quot;error_code&quot;: 0 }</code>，<code>password</code>应该就是我们要找密码字段，返回的<code>stok</code>相当于后续通信的<code>token</code>口令，<code>error_code</code>的值为<code>0</code>表示认证通过。</p>\n</li>\n<li><p>但是请求的<code>{&quot;password&quot;:&quot;WaQ7xPr3L41vMwK&quot;}</code>和真正的密码<code>administrator</code>完全不同，应该是对密码进行了加密处理，打开登录界面时加载了许多 JavaScript 文件，猜测可能是通过 JavaScript 来加密，切换到 Chrome 开发者工具的 Soures 标签页，尝试搜索<code>password</code>、<code>pwd</code>等密码相关的关键字，多试几次就可以找到加密代码，实在不行就设置断点单步查看登录涉及的代码。</p>\n<p>设置断点后在<code>orgAuthPwd</code>函数发现传入的<code>pwd</code>参数值为真实的密码<code>administrator</code>，最后返回一个带参数的<code>securityEncode</code>函数，继续运行可以看到变量<code>output</code>的值在一步步变为登录请求的<code>{&quot;password&quot;:&quot;WaQ7xPr3L41vMwK&quot;}</code></p>\n<img src=\"/2016/11/02/模拟登陆无线路由器（TL-WDR5600）/加密函数1.png\" alt=\"加密函数1.png\" title=\"\">\n<p>​</p>\n<img src=\"/2016/11/02/模拟登陆无线路由器（TL-WDR5600）/加密函数2.png\" alt=\"加密函数2.png\" title=\"\">\n<p>​</p>\n<p>既然找到了加密代码，那就马上用 Python 重写：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">encrypt_pwd</span><span class=\"params\">(password)</span>:</span></div><div class=\"line\">    input1 = <span class=\"string\">\"RDpbLfCPsJZ7fiv\"</span></div><div class=\"line\">    input3 = <span class=\"string\">\"yLwVl0zKqws7LgKPRQ84Mdt708T1qQ3Ha7xv3H7NyU84p21BriUWBU43odz3iP4rBL3cD02KZciXTysVXiV8ngg6vL48rPJyAUw0HurW20xqxv9aYb4M9wK1Ae0wlro510qXeU07kV57fQMc8L6aLgMLwygtc0F10a0Dg70TOoouyFhdysuRMO51yY5ZlOZZLEal1h0t9YQW0Ko7oBwmCAHoic4HYbUyVeU3sfQ1xtXcPcf1aT303wAQhv66qzW\"</span></div><div class=\"line\">    len1 = len(input1)</div><div class=\"line\">    len2 = len(password)</div><div class=\"line\">    dictionary = input3</div><div class=\"line\">    lenDict = len(dictionary)</div><div class=\"line\">    output = <span class=\"string\">''</span></div><div class=\"line\">    <span class=\"keyword\">if</span> len1 &gt; len2:</div><div class=\"line\">        length = len1</div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        length = len2</div><div class=\"line\">    index = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">while</span> index &lt; length:</div><div class=\"line\">        <span class=\"comment\"># 十六进制数 0xBB 的十进制为 187</span></div><div class=\"line\">        cl = <span class=\"number\">187</span></div><div class=\"line\">        cr = <span class=\"number\">187</span></div><div class=\"line\">        <span class=\"keyword\">if</span> index &gt;= len1:</div><div class=\"line\">            <span class=\"comment\"># ord() 函数返回字符的整数表示</span></div><div class=\"line\">            cr = ord(password[index])</div><div class=\"line\">        <span class=\"keyword\">elif</span> index &gt;= len2:</div><div class=\"line\">            cl = ord(input1[index])</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            cl = ord(input1[index])</div><div class=\"line\">            cr = ord(password[index])</div><div class=\"line\">        index += <span class=\"number\">1</span></div><div class=\"line\">        <span class=\"comment\"># chr() 函数返回整数对应的字符</span></div><div class=\"line\">        output = output + chr(ord(dictionary[cl ^ cr]) % lenDict)</div><div class=\"line\">    <span class=\"keyword\">return</span> output</div></pre></td></tr></table></figure>\n</li>\n<li><p>有了加密后的密码，顺理成章地将它作为 Payload 发送请求，返回的响应为 JSON 格式数据，通过 json 库解析获得 token：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">encryptPwd = <span class=\"string\">'加密后的密码'</span></div><div class=\"line\">url = <span class=\"string\">'http://192.168.1.1/'</span></div><div class=\"line\">headers = &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json; charset=UTF-8'</span>&#125;</div><div class=\"line\">payload = <span class=\"string\">'&#123;\"method\":\"do\",\"login\":&#123;\"password\":\"%s\"&#125;&#125;'</span> % encryptPwd</div><div class=\"line\">response = requests.post(url, data=payload, headers=headers)</div><div class=\"line\">stok = json.loads(response.text)[<span class=\"string\">'stok'</span>]</div></pre></td></tr></table></figure>\n</li>\n<li><p>获得 stok 后就可以将它加入请求 URL 中获取数据了</p>\n<p>例如获取用户当前的上传速度、下载速度、限速信息等；返回的信息为 JSON 格式数据，可以解析做格式化处理增强可读性。</p>\n<img src=\"/2016/11/02/模拟登陆无线路由器（TL-WDR5600）/获取数据.png\" alt=\"获取数据\" title=\"获取数据\">\n<p>​</p>\n<p><strong>获取数据代码：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">stok = json.loads(response.text)[<span class=\"string\">'stok'</span>]</div><div class=\"line\">headers = &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json; charset=UTF-8'</span>&#125;</div><div class=\"line\">url = <span class=\"string\">'%sstok=%s/ds'</span> % (<span class=\"string\">'http://192.168.1.1/'</span>,stok)</div><div class=\"line\">payload = <span class=\"string\">'&#123;\"hosts_info\":&#123;\"table\":\"host_info\"&#125;,\"method\":\"get\"&#125;'</span></div><div class=\"line\">response = requests.post(url, data=payload, headers=headers)</div></pre></td></tr></table></figure>\n<p>​</p>\n<p><strong>返回的 JSON 数据：</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"hosts_info\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"host_info\"</span>: [</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"attr\">\"host_info_1\"</span>: &#123;</div><div class=\"line\">                    <span class=\"attr\">\"mac\"</span>: <span class=\"string\">\"D4-45-9D-62-8E-2D\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"up_speed\"</span>: <span class=\"string\">\"45773\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"ssid\"</span>: <span class=\"string\">\"\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"plan_rule\"</span>: [],</div><div class=\"line\">                    <span class=\"attr\">\"ip\"</span>: <span class=\"string\">\"192.168.1.100\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"0\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"is_cur_host\"</span>: <span class=\"string\">\"0\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"cfg_valid\"</span>: <span class=\"string\">\"1\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"blocked\"</span>: <span class=\"string\">\"0\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"down_limit\"</span>: <span class=\"string\">\"0\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"down_speed\"</span>: <span class=\"string\">\"808\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"hostname\"</span>: <span class=\"string\">\"hehe\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"up_limit\"</span>: <span class=\"string\">\"0\"</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;,</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"attr\">\"host_info_2\"</span>: &#123;</div><div class=\"line\">                    <span class=\"attr\">\"mac\"</span>: <span class=\"string\">\"5A-54-33-0C-92-2D\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"up_speed\"</span>: <span class=\"string\">\"59\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"ssid\"</span>: <span class=\"string\">\"aaa\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"plan_rule\"</span>: [],</div><div class=\"line\">                    <span class=\"attr\">\"wifi_mode\"</span>: <span class=\"string\">\"0\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"ip\"</span>: <span class=\"string\">\"192.168.1.98\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"1\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"is_cur_host\"</span>: <span class=\"string\">\"1\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"cfg_valid\"</span>: <span class=\"string\">\"1\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"blocked\"</span>: <span class=\"string\">\"0\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"down_limit\"</span>: <span class=\"string\">\"0\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"down_speed\"</span>: <span class=\"string\">\"70\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"hostname\"</span>: <span class=\"string\">\"HaHa\"</span>,</div><div class=\"line\">                    <span class=\"attr\">\"up_limit\"</span>: <span class=\"string\">\"0\"</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"error_code\"</span>: <span class=\"number\">0</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>对 JSON 数据进一步可视化处理后：</p>\n<img src=\"/2016/11/02/模拟登陆无线路由器（TL-WDR5600）/抓取结果.png\" alt=\"抓取结果\" title=\"抓取结果\">\n<p>​</p>\n<h1 id=\"More\"><a href=\"#More\" class=\"headerlink\" title=\"More\"></a>More</h1><p>根据上面的分析，发现整个过程的关键点有几个：</p>\n<ul>\n<li>请求参数</li>\n<li>密码加密函数</li>\n<li>获取 stok</li>\n</ul>\n<p>获取到 stok 可以做的事情就很多了，可以更改请求参数（具体参数要提前抓取）获取数据、操作路由器，有兴趣的可以根据我的代码自行拓展。</p>\n<p>​</p>\n</li>\n</ul>"},{"title":"用Hexo写博客并部署到GitHub Pages","date":"2016-09-03T14:50:33.000Z","_content":"\n# Hexo常用命令\n\n## 创建新的 Hexo 网站\n\n```bash\nhexo init [folder]\n或在当前目录下创建\nhexo init\n```\n\n## 发表新文章\n\n``` bash\nhexo new \"文章标题\"\n或\nhexo n \"文章标题\"\n```\n执行命令后会在 `Hexo/source/_posts` 文件夹生成 `文章标题.md` 的文件，再用编辑器打开编写；当然也可以直接在该目录创建 Markdown 文件。\n\n\n<!--more-->\n\n## 生成 Hexo 博客静态文件\n\n``` bash\nhexo generate\n或\nhexo g\n```\n\n## 打开 Hexo 本地服务器\n\n``` bash\nhexo server\n或\nhexo s\n```\n\n默认情况下，访问网址：http://localhost:4000/ ，即可在查看本地效果。\n\n# 将博客部署到 GitHub\n\n部署前要编辑 Hexo 站点配置文件 `Hexo/_config.yml`，这样 Hexo 才知道要将你的站点同步到哪里；下面的`repository:`后面记得替换成自己的 GitHub 仓库。\n\n```bash\ndeploy:\n  type: git\n  repository: https://github.com/wish007/wish007.github.io.git\n  branch: master\n```\n\n\n\n下面是部署的命令\n\n``` bash\nhexo clean  # 先清理缓存,有时会因为缓存无法更新主题,实际是删除 Hexo/public 文件夹\nhexo g  # 生成静态文件\nhexo d  # 部署到GitHub\nhexo g -d  # 也可以合在一起\n```\n\n部署到 GitHub 实际上是将 `hexo g` 命令生成的 `Hexo/public` 文件夹复制一份到`Hexo/.deploy_git`，然后将`Hexo/.deploy_git`文件夹同步到 `GitHub用户名.github.io` 这个Repository.\n\n\n\n部署到 GitHub 仓库：[GitHub - wish007/wish007.github.io](https://github.com/wish007/wish007.github.io)\n\nHexo 更多命令：https://hexo.io/zh-cn/docs/commands.html","source":"_posts/用Hexo写博客并部署到GitHub Pages.md","raw":"---\ntitle: 用Hexo写博客并部署到GitHub Pages\ndate: 2016-09-03 22:50:33\ncategories: Hexo\ntags:\n- Hexo\n---\n\n# Hexo常用命令\n\n## 创建新的 Hexo 网站\n\n```bash\nhexo init [folder]\n或在当前目录下创建\nhexo init\n```\n\n## 发表新文章\n\n``` bash\nhexo new \"文章标题\"\n或\nhexo n \"文章标题\"\n```\n执行命令后会在 `Hexo/source/_posts` 文件夹生成 `文章标题.md` 的文件，再用编辑器打开编写；当然也可以直接在该目录创建 Markdown 文件。\n\n\n<!--more-->\n\n## 生成 Hexo 博客静态文件\n\n``` bash\nhexo generate\n或\nhexo g\n```\n\n## 打开 Hexo 本地服务器\n\n``` bash\nhexo server\n或\nhexo s\n```\n\n默认情况下，访问网址：http://localhost:4000/ ，即可在查看本地效果。\n\n# 将博客部署到 GitHub\n\n部署前要编辑 Hexo 站点配置文件 `Hexo/_config.yml`，这样 Hexo 才知道要将你的站点同步到哪里；下面的`repository:`后面记得替换成自己的 GitHub 仓库。\n\n```bash\ndeploy:\n  type: git\n  repository: https://github.com/wish007/wish007.github.io.git\n  branch: master\n```\n\n\n\n下面是部署的命令\n\n``` bash\nhexo clean  # 先清理缓存,有时会因为缓存无法更新主题,实际是删除 Hexo/public 文件夹\nhexo g  # 生成静态文件\nhexo d  # 部署到GitHub\nhexo g -d  # 也可以合在一起\n```\n\n部署到 GitHub 实际上是将 `hexo g` 命令生成的 `Hexo/public` 文件夹复制一份到`Hexo/.deploy_git`，然后将`Hexo/.deploy_git`文件夹同步到 `GitHub用户名.github.io` 这个Repository.\n\n\n\n部署到 GitHub 仓库：[GitHub - wish007/wish007.github.io](https://github.com/wish007/wish007.github.io)\n\nHexo 更多命令：https://hexo.io/zh-cn/docs/commands.html","slug":"用Hexo写博客并部署到GitHub Pages","published":1,"updated":"2016-09-11T11:29:22.178Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz485cob0013koce7ra9g2o3","content":"<h1 id=\"Hexo常用命令\"><a href=\"#Hexo常用命令\" class=\"headerlink\" title=\"Hexo常用命令\"></a>Hexo常用命令</h1><h2 id=\"创建新的-Hexo-网站\"><a href=\"#创建新的-Hexo-网站\" class=\"headerlink\" title=\"创建新的 Hexo 网站\"></a>创建新的 Hexo 网站</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo init [folder]</div><div class=\"line\">或在当前目录下创建</div><div class=\"line\">hexo init</div></pre></td></tr></table></figure>\n<h2 id=\"发表新文章\"><a href=\"#发表新文章\" class=\"headerlink\" title=\"发表新文章\"></a>发表新文章</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo new <span class=\"string\">\"文章标题\"</span></div><div class=\"line\">或</div><div class=\"line\">hexo n <span class=\"string\">\"文章标题\"</span></div></pre></td></tr></table></figure>\n<p>执行命令后会在 <code>Hexo/source/_posts</code> 文件夹生成 <code>文章标题.md</code> 的文件，再用编辑器打开编写；当然也可以直接在该目录创建 Markdown 文件。</p>\n<a id=\"more\"></a>\n<h2 id=\"生成-Hexo-博客静态文件\"><a href=\"#生成-Hexo-博客静态文件\" class=\"headerlink\" title=\"生成 Hexo 博客静态文件\"></a>生成 Hexo 博客静态文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo generate</div><div class=\"line\">或</div><div class=\"line\">hexo g</div></pre></td></tr></table></figure>\n<h2 id=\"打开-Hexo-本地服务器\"><a href=\"#打开-Hexo-本地服务器\" class=\"headerlink\" title=\"打开 Hexo 本地服务器\"></a>打开 Hexo 本地服务器</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo server</div><div class=\"line\">或</div><div class=\"line\">hexo s</div></pre></td></tr></table></figure>\n<p>默认情况下，访问网址：<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"external\">http://localhost:4000/</a> ，即可在查看本地效果。</p>\n<h1 id=\"将博客部署到-GitHub\"><a href=\"#将博客部署到-GitHub\" class=\"headerlink\" title=\"将博客部署到 GitHub\"></a>将博客部署到 GitHub</h1><p>部署前要编辑 Hexo 站点配置文件 <code>Hexo/_config.yml</code>，这样 Hexo 才知道要将你的站点同步到哪里；下面的<code>repository:</code>后面记得替换成自己的 GitHub 仓库。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  <span class=\"built_in\">type</span>: git</div><div class=\"line\">  repository: https://github.com/wish007/wish007.github.io.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure>\n<p>下面是部署的命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo clean  <span class=\"comment\"># 先清理缓存,有时会因为缓存无法更新主题,实际是删除 Hexo/public 文件夹</span></div><div class=\"line\">hexo g  <span class=\"comment\"># 生成静态文件</span></div><div class=\"line\">hexo d  <span class=\"comment\"># 部署到GitHub</span></div><div class=\"line\">hexo g <span class=\"_\">-d</span>  <span class=\"comment\"># 也可以合在一起</span></div></pre></td></tr></table></figure>\n<p>部署到 GitHub 实际上是将 <code>hexo g</code> 命令生成的 <code>Hexo/public</code> 文件夹复制一份到<code>Hexo/.deploy_git</code>，然后将<code>Hexo/.deploy_git</code>文件夹同步到 <code>GitHub用户名.github.io</code> 这个Repository.</p>\n<p>部署到 GitHub 仓库：<a href=\"https://github.com/wish007/wish007.github.io\" target=\"_blank\" rel=\"external\">GitHub - wish007/wish007.github.io</a></p>\n<p>Hexo 更多命令：<a href=\"https://hexo.io/zh-cn/docs/commands.html\" target=\"_blank\" rel=\"external\">https://hexo.io/zh-cn/docs/commands.html</a></p>\n","excerpt":"<h1 id=\"Hexo常用命令\"><a href=\"#Hexo常用命令\" class=\"headerlink\" title=\"Hexo常用命令\"></a>Hexo常用命令</h1><h2 id=\"创建新的-Hexo-网站\"><a href=\"#创建新的-Hexo-网站\" class=\"headerlink\" title=\"创建新的 Hexo 网站\"></a>创建新的 Hexo 网站</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo init [folder]</div><div class=\"line\">或在当前目录下创建</div><div class=\"line\">hexo init</div></pre></td></tr></table></figure>\n<h2 id=\"发表新文章\"><a href=\"#发表新文章\" class=\"headerlink\" title=\"发表新文章\"></a>发表新文章</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo new <span class=\"string\">\"文章标题\"</span></div><div class=\"line\">或</div><div class=\"line\">hexo n <span class=\"string\">\"文章标题\"</span></div></pre></td></tr></table></figure>\n<p>执行命令后会在 <code>Hexo/source/_posts</code> 文件夹生成 <code>文章标题.md</code> 的文件，再用编辑器打开编写；当然也可以直接在该目录创建 Markdown 文件。</p>","more":"<h2 id=\"生成-Hexo-博客静态文件\"><a href=\"#生成-Hexo-博客静态文件\" class=\"headerlink\" title=\"生成 Hexo 博客静态文件\"></a>生成 Hexo 博客静态文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo generate</div><div class=\"line\">或</div><div class=\"line\">hexo g</div></pre></td></tr></table></figure>\n<h2 id=\"打开-Hexo-本地服务器\"><a href=\"#打开-Hexo-本地服务器\" class=\"headerlink\" title=\"打开 Hexo 本地服务器\"></a>打开 Hexo 本地服务器</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo server</div><div class=\"line\">或</div><div class=\"line\">hexo s</div></pre></td></tr></table></figure>\n<p>默认情况下，访问网址：<a href=\"http://localhost:4000/\">http://localhost:4000/</a> ，即可在查看本地效果。</p>\n<h1 id=\"将博客部署到-GitHub\"><a href=\"#将博客部署到-GitHub\" class=\"headerlink\" title=\"将博客部署到 GitHub\"></a>将博客部署到 GitHub</h1><p>部署前要编辑 Hexo 站点配置文件 <code>Hexo/_config.yml</code>，这样 Hexo 才知道要将你的站点同步到哪里；下面的<code>repository:</code>后面记得替换成自己的 GitHub 仓库。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  <span class=\"built_in\">type</span>: git</div><div class=\"line\">  repository: https://github.com/wish007/wish007.github.io.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure>\n<p>下面是部署的命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo clean  <span class=\"comment\"># 先清理缓存,有时会因为缓存无法更新主题,实际是删除 Hexo/public 文件夹</span></div><div class=\"line\">hexo g  <span class=\"comment\"># 生成静态文件</span></div><div class=\"line\">hexo d  <span class=\"comment\"># 部署到GitHub</span></div><div class=\"line\">hexo g <span class=\"_\">-d</span>  <span class=\"comment\"># 也可以合在一起</span></div></pre></td></tr></table></figure>\n<p>部署到 GitHub 实际上是将 <code>hexo g</code> 命令生成的 <code>Hexo/public</code> 文件夹复制一份到<code>Hexo/.deploy_git</code>，然后将<code>Hexo/.deploy_git</code>文件夹同步到 <code>GitHub用户名.github.io</code> 这个Repository.</p>\n<p>部署到 GitHub 仓库：<a href=\"https://github.com/wish007/wish007.github.io\">GitHub - wish007/wish007.github.io</a></p>\n<p>Hexo 更多命令：<a href=\"https://hexo.io/zh-cn/docs/commands.html\">https://hexo.io/zh-cn/docs/commands.html</a></p>"},{"title":"用Requests和BeautifulSoup爬取妹子图","date":"2016-09-10T08:58:47.000Z","_content":"\n# 前言\n\n其实这个爬虫程序已经写好大半年了，中途有做过一些修改，现在觉得有必要记录一下过程。\n\n说到爬虫，大多为了批量爬取各种信息，但我写这个爬虫的初衷倒不是为了妹子图片（虽然真的下载了不少妹子图片⁄(⁄ ⁄•⁄ω⁄•⁄ ⁄)⁄，更多是为了练习 Python 算法和常用库，顺带还了解了 HTTP 请求的一些细节。\n\n# 工具介绍\n\n- [Requests](http://docs.python-requests.org/zh_CN/latest/) ：用来发送 HTTP 请求，获取 HTTP 响应\n- [Beautiful Soup](https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/) ：从获取到的 HTML 文件中提取数据\n- Chrome开发者工具：查看 HTTP 通信过程，读取 HTML 源码\n\n\n<!--more-->\n\n\n# 爬虫程序分析\n\n> 本爬虫程序的目标是爬取[妹子图(www.meizitu.com)](http://www.meizitu.com/)网站上的妹子图片，并按标题分类保存到本地计算机\n\n## GitHub 项目地址：\n\n[GitHub - wish007/crawler](https://github.com/wish007/crawler)\n\n爬取结果\n\n{% asset_img meizitu.png %}\n\n## 爬虫代码：\n\n程序包含直接下载图片到本地的版本和保存图片链接到 SQLite 数据库的版本，后者已经使用面向对象的编程方法重写，重写后结构更加清晰，可以点击上面的项目地址查看。\n\n**重写后：**\n\n```python\nimport requests\nfrom bs4 import BeautifulSoup\nimport sqlite3\n\nheader = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.110 Safari/537.36'\n          }\n\nclass Meizitu():\n\n    def __init__(self, start, end):\n        self.start = start\n        self.end = end\n\n    def url(self):\n        while self.start < self.end:\n            yield 'http://www.meizitu.com/a/%s.html' % self.start\n            self.start +=1\n\n    def picture(self, url):\n        r = requests.get(url, headers=header, timeout=30)\n        r.encoding = 'gb2312'\n        soup = BeautifulSoup(r.text, \"html.parser\")\n        try:\n            title = soup.title.string[:-6]\n            for links in soup.find_all(class_='postContent'):\n                for l in links.find_all('img'):\n                    link = l.get('src')\n                    yield title, link\n        except TypeError:\n            title = 'Empty'\n            link = 'Empty'\n            return title, link\n\n    def save(self, url, title, link):\n        cur.execute(\"INSERT INTO meizitu VALUES ('%s','%s','%s')\" % (url,title,link))\n        print(url + ' 已写入数据库')\n\nif __name__ == '__main__':\n    mzt = Meizitu(500, 520)\n    conn = sqlite3.connect('meizitu.db')\n    cur = conn.cursor()\n    cur.execute('CREATE TABLE IF NOT EXISTS meizitu (page TEXT, title TEXT, url TEXT)')\n    try:\n        for url in mzt.url():\n            for title, link in mzt.picture(url):\n                mzt.save(url, title, link)\n    except KeyboardInterrupt:\n        cur.close()\n        conn.commit()\n        conn.close()\n```\n\n\n\n### meizitu.py 分为 5个函数\n\n- collect_url()\n- collect_picture_link()\n- create_directory()\n- download_picture()\n- run()\n\n#### collect_url()\n\n> 根据妹子图网站页面的 URL 规律，设置需要爬取的起止 URL，最后返回需要将要爬取的 URL 列表\n\n```python\ndef collect_url():\n    \"\"\"创建需要下载图片的网页URL\"\"\"\n\n    url_list = []\n    # 起始网页\n    start = 5420\n    # 结束网页\n    end = 5425\n    while start <= end:\n        url = 'http://www.meizitu.com/a/' + str(start) + '.html'\n        url_list.append(url)\n        start = start + 1\n    return url_list\n```\n\n#### collect_picture_link()\n\n> 使用  Beautiful Soup 的`find_all`方法搜索 HTML 文档树，返回图片的 URL 列表\n\n```python\ndef collect_picture_link(soup):\n    \"\"\"将网页URL中的图片URL抓取出来\"\"\"\n\n    picture_link_list = []\n    for link_node in soup.find_all(id='picture'):\n        for link in link_node.find_all('img'):\n            picture_link_list.append(link.get('src'))\n    return picture_link_list\n```\n\n#### create_directory()\n\n> 创建以网页标题为名称的文件夹来存放图片\n\n```python\ndef create_directory(url, soup):\n    \"\"\"创建以网页标题为名称的文件夹\"\"\"\n\n    title = soup.title.string[:-6]\n    url_cut = len(url) - 5\n    url_id = url[25:url_cut]\n    # Python文件的绝对路径\n    path = os.path.dirname(os.path.realpath(__file__))\n    if os.path.exists(path + '/' + url_id + ' ' + title):\n        None\n    else:\n        os.mkdir(path + '/' + url_id + ' ' + title)\n    dir = path + '/' + url_id + ' ' + title + '/'\n    return dir\n```\n\n#### download_picture()\n\n> 将图片保存到以网页标题为名称的文件夹\n\n```python\ndef download_picture(links, dir, header):\n    \"\"\"下载并保存图片\"\"\"\n\n    i = 1\n    for picture_link in links:\n        picture_name = picture_link[-18:].replace('/','-')\n        if os.path.exists(dir + picture_name):\n            None\n        else:\n            picture = requests.get(picture_link, headers=header, timeout=50)\n            with open(dir + picture_name, 'wb') as file:\n                file.write(picture.content)\n                print('第 ' + str(i) + ' 张完成')\n                i = i + 1\n```\n\n#### run()\n\n> 程序的主函数。\n>\n> 使用 Requests 库的`get`方法发送请求，并用 BeautifulSoup 库和解析器解析网页的响应。\n\n```python\ndef run():\n    # 加入headers模拟浏览器请求\n    header = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.110 Safari/537.36',\n              }\n    url_list = collect_url()\n    for url in url_list:\n        # 加入timeout超时时间\n        response = requests.get(url, headers=header, timeout=30)\n        # 将返回的网页编码强制设定为‘gb2312’，防止request将返回解析为其他编码\n        response.encoding = 'gb2312'\n        # BeautifulSoup的第2个参数是解析器，解析器主要有：自带的Python标准库解析器html.parser、lxml、html5lib\n        soup = BeautifulSoup(response.text, \"html.parser\")\n        links = collect_picture_link(soup)\n        dir = create_directory(url, soup)\n        download_picture(links, dir, header)\n```\n\n\n\n## 保存到 SQLite\n\n> 对于练习 Python 算法来说，其实没有必要真正把图片下载下来，毕竟下载图片比较费时间。倒是可以先把图片的 URL 等信息保存到数据库，将来可以用多线程下载。\n>\n> 将`create_directory()`函数替换为`database()`，去掉`download_picture()`函数即可。\n\n###  database()\n\n> 将网页 URL、网页标题、图片 URL 保存到 SQLite 数据库\n\n```python\ndef database(url,title,link):\n    \"\"\"将网页URL、网页标题、网页中的图片URL保存到SQLite数据库\"\"\"\n\n    # 连接数据库\n    conn = sqlite3.connect('picture_url.db')\n    cur = conn.cursor()\n    # 创建一个表\n    cur.execute('CREATE TABLE IF NOT EXISTS picture (page TEXT, title TEXT, url TEXT)')\n    # 插入数据\n    cur.execute(\"INSERT INTO picture VALUES ('%s','%s','%s')\" % (url,title,link))\n    cur.close()\n    conn.commit()\n    conn.close()\n```\n\n\n\n# To Do\n\n- 多线程爬取网页、多线程下载图片（加快下载速度）\n- 加入 gzip 压缩格式支持（加快下载速度）\n- 增加代理 IP 地址池（防止 IP 被禁用）","source":"_posts/用Requests和BeautifulSoup爬取妹子图.md","raw":"---\ntitle: 用Requests和BeautifulSoup爬取妹子图\ndate: 2016-09-10 16:58:47\ncategories: Python\ntags:\n- Python\n- 爬虫\n---\n\n# 前言\n\n其实这个爬虫程序已经写好大半年了，中途有做过一些修改，现在觉得有必要记录一下过程。\n\n说到爬虫，大多为了批量爬取各种信息，但我写这个爬虫的初衷倒不是为了妹子图片（虽然真的下载了不少妹子图片⁄(⁄ ⁄•⁄ω⁄•⁄ ⁄)⁄，更多是为了练习 Python 算法和常用库，顺带还了解了 HTTP 请求的一些细节。\n\n# 工具介绍\n\n- [Requests](http://docs.python-requests.org/zh_CN/latest/) ：用来发送 HTTP 请求，获取 HTTP 响应\n- [Beautiful Soup](https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/) ：从获取到的 HTML 文件中提取数据\n- Chrome开发者工具：查看 HTTP 通信过程，读取 HTML 源码\n\n\n<!--more-->\n\n\n# 爬虫程序分析\n\n> 本爬虫程序的目标是爬取[妹子图(www.meizitu.com)](http://www.meizitu.com/)网站上的妹子图片，并按标题分类保存到本地计算机\n\n## GitHub 项目地址：\n\n[GitHub - wish007/crawler](https://github.com/wish007/crawler)\n\n爬取结果\n\n{% asset_img meizitu.png %}\n\n## 爬虫代码：\n\n程序包含直接下载图片到本地的版本和保存图片链接到 SQLite 数据库的版本，后者已经使用面向对象的编程方法重写，重写后结构更加清晰，可以点击上面的项目地址查看。\n\n**重写后：**\n\n```python\nimport requests\nfrom bs4 import BeautifulSoup\nimport sqlite3\n\nheader = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.110 Safari/537.36'\n          }\n\nclass Meizitu():\n\n    def __init__(self, start, end):\n        self.start = start\n        self.end = end\n\n    def url(self):\n        while self.start < self.end:\n            yield 'http://www.meizitu.com/a/%s.html' % self.start\n            self.start +=1\n\n    def picture(self, url):\n        r = requests.get(url, headers=header, timeout=30)\n        r.encoding = 'gb2312'\n        soup = BeautifulSoup(r.text, \"html.parser\")\n        try:\n            title = soup.title.string[:-6]\n            for links in soup.find_all(class_='postContent'):\n                for l in links.find_all('img'):\n                    link = l.get('src')\n                    yield title, link\n        except TypeError:\n            title = 'Empty'\n            link = 'Empty'\n            return title, link\n\n    def save(self, url, title, link):\n        cur.execute(\"INSERT INTO meizitu VALUES ('%s','%s','%s')\" % (url,title,link))\n        print(url + ' 已写入数据库')\n\nif __name__ == '__main__':\n    mzt = Meizitu(500, 520)\n    conn = sqlite3.connect('meizitu.db')\n    cur = conn.cursor()\n    cur.execute('CREATE TABLE IF NOT EXISTS meizitu (page TEXT, title TEXT, url TEXT)')\n    try:\n        for url in mzt.url():\n            for title, link in mzt.picture(url):\n                mzt.save(url, title, link)\n    except KeyboardInterrupt:\n        cur.close()\n        conn.commit()\n        conn.close()\n```\n\n\n\n### meizitu.py 分为 5个函数\n\n- collect_url()\n- collect_picture_link()\n- create_directory()\n- download_picture()\n- run()\n\n#### collect_url()\n\n> 根据妹子图网站页面的 URL 规律，设置需要爬取的起止 URL，最后返回需要将要爬取的 URL 列表\n\n```python\ndef collect_url():\n    \"\"\"创建需要下载图片的网页URL\"\"\"\n\n    url_list = []\n    # 起始网页\n    start = 5420\n    # 结束网页\n    end = 5425\n    while start <= end:\n        url = 'http://www.meizitu.com/a/' + str(start) + '.html'\n        url_list.append(url)\n        start = start + 1\n    return url_list\n```\n\n#### collect_picture_link()\n\n> 使用  Beautiful Soup 的`find_all`方法搜索 HTML 文档树，返回图片的 URL 列表\n\n```python\ndef collect_picture_link(soup):\n    \"\"\"将网页URL中的图片URL抓取出来\"\"\"\n\n    picture_link_list = []\n    for link_node in soup.find_all(id='picture'):\n        for link in link_node.find_all('img'):\n            picture_link_list.append(link.get('src'))\n    return picture_link_list\n```\n\n#### create_directory()\n\n> 创建以网页标题为名称的文件夹来存放图片\n\n```python\ndef create_directory(url, soup):\n    \"\"\"创建以网页标题为名称的文件夹\"\"\"\n\n    title = soup.title.string[:-6]\n    url_cut = len(url) - 5\n    url_id = url[25:url_cut]\n    # Python文件的绝对路径\n    path = os.path.dirname(os.path.realpath(__file__))\n    if os.path.exists(path + '/' + url_id + ' ' + title):\n        None\n    else:\n        os.mkdir(path + '/' + url_id + ' ' + title)\n    dir = path + '/' + url_id + ' ' + title + '/'\n    return dir\n```\n\n#### download_picture()\n\n> 将图片保存到以网页标题为名称的文件夹\n\n```python\ndef download_picture(links, dir, header):\n    \"\"\"下载并保存图片\"\"\"\n\n    i = 1\n    for picture_link in links:\n        picture_name = picture_link[-18:].replace('/','-')\n        if os.path.exists(dir + picture_name):\n            None\n        else:\n            picture = requests.get(picture_link, headers=header, timeout=50)\n            with open(dir + picture_name, 'wb') as file:\n                file.write(picture.content)\n                print('第 ' + str(i) + ' 张完成')\n                i = i + 1\n```\n\n#### run()\n\n> 程序的主函数。\n>\n> 使用 Requests 库的`get`方法发送请求，并用 BeautifulSoup 库和解析器解析网页的响应。\n\n```python\ndef run():\n    # 加入headers模拟浏览器请求\n    header = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.110 Safari/537.36',\n              }\n    url_list = collect_url()\n    for url in url_list:\n        # 加入timeout超时时间\n        response = requests.get(url, headers=header, timeout=30)\n        # 将返回的网页编码强制设定为‘gb2312’，防止request将返回解析为其他编码\n        response.encoding = 'gb2312'\n        # BeautifulSoup的第2个参数是解析器，解析器主要有：自带的Python标准库解析器html.parser、lxml、html5lib\n        soup = BeautifulSoup(response.text, \"html.parser\")\n        links = collect_picture_link(soup)\n        dir = create_directory(url, soup)\n        download_picture(links, dir, header)\n```\n\n\n\n## 保存到 SQLite\n\n> 对于练习 Python 算法来说，其实没有必要真正把图片下载下来，毕竟下载图片比较费时间。倒是可以先把图片的 URL 等信息保存到数据库，将来可以用多线程下载。\n>\n> 将`create_directory()`函数替换为`database()`，去掉`download_picture()`函数即可。\n\n###  database()\n\n> 将网页 URL、网页标题、图片 URL 保存到 SQLite 数据库\n\n```python\ndef database(url,title,link):\n    \"\"\"将网页URL、网页标题、网页中的图片URL保存到SQLite数据库\"\"\"\n\n    # 连接数据库\n    conn = sqlite3.connect('picture_url.db')\n    cur = conn.cursor()\n    # 创建一个表\n    cur.execute('CREATE TABLE IF NOT EXISTS picture (page TEXT, title TEXT, url TEXT)')\n    # 插入数据\n    cur.execute(\"INSERT INTO picture VALUES ('%s','%s','%s')\" % (url,title,link))\n    cur.close()\n    conn.commit()\n    conn.close()\n```\n\n\n\n# To Do\n\n- 多线程爬取网页、多线程下载图片（加快下载速度）\n- 加入 gzip 压缩格式支持（加快下载速度）\n- 增加代理 IP 地址池（防止 IP 被禁用）","slug":"用Requests和BeautifulSoup爬取妹子图","published":1,"updated":"2016-12-26T14:45:39.202Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz485coh0016koce45erpgqj","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>其实这个爬虫程序已经写好大半年了，中途有做过一些修改，现在觉得有必要记录一下过程。</p>\n<p>说到爬虫，大多为了批量爬取各种信息，但我写这个爬虫的初衷倒不是为了妹子图片（虽然真的下载了不少妹子图片⁄(⁄ ⁄•⁄ω⁄•⁄ ⁄)⁄，更多是为了练习 Python 算法和常用库，顺带还了解了 HTTP 请求的一些细节。</p>\n<h1 id=\"工具介绍\"><a href=\"#工具介绍\" class=\"headerlink\" title=\"工具介绍\"></a>工具介绍</h1><ul>\n<li><a href=\"http://docs.python-requests.org/zh_CN/latest/\" target=\"_blank\" rel=\"external\">Requests</a> ：用来发送 HTTP 请求，获取 HTTP 响应</li>\n<li><a href=\"https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/\" target=\"_blank\" rel=\"external\">Beautiful Soup</a> ：从获取到的 HTML 文件中提取数据</li>\n<li>Chrome开发者工具：查看 HTTP 通信过程，读取 HTML 源码</li>\n</ul>\n<a id=\"more\"></a>\n<h1 id=\"爬虫程序分析\"><a href=\"#爬虫程序分析\" class=\"headerlink\" title=\"爬虫程序分析\"></a>爬虫程序分析</h1><blockquote>\n<p>本爬虫程序的目标是爬取<a href=\"http://www.meizitu.com/\" target=\"_blank\" rel=\"external\">妹子图(www.meizitu.com)</a>网站上的妹子图片，并按标题分类保存到本地计算机</p>\n</blockquote>\n<h2 id=\"GitHub-项目地址：\"><a href=\"#GitHub-项目地址：\" class=\"headerlink\" title=\"GitHub 项目地址：\"></a>GitHub 项目地址：</h2><p><a href=\"https://github.com/wish007/crawler\" target=\"_blank\" rel=\"external\">GitHub - wish007/crawler</a></p>\n<p>爬取结果</p>\n<img src=\"/2016/09/10/用Requests和BeautifulSoup爬取妹子图/meizitu.png\" alt=\"meizitu.png\" title=\"\">\n<h2 id=\"爬虫代码：\"><a href=\"#爬虫代码：\" class=\"headerlink\" title=\"爬虫代码：\"></a>爬虫代码：</h2><p>程序包含直接下载图片到本地的版本和保存图片链接到 SQLite 数据库的版本，后者已经使用面向对象的编程方法重写，重写后结构更加清晰，可以点击上面的项目地址查看。</p>\n<p><strong>重写后：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> requests</div><div class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</div><div class=\"line\"><span class=\"keyword\">import</span> sqlite3</div><div class=\"line\"></div><div class=\"line\">header = &#123;<span class=\"string\">'User-Agent'</span>: <span class=\"string\">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.110 Safari/537.36'</span></div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meizitu</span><span class=\"params\">()</span>:</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, start, end)</span>:</span></div><div class=\"line\">        self.start = start</div><div class=\"line\">        self.end = end</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">url</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">while</span> self.start &lt; self.end:</div><div class=\"line\">            <span class=\"keyword\">yield</span> <span class=\"string\">'http://www.meizitu.com/a/%s.html'</span> % self.start</div><div class=\"line\">            self.start +=<span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">picture</span><span class=\"params\">(self, url)</span>:</span></div><div class=\"line\">        r = requests.get(url, headers=header, timeout=<span class=\"number\">30</span>)</div><div class=\"line\">        r.encoding = <span class=\"string\">'gb2312'</span></div><div class=\"line\">        soup = BeautifulSoup(r.text, <span class=\"string\">\"html.parser\"</span>)</div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            title = soup.title.string[:<span class=\"number\">-6</span>]</div><div class=\"line\">            <span class=\"keyword\">for</span> links <span class=\"keyword\">in</span> soup.find_all(class_=<span class=\"string\">'postContent'</span>):</div><div class=\"line\">                <span class=\"keyword\">for</span> l <span class=\"keyword\">in</span> links.find_all(<span class=\"string\">'img'</span>):</div><div class=\"line\">                    link = l.get(<span class=\"string\">'src'</span>)</div><div class=\"line\">                    <span class=\"keyword\">yield</span> title, link</div><div class=\"line\">        <span class=\"keyword\">except</span> TypeError:</div><div class=\"line\">            title = <span class=\"string\">'Empty'</span></div><div class=\"line\">            link = <span class=\"string\">'Empty'</span></div><div class=\"line\">            <span class=\"keyword\">return</span> title, link</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">save</span><span class=\"params\">(self, url, title, link)</span>:</span></div><div class=\"line\">        cur.execute(<span class=\"string\">\"INSERT INTO meizitu VALUES ('%s','%s','%s')\"</span> % (url,title,link))</div><div class=\"line\">        print(url + <span class=\"string\">' 已写入数据库'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    mzt = Meizitu(<span class=\"number\">500</span>, <span class=\"number\">520</span>)</div><div class=\"line\">    conn = sqlite3.connect(<span class=\"string\">'meizitu.db'</span>)</div><div class=\"line\">    cur = conn.cursor()</div><div class=\"line\">    cur.execute(<span class=\"string\">'CREATE TABLE IF NOT EXISTS meizitu (page TEXT, title TEXT, url TEXT)'</span>)</div><div class=\"line\">    <span class=\"keyword\">try</span>:</div><div class=\"line\">        <span class=\"keyword\">for</span> url <span class=\"keyword\">in</span> mzt.url():</div><div class=\"line\">            <span class=\"keyword\">for</span> title, link <span class=\"keyword\">in</span> mzt.picture(url):</div><div class=\"line\">                mzt.save(url, title, link)</div><div class=\"line\">    <span class=\"keyword\">except</span> KeyboardInterrupt:</div><div class=\"line\">        cur.close()</div><div class=\"line\">        conn.commit()</div><div class=\"line\">        conn.close()</div></pre></td></tr></table></figure>\n<h3 id=\"meizitu-py-分为-5个函数\"><a href=\"#meizitu-py-分为-5个函数\" class=\"headerlink\" title=\"meizitu.py 分为 5个函数\"></a>meizitu.py 分为 5个函数</h3><ul>\n<li>collect_url()</li>\n<li>collect_picture_link()</li>\n<li>create_directory()</li>\n<li>download_picture()</li>\n<li>run()</li>\n</ul>\n<h4 id=\"collect-url\"><a href=\"#collect-url\" class=\"headerlink\" title=\"collect_url()\"></a>collect_url()</h4><blockquote>\n<p>根据妹子图网站页面的 URL 规律，设置需要爬取的起止 URL，最后返回需要将要爬取的 URL 列表</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">collect_url</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"创建需要下载图片的网页URL\"\"\"</span></div><div class=\"line\"></div><div class=\"line\">    url_list = []</div><div class=\"line\">    <span class=\"comment\"># 起始网页</span></div><div class=\"line\">    start = <span class=\"number\">5420</span></div><div class=\"line\">    <span class=\"comment\"># 结束网页</span></div><div class=\"line\">    end = <span class=\"number\">5425</span></div><div class=\"line\">    <span class=\"keyword\">while</span> start &lt;= end:</div><div class=\"line\">        url = <span class=\"string\">'http://www.meizitu.com/a/'</span> + str(start) + <span class=\"string\">'.html'</span></div><div class=\"line\">        url_list.append(url)</div><div class=\"line\">        start = start + <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">return</span> url_list</div></pre></td></tr></table></figure>\n<h4 id=\"collect-picture-link\"><a href=\"#collect-picture-link\" class=\"headerlink\" title=\"collect_picture_link()\"></a>collect_picture_link()</h4><blockquote>\n<p>使用  Beautiful Soup 的<code>find_all</code>方法搜索 HTML 文档树，返回图片的 URL 列表</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">collect_picture_link</span><span class=\"params\">(soup)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"将网页URL中的图片URL抓取出来\"\"\"</span></div><div class=\"line\"></div><div class=\"line\">    picture_link_list = []</div><div class=\"line\">    <span class=\"keyword\">for</span> link_node <span class=\"keyword\">in</span> soup.find_all(id=<span class=\"string\">'picture'</span>):</div><div class=\"line\">        <span class=\"keyword\">for</span> link <span class=\"keyword\">in</span> link_node.find_all(<span class=\"string\">'img'</span>):</div><div class=\"line\">            picture_link_list.append(link.get(<span class=\"string\">'src'</span>))</div><div class=\"line\">    <span class=\"keyword\">return</span> picture_link_list</div></pre></td></tr></table></figure>\n<h4 id=\"create-directory\"><a href=\"#create-directory\" class=\"headerlink\" title=\"create_directory()\"></a>create_directory()</h4><blockquote>\n<p>创建以网页标题为名称的文件夹来存放图片</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create_directory</span><span class=\"params\">(url, soup)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"创建以网页标题为名称的文件夹\"\"\"</span></div><div class=\"line\"></div><div class=\"line\">    title = soup.title.string[:<span class=\"number\">-6</span>]</div><div class=\"line\">    url_cut = len(url) - <span class=\"number\">5</span></div><div class=\"line\">    url_id = url[<span class=\"number\">25</span>:url_cut]</div><div class=\"line\">    <span class=\"comment\"># Python文件的绝对路径</span></div><div class=\"line\">    path = os.path.dirname(os.path.realpath(__file__))</div><div class=\"line\">    <span class=\"keyword\">if</span> os.path.exists(path + <span class=\"string\">'/'</span> + url_id + <span class=\"string\">' '</span> + title):</div><div class=\"line\">        <span class=\"keyword\">None</span></div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        os.mkdir(path + <span class=\"string\">'/'</span> + url_id + <span class=\"string\">' '</span> + title)</div><div class=\"line\">    dir = path + <span class=\"string\">'/'</span> + url_id + <span class=\"string\">' '</span> + title + <span class=\"string\">'/'</span></div><div class=\"line\">    <span class=\"keyword\">return</span> dir</div></pre></td></tr></table></figure>\n<h4 id=\"download-picture\"><a href=\"#download-picture\" class=\"headerlink\" title=\"download_picture()\"></a>download_picture()</h4><blockquote>\n<p>将图片保存到以网页标题为名称的文件夹</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">download_picture</span><span class=\"params\">(links, dir, header)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"下载并保存图片\"\"\"</span></div><div class=\"line\"></div><div class=\"line\">    i = <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">for</span> picture_link <span class=\"keyword\">in</span> links:</div><div class=\"line\">        picture_name = picture_link[<span class=\"number\">-18</span>:].replace(<span class=\"string\">'/'</span>,<span class=\"string\">'-'</span>)</div><div class=\"line\">        <span class=\"keyword\">if</span> os.path.exists(dir + picture_name):</div><div class=\"line\">            <span class=\"keyword\">None</span></div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            picture = requests.get(picture_link, headers=header, timeout=<span class=\"number\">50</span>)</div><div class=\"line\">            <span class=\"keyword\">with</span> open(dir + picture_name, <span class=\"string\">'wb'</span>) <span class=\"keyword\">as</span> file:</div><div class=\"line\">                file.write(picture.content)</div><div class=\"line\">                print(<span class=\"string\">'第 '</span> + str(i) + <span class=\"string\">' 张完成'</span>)</div><div class=\"line\">                i = i + <span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<h4 id=\"run\"><a href=\"#run\" class=\"headerlink\" title=\"run()\"></a>run()</h4><blockquote>\n<p>程序的主函数。</p>\n<p>使用 Requests 库的<code>get</code>方法发送请求，并用 BeautifulSoup 库和解析器解析网页的响应。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"comment\"># 加入headers模拟浏览器请求</span></div><div class=\"line\">    header = &#123;<span class=\"string\">'User-Agent'</span>: <span class=\"string\">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.110 Safari/537.36'</span>,</div><div class=\"line\">              &#125;</div><div class=\"line\">    url_list = collect_url()</div><div class=\"line\">    <span class=\"keyword\">for</span> url <span class=\"keyword\">in</span> url_list:</div><div class=\"line\">        <span class=\"comment\"># 加入timeout超时时间</span></div><div class=\"line\">        response = requests.get(url, headers=header, timeout=<span class=\"number\">30</span>)</div><div class=\"line\">        <span class=\"comment\"># 将返回的网页编码强制设定为‘gb2312’，防止request将返回解析为其他编码</span></div><div class=\"line\">        response.encoding = <span class=\"string\">'gb2312'</span></div><div class=\"line\">        <span class=\"comment\"># BeautifulSoup的第2个参数是解析器，解析器主要有：自带的Python标准库解析器html.parser、lxml、html5lib</span></div><div class=\"line\">        soup = BeautifulSoup(response.text, <span class=\"string\">\"html.parser\"</span>)</div><div class=\"line\">        links = collect_picture_link(soup)</div><div class=\"line\">        dir = create_directory(url, soup)</div><div class=\"line\">        download_picture(links, dir, header)</div></pre></td></tr></table></figure>\n<h2 id=\"保存到-SQLite\"><a href=\"#保存到-SQLite\" class=\"headerlink\" title=\"保存到 SQLite\"></a>保存到 SQLite</h2><blockquote>\n<p>对于练习 Python 算法来说，其实没有必要真正把图片下载下来，毕竟下载图片比较费时间。倒是可以先把图片的 URL 等信息保存到数据库，将来可以用多线程下载。</p>\n<p>将<code>create_directory()</code>函数替换为<code>database()</code>，去掉<code>download_picture()</code>函数即可。</p>\n</blockquote>\n<h3 id=\"database\"><a href=\"#database\" class=\"headerlink\" title=\"database()\"></a>database()</h3><blockquote>\n<p>将网页 URL、网页标题、图片 URL 保存到 SQLite 数据库</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">database</span><span class=\"params\">(url,title,link)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"将网页URL、网页标题、网页中的图片URL保存到SQLite数据库\"\"\"</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 连接数据库</span></div><div class=\"line\">    conn = sqlite3.connect(<span class=\"string\">'picture_url.db'</span>)</div><div class=\"line\">    cur = conn.cursor()</div><div class=\"line\">    <span class=\"comment\"># 创建一个表</span></div><div class=\"line\">    cur.execute(<span class=\"string\">'CREATE TABLE IF NOT EXISTS picture (page TEXT, title TEXT, url TEXT)'</span>)</div><div class=\"line\">    <span class=\"comment\"># 插入数据</span></div><div class=\"line\">    cur.execute(<span class=\"string\">\"INSERT INTO picture VALUES ('%s','%s','%s')\"</span> % (url,title,link))</div><div class=\"line\">    cur.close()</div><div class=\"line\">    conn.commit()</div><div class=\"line\">    conn.close()</div></pre></td></tr></table></figure>\n<h1 id=\"To-Do\"><a href=\"#To-Do\" class=\"headerlink\" title=\"To Do\"></a>To Do</h1><ul>\n<li>多线程爬取网页、多线程下载图片（加快下载速度）</li>\n<li>加入 gzip 压缩格式支持（加快下载速度）</li>\n<li>增加代理 IP 地址池（防止 IP 被禁用）</li>\n</ul>\n","excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>其实这个爬虫程序已经写好大半年了，中途有做过一些修改，现在觉得有必要记录一下过程。</p>\n<p>说到爬虫，大多为了批量爬取各种信息，但我写这个爬虫的初衷倒不是为了妹子图片（虽然真的下载了不少妹子图片⁄(⁄ ⁄•⁄ω⁄•⁄ ⁄)⁄，更多是为了练习 Python 算法和常用库，顺带还了解了 HTTP 请求的一些细节。</p>\n<h1 id=\"工具介绍\"><a href=\"#工具介绍\" class=\"headerlink\" title=\"工具介绍\"></a>工具介绍</h1><ul>\n<li><a href=\"http://docs.python-requests.org/zh_CN/latest/\">Requests</a> ：用来发送 HTTP 请求，获取 HTTP 响应</li>\n<li><a href=\"https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/\">Beautiful Soup</a> ：从获取到的 HTML 文件中提取数据</li>\n<li>Chrome开发者工具：查看 HTTP 通信过程，读取 HTML 源码</li>\n</ul>","more":"<h1 id=\"爬虫程序分析\"><a href=\"#爬虫程序分析\" class=\"headerlink\" title=\"爬虫程序分析\"></a>爬虫程序分析</h1><blockquote>\n<p>本爬虫程序的目标是爬取<a href=\"http://www.meizitu.com/\">妹子图(www.meizitu.com)</a>网站上的妹子图片，并按标题分类保存到本地计算机</p>\n</blockquote>\n<h2 id=\"GitHub-项目地址：\"><a href=\"#GitHub-项目地址：\" class=\"headerlink\" title=\"GitHub 项目地址：\"></a>GitHub 项目地址：</h2><p><a href=\"https://github.com/wish007/crawler\">GitHub - wish007/crawler</a></p>\n<p>爬取结果</p>\n<img src=\"/2016/09/10/用Requests和BeautifulSoup爬取妹子图/meizitu.png\" alt=\"meizitu.png\" title=\"\">\n<h2 id=\"爬虫代码：\"><a href=\"#爬虫代码：\" class=\"headerlink\" title=\"爬虫代码：\"></a>爬虫代码：</h2><p>程序包含直接下载图片到本地的版本和保存图片链接到 SQLite 数据库的版本，后者已经使用面向对象的编程方法重写，重写后结构更加清晰，可以点击上面的项目地址查看。</p>\n<p><strong>重写后：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> requests</div><div class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</div><div class=\"line\"><span class=\"keyword\">import</span> sqlite3</div><div class=\"line\"></div><div class=\"line\">header = &#123;<span class=\"string\">'User-Agent'</span>: <span class=\"string\">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.110 Safari/537.36'</span></div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meizitu</span><span class=\"params\">()</span>:</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, start, end)</span>:</span></div><div class=\"line\">        self.start = start</div><div class=\"line\">        self.end = end</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">url</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">while</span> self.start &lt; self.end:</div><div class=\"line\">            <span class=\"keyword\">yield</span> <span class=\"string\">'http://www.meizitu.com/a/%s.html'</span> % self.start</div><div class=\"line\">            self.start +=<span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">picture</span><span class=\"params\">(self, url)</span>:</span></div><div class=\"line\">        r = requests.get(url, headers=header, timeout=<span class=\"number\">30</span>)</div><div class=\"line\">        r.encoding = <span class=\"string\">'gb2312'</span></div><div class=\"line\">        soup = BeautifulSoup(r.text, <span class=\"string\">\"html.parser\"</span>)</div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            title = soup.title.string[:<span class=\"number\">-6</span>]</div><div class=\"line\">            <span class=\"keyword\">for</span> links <span class=\"keyword\">in</span> soup.find_all(class_=<span class=\"string\">'postContent'</span>):</div><div class=\"line\">                <span class=\"keyword\">for</span> l <span class=\"keyword\">in</span> links.find_all(<span class=\"string\">'img'</span>):</div><div class=\"line\">                    link = l.get(<span class=\"string\">'src'</span>)</div><div class=\"line\">                    <span class=\"keyword\">yield</span> title, link</div><div class=\"line\">        <span class=\"keyword\">except</span> TypeError:</div><div class=\"line\">            title = <span class=\"string\">'Empty'</span></div><div class=\"line\">            link = <span class=\"string\">'Empty'</span></div><div class=\"line\">            <span class=\"keyword\">return</span> title, link</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">save</span><span class=\"params\">(self, url, title, link)</span>:</span></div><div class=\"line\">        cur.execute(<span class=\"string\">\"INSERT INTO meizitu VALUES ('%s','%s','%s')\"</span> % (url,title,link))</div><div class=\"line\">        print(url + <span class=\"string\">' 已写入数据库'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    mzt = Meizitu(<span class=\"number\">500</span>, <span class=\"number\">520</span>)</div><div class=\"line\">    conn = sqlite3.connect(<span class=\"string\">'meizitu.db'</span>)</div><div class=\"line\">    cur = conn.cursor()</div><div class=\"line\">    cur.execute(<span class=\"string\">'CREATE TABLE IF NOT EXISTS meizitu (page TEXT, title TEXT, url TEXT)'</span>)</div><div class=\"line\">    <span class=\"keyword\">try</span>:</div><div class=\"line\">        <span class=\"keyword\">for</span> url <span class=\"keyword\">in</span> mzt.url():</div><div class=\"line\">            <span class=\"keyword\">for</span> title, link <span class=\"keyword\">in</span> mzt.picture(url):</div><div class=\"line\">                mzt.save(url, title, link)</div><div class=\"line\">    <span class=\"keyword\">except</span> KeyboardInterrupt:</div><div class=\"line\">        cur.close()</div><div class=\"line\">        conn.commit()</div><div class=\"line\">        conn.close()</div></pre></td></tr></table></figure>\n<h3 id=\"meizitu-py-分为-5个函数\"><a href=\"#meizitu-py-分为-5个函数\" class=\"headerlink\" title=\"meizitu.py 分为 5个函数\"></a>meizitu.py 分为 5个函数</h3><ul>\n<li>collect_url()</li>\n<li>collect_picture_link()</li>\n<li>create_directory()</li>\n<li>download_picture()</li>\n<li>run()</li>\n</ul>\n<h4 id=\"collect-url\"><a href=\"#collect-url\" class=\"headerlink\" title=\"collect_url()\"></a>collect_url()</h4><blockquote>\n<p>根据妹子图网站页面的 URL 规律，设置需要爬取的起止 URL，最后返回需要将要爬取的 URL 列表</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">collect_url</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"创建需要下载图片的网页URL\"\"\"</span></div><div class=\"line\"></div><div class=\"line\">    url_list = []</div><div class=\"line\">    <span class=\"comment\"># 起始网页</span></div><div class=\"line\">    start = <span class=\"number\">5420</span></div><div class=\"line\">    <span class=\"comment\"># 结束网页</span></div><div class=\"line\">    end = <span class=\"number\">5425</span></div><div class=\"line\">    <span class=\"keyword\">while</span> start &lt;= end:</div><div class=\"line\">        url = <span class=\"string\">'http://www.meizitu.com/a/'</span> + str(start) + <span class=\"string\">'.html'</span></div><div class=\"line\">        url_list.append(url)</div><div class=\"line\">        start = start + <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">return</span> url_list</div></pre></td></tr></table></figure>\n<h4 id=\"collect-picture-link\"><a href=\"#collect-picture-link\" class=\"headerlink\" title=\"collect_picture_link()\"></a>collect_picture_link()</h4><blockquote>\n<p>使用  Beautiful Soup 的<code>find_all</code>方法搜索 HTML 文档树，返回图片的 URL 列表</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">collect_picture_link</span><span class=\"params\">(soup)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"将网页URL中的图片URL抓取出来\"\"\"</span></div><div class=\"line\"></div><div class=\"line\">    picture_link_list = []</div><div class=\"line\">    <span class=\"keyword\">for</span> link_node <span class=\"keyword\">in</span> soup.find_all(id=<span class=\"string\">'picture'</span>):</div><div class=\"line\">        <span class=\"keyword\">for</span> link <span class=\"keyword\">in</span> link_node.find_all(<span class=\"string\">'img'</span>):</div><div class=\"line\">            picture_link_list.append(link.get(<span class=\"string\">'src'</span>))</div><div class=\"line\">    <span class=\"keyword\">return</span> picture_link_list</div></pre></td></tr></table></figure>\n<h4 id=\"create-directory\"><a href=\"#create-directory\" class=\"headerlink\" title=\"create_directory()\"></a>create_directory()</h4><blockquote>\n<p>创建以网页标题为名称的文件夹来存放图片</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create_directory</span><span class=\"params\">(url, soup)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"创建以网页标题为名称的文件夹\"\"\"</span></div><div class=\"line\"></div><div class=\"line\">    title = soup.title.string[:<span class=\"number\">-6</span>]</div><div class=\"line\">    url_cut = len(url) - <span class=\"number\">5</span></div><div class=\"line\">    url_id = url[<span class=\"number\">25</span>:url_cut]</div><div class=\"line\">    <span class=\"comment\"># Python文件的绝对路径</span></div><div class=\"line\">    path = os.path.dirname(os.path.realpath(__file__))</div><div class=\"line\">    <span class=\"keyword\">if</span> os.path.exists(path + <span class=\"string\">'/'</span> + url_id + <span class=\"string\">' '</span> + title):</div><div class=\"line\">        <span class=\"keyword\">None</span></div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        os.mkdir(path + <span class=\"string\">'/'</span> + url_id + <span class=\"string\">' '</span> + title)</div><div class=\"line\">    dir = path + <span class=\"string\">'/'</span> + url_id + <span class=\"string\">' '</span> + title + <span class=\"string\">'/'</span></div><div class=\"line\">    <span class=\"keyword\">return</span> dir</div></pre></td></tr></table></figure>\n<h4 id=\"download-picture\"><a href=\"#download-picture\" class=\"headerlink\" title=\"download_picture()\"></a>download_picture()</h4><blockquote>\n<p>将图片保存到以网页标题为名称的文件夹</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">download_picture</span><span class=\"params\">(links, dir, header)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"下载并保存图片\"\"\"</span></div><div class=\"line\"></div><div class=\"line\">    i = <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">for</span> picture_link <span class=\"keyword\">in</span> links:</div><div class=\"line\">        picture_name = picture_link[<span class=\"number\">-18</span>:].replace(<span class=\"string\">'/'</span>,<span class=\"string\">'-'</span>)</div><div class=\"line\">        <span class=\"keyword\">if</span> os.path.exists(dir + picture_name):</div><div class=\"line\">            <span class=\"keyword\">None</span></div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            picture = requests.get(picture_link, headers=header, timeout=<span class=\"number\">50</span>)</div><div class=\"line\">            <span class=\"keyword\">with</span> open(dir + picture_name, <span class=\"string\">'wb'</span>) <span class=\"keyword\">as</span> file:</div><div class=\"line\">                file.write(picture.content)</div><div class=\"line\">                print(<span class=\"string\">'第 '</span> + str(i) + <span class=\"string\">' 张完成'</span>)</div><div class=\"line\">                i = i + <span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<h4 id=\"run\"><a href=\"#run\" class=\"headerlink\" title=\"run()\"></a>run()</h4><blockquote>\n<p>程序的主函数。</p>\n<p>使用 Requests 库的<code>get</code>方法发送请求，并用 BeautifulSoup 库和解析器解析网页的响应。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"comment\"># 加入headers模拟浏览器请求</span></div><div class=\"line\">    header = &#123;<span class=\"string\">'User-Agent'</span>: <span class=\"string\">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.110 Safari/537.36'</span>,</div><div class=\"line\">              &#125;</div><div class=\"line\">    url_list = collect_url()</div><div class=\"line\">    <span class=\"keyword\">for</span> url <span class=\"keyword\">in</span> url_list:</div><div class=\"line\">        <span class=\"comment\"># 加入timeout超时时间</span></div><div class=\"line\">        response = requests.get(url, headers=header, timeout=<span class=\"number\">30</span>)</div><div class=\"line\">        <span class=\"comment\"># 将返回的网页编码强制设定为‘gb2312’，防止request将返回解析为其他编码</span></div><div class=\"line\">        response.encoding = <span class=\"string\">'gb2312'</span></div><div class=\"line\">        <span class=\"comment\"># BeautifulSoup的第2个参数是解析器，解析器主要有：自带的Python标准库解析器html.parser、lxml、html5lib</span></div><div class=\"line\">        soup = BeautifulSoup(response.text, <span class=\"string\">\"html.parser\"</span>)</div><div class=\"line\">        links = collect_picture_link(soup)</div><div class=\"line\">        dir = create_directory(url, soup)</div><div class=\"line\">        download_picture(links, dir, header)</div></pre></td></tr></table></figure>\n<h2 id=\"保存到-SQLite\"><a href=\"#保存到-SQLite\" class=\"headerlink\" title=\"保存到 SQLite\"></a>保存到 SQLite</h2><blockquote>\n<p>对于练习 Python 算法来说，其实没有必要真正把图片下载下来，毕竟下载图片比较费时间。倒是可以先把图片的 URL 等信息保存到数据库，将来可以用多线程下载。</p>\n<p>将<code>create_directory()</code>函数替换为<code>database()</code>，去掉<code>download_picture()</code>函数即可。</p>\n</blockquote>\n<h3 id=\"database\"><a href=\"#database\" class=\"headerlink\" title=\"database()\"></a>database()</h3><blockquote>\n<p>将网页 URL、网页标题、图片 URL 保存到 SQLite 数据库</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">database</span><span class=\"params\">(url,title,link)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"将网页URL、网页标题、网页中的图片URL保存到SQLite数据库\"\"\"</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># 连接数据库</span></div><div class=\"line\">    conn = sqlite3.connect(<span class=\"string\">'picture_url.db'</span>)</div><div class=\"line\">    cur = conn.cursor()</div><div class=\"line\">    <span class=\"comment\"># 创建一个表</span></div><div class=\"line\">    cur.execute(<span class=\"string\">'CREATE TABLE IF NOT EXISTS picture (page TEXT, title TEXT, url TEXT)'</span>)</div><div class=\"line\">    <span class=\"comment\"># 插入数据</span></div><div class=\"line\">    cur.execute(<span class=\"string\">\"INSERT INTO picture VALUES ('%s','%s','%s')\"</span> % (url,title,link))</div><div class=\"line\">    cur.close()</div><div class=\"line\">    conn.commit()</div><div class=\"line\">    conn.close()</div></pre></td></tr></table></figure>\n<h1 id=\"To-Do\"><a href=\"#To-Do\" class=\"headerlink\" title=\"To Do\"></a>To Do</h1><ul>\n<li>多线程爬取网页、多线程下载图片（加快下载速度）</li>\n<li>加入 gzip 压缩格式支持（加快下载速度）</li>\n<li>增加代理 IP 地址池（防止 IP 被禁用）</li>\n</ul>"},{"title":"知乎爬虫","date":"2016-11-05T06:19:40.000Z","_content":"\n\n\n# 前言\n\n[知乎](http://www.zhihu.com/)是一个有趣的网站，当前（2016.11.05） [Alexa 全球排名](http://www.alexa.com/siteinfo/zhihu.com)为 112 ，中国排名为 24 ，从趋势看排名仍会上升，相对活跃的用户群为知乎沉淀了大量的数据，是否可以转化这些数据来做一些有趣的东西就看大家的想象力了。\n\n想必很多人都爬取过知乎，知乎的反爬虫机制也越来越强，攻防双方都在不断地升级。这篇文章只涉及到登录知乎，完成后再拓展其他功能。\n\n\n\n# Python库\n\n- [Requests](http://docs.python-requests.org/zh_CN/latest/) ：HTTP for Humans \n- [Pillow](https://pypi.python.org/pypi/Pillow/3.4.2) ：Python 图像处理库\n- Chrome开发者工具：获取 HTTP 通信过程\n\n\n\n\n# 获取登录参数\n\n打开知乎登录页面，可以看到有手机号和邮箱为账号名 2 种登录方式，尝试输入手机号、邮箱分别从 Network 控制台查看；记得勾上`Preserve log`，否则会看不到发送账号、密码的请求。\n\n<!--more-->\n\n{% asset_img 手机号登录.png 手机号登录 %}\n\n\n\n{% asset_img 手机号FormData.png 手机号Form Data %}\n\n\n\n{% asset_img 邮箱登录.png 邮箱登录 %}\n\n\n\n{% asset_img 邮箱FormData.png 邮箱Form Data %}\n\n\n\n从图上可以看到：\n\n手机号登录的请求 URL ：https://www.zhihu.com/login/phone_num\n\npassword、phone_num 分别为密码、手机号\n\n邮箱登录的请求 URL ：https://www.zhihu.com/login/email\n\npassword、email 分别为密码、邮箱\n\n但它们都有一个参数 _xsrf 的值来源不明，看名字很容易猜想是一个防止跨站请求伪造的参数，在点击“登录”按钮前就已经产生，根据它的值在页面的 HTML 文件中可以搜索到：\n\n{% asset_img xsrf.png xsrf %}\n\n**获取 _xsrf 的函数：**\n\n```python\ndef get_xsrf():\n    \"\"\"\n    获取_xrsf\n    \"\"\"\n    response = session.get('https://www.zhihu.com', headers=headers)\n    html = response.text\n    pattern = re.compile(r'<input type=\"hidden\" name=\"_xsrf\" value=\"(.*?)\"/>')\n    _xsrf = re.findall(pattern, html)\n    return _xsrf[0]\n```\n\n\n\n至此所有的登录参数都找到了，根据这些参数发送登录请求，会返回类似这样的响应：\n\n```json\n{\n    \"r\": 1,\n    \"errcode\": 100000,\n    \n    \"data\": {\"account\":\"\\u5e10\\u53f7\\u6216\\u5bc6\\u7801\\u9519\\u8bef\"},\n    \n    \n    \"msg\": \"\\u8be5\\u624b\\u673a\\u53f7\\u5c1a\\u672a\\u6ce8\\u518c\\u77e5\\u4e4e\"\n    \n}\n```\n\n对比成功登录和登录失败，发现返回`\"r\": 0`表示登录成功，`\"r\": 1`表示登录失败。然而尝试了几次登录之后，后面的登录都失败了，从浏览器中发现有时会出现验证码的情况，仅仅发送前面发现的几个参数还不够，从控制台中看到英文、中文验证码分别对应下面 2 种 Form Data：\n\n{% asset_img 英文验证码.png 英文验证码 %}\n\n\n\n参数值就是验证码中的英文字母\n\n{% asset_img 中文验证码.png 中文验证码 %}\n\n\n\n{% asset_img 验证码分辨率.png 验证码分辨率 %}\n\n\n\n{% asset_img 中文验证码FormData.png 中文验证码Form Data %}\n\n\n\n增加一个参数值`captcha_type: cn`，`captcha`的`img_size`分别是图片横纵分辨率的 1/2 ，`input_points`是点击的标记在图中坐标系中的坐标。\n\n\n\n# 获取验证码\n\n从控制台中查看获取验证码的请求：\n\n{% asset_img 获取验证码.png 获取验证码 %}\n\n\n\n可以看到验证码的请求 URL ：https://www.zhihu.com/captcha.gif?r=1478334713478&type=login ，并且每次刷新验证码的请求 URL 都不一样，Google 求救后发现`r`后面的参数是一个时间戳。\n\n> 时间戳是指格林尼治时间1970年01月01日00时00分00秒(北京时间1970年01月01日08时00分00秒)起至现在的总秒数。\n\n无论是英文字母还是倒立中文的验证码，识别起来都比较困难，暂时只能采用人工识别的方式输入验证码，自动识别验证码可以在以后学习图像处理时挑战一下。\n\n**获取验证码的函数：**\n\n```python\ndef get_captcha():\n    \"\"\"\n    获取验证码\n    \"\"\"\n    t = int(time.time() * 1000)\n    # 知乎网页版登录界面有时出现的是点击倒立中文字的验证模式\n    # 请求URL是在 type=login 后面加上 &lang=cn 参数\n    # 这里强制请求输入字母类型的验证码，就不涉及到点击了\n    captcha_url = 'http://www.zhihu.com/captcha.gif?r=%s&type=login' % t\n    response = session.get(captcha_url, headers=headers)\n    with open('captcha.jpg', 'wb') as f:\n        f.write(response.content)\n        f.close()\n    image = Image.open('captcha.jpg')\n    image.show()\n    captcha = input('请输入验证码：')\n    return captcha\n```\n\n\n\n# 登录知乎\n\n利用上面登录参数成功登录后，后面对知乎的访问都使用 cookies 进行，为了方便直接采用 requests 的 会话对象来保持 cookies ：\n\n```python\nsession = requests.Session()\ndef test_login():\n    \"\"\"\n    测试是否登录成功，并显示欢迎词\n    此函数非必须\n    \"\"\"\n    url = \"https://www.zhihu.com/\"\n    response = session.get(url, headers=headers, allow_redirects=False)\n    html = response.text\n    pattern = re.compile(r'<span\\sclass=\"name\">(.*)</span>')\n    name = re.findall(pattern, html)[0]\n    print('%s , Welcome back to Zhihu!' % name)\n    print()\n    print('首页内容标题：')\n    pattern2 = re.compile(r'<a\\sclass=\"question_link\"\\shref=\"/question/[0-9]{1,}#answer-[0-9]{1,}\"\\starget=\"_blank\"\\sdata-id=\"[0-9]{1,}\">\\n(.*)\\n</a>')\n    question = re.findall(pattern2, html)\n    for title in question:\n        print(title)\n```\n\n**返回的结果：**\n\n{% asset_img 首页内容标题.png 首页内容标题 %}\n\n\n\n# 项目地址\n\n[GitHub - wish007/zhihu](https://github.com/wish007/zhihu)\n\n","source":"_posts/知乎爬虫.md","raw":"---\ntitle: 知乎爬虫\ndate: 2016-11-05 14:19:40\ncategories: Python\ntags:\n- Python\n- 爬虫\n- 知乎\n---\n\n\n\n# 前言\n\n[知乎](http://www.zhihu.com/)是一个有趣的网站，当前（2016.11.05） [Alexa 全球排名](http://www.alexa.com/siteinfo/zhihu.com)为 112 ，中国排名为 24 ，从趋势看排名仍会上升，相对活跃的用户群为知乎沉淀了大量的数据，是否可以转化这些数据来做一些有趣的东西就看大家的想象力了。\n\n想必很多人都爬取过知乎，知乎的反爬虫机制也越来越强，攻防双方都在不断地升级。这篇文章只涉及到登录知乎，完成后再拓展其他功能。\n\n\n\n# Python库\n\n- [Requests](http://docs.python-requests.org/zh_CN/latest/) ：HTTP for Humans \n- [Pillow](https://pypi.python.org/pypi/Pillow/3.4.2) ：Python 图像处理库\n- Chrome开发者工具：获取 HTTP 通信过程\n\n\n\n\n# 获取登录参数\n\n打开知乎登录页面，可以看到有手机号和邮箱为账号名 2 种登录方式，尝试输入手机号、邮箱分别从 Network 控制台查看；记得勾上`Preserve log`，否则会看不到发送账号、密码的请求。\n\n<!--more-->\n\n{% asset_img 手机号登录.png 手机号登录 %}\n\n\n\n{% asset_img 手机号FormData.png 手机号Form Data %}\n\n\n\n{% asset_img 邮箱登录.png 邮箱登录 %}\n\n\n\n{% asset_img 邮箱FormData.png 邮箱Form Data %}\n\n\n\n从图上可以看到：\n\n手机号登录的请求 URL ：https://www.zhihu.com/login/phone_num\n\npassword、phone_num 分别为密码、手机号\n\n邮箱登录的请求 URL ：https://www.zhihu.com/login/email\n\npassword、email 分别为密码、邮箱\n\n但它们都有一个参数 _xsrf 的值来源不明，看名字很容易猜想是一个防止跨站请求伪造的参数，在点击“登录”按钮前就已经产生，根据它的值在页面的 HTML 文件中可以搜索到：\n\n{% asset_img xsrf.png xsrf %}\n\n**获取 _xsrf 的函数：**\n\n```python\ndef get_xsrf():\n    \"\"\"\n    获取_xrsf\n    \"\"\"\n    response = session.get('https://www.zhihu.com', headers=headers)\n    html = response.text\n    pattern = re.compile(r'<input type=\"hidden\" name=\"_xsrf\" value=\"(.*?)\"/>')\n    _xsrf = re.findall(pattern, html)\n    return _xsrf[0]\n```\n\n\n\n至此所有的登录参数都找到了，根据这些参数发送登录请求，会返回类似这样的响应：\n\n```json\n{\n    \"r\": 1,\n    \"errcode\": 100000,\n    \n    \"data\": {\"account\":\"\\u5e10\\u53f7\\u6216\\u5bc6\\u7801\\u9519\\u8bef\"},\n    \n    \n    \"msg\": \"\\u8be5\\u624b\\u673a\\u53f7\\u5c1a\\u672a\\u6ce8\\u518c\\u77e5\\u4e4e\"\n    \n}\n```\n\n对比成功登录和登录失败，发现返回`\"r\": 0`表示登录成功，`\"r\": 1`表示登录失败。然而尝试了几次登录之后，后面的登录都失败了，从浏览器中发现有时会出现验证码的情况，仅仅发送前面发现的几个参数还不够，从控制台中看到英文、中文验证码分别对应下面 2 种 Form Data：\n\n{% asset_img 英文验证码.png 英文验证码 %}\n\n\n\n参数值就是验证码中的英文字母\n\n{% asset_img 中文验证码.png 中文验证码 %}\n\n\n\n{% asset_img 验证码分辨率.png 验证码分辨率 %}\n\n\n\n{% asset_img 中文验证码FormData.png 中文验证码Form Data %}\n\n\n\n增加一个参数值`captcha_type: cn`，`captcha`的`img_size`分别是图片横纵分辨率的 1/2 ，`input_points`是点击的标记在图中坐标系中的坐标。\n\n\n\n# 获取验证码\n\n从控制台中查看获取验证码的请求：\n\n{% asset_img 获取验证码.png 获取验证码 %}\n\n\n\n可以看到验证码的请求 URL ：https://www.zhihu.com/captcha.gif?r=1478334713478&type=login ，并且每次刷新验证码的请求 URL 都不一样，Google 求救后发现`r`后面的参数是一个时间戳。\n\n> 时间戳是指格林尼治时间1970年01月01日00时00分00秒(北京时间1970年01月01日08时00分00秒)起至现在的总秒数。\n\n无论是英文字母还是倒立中文的验证码，识别起来都比较困难，暂时只能采用人工识别的方式输入验证码，自动识别验证码可以在以后学习图像处理时挑战一下。\n\n**获取验证码的函数：**\n\n```python\ndef get_captcha():\n    \"\"\"\n    获取验证码\n    \"\"\"\n    t = int(time.time() * 1000)\n    # 知乎网页版登录界面有时出现的是点击倒立中文字的验证模式\n    # 请求URL是在 type=login 后面加上 &lang=cn 参数\n    # 这里强制请求输入字母类型的验证码，就不涉及到点击了\n    captcha_url = 'http://www.zhihu.com/captcha.gif?r=%s&type=login' % t\n    response = session.get(captcha_url, headers=headers)\n    with open('captcha.jpg', 'wb') as f:\n        f.write(response.content)\n        f.close()\n    image = Image.open('captcha.jpg')\n    image.show()\n    captcha = input('请输入验证码：')\n    return captcha\n```\n\n\n\n# 登录知乎\n\n利用上面登录参数成功登录后，后面对知乎的访问都使用 cookies 进行，为了方便直接采用 requests 的 会话对象来保持 cookies ：\n\n```python\nsession = requests.Session()\ndef test_login():\n    \"\"\"\n    测试是否登录成功，并显示欢迎词\n    此函数非必须\n    \"\"\"\n    url = \"https://www.zhihu.com/\"\n    response = session.get(url, headers=headers, allow_redirects=False)\n    html = response.text\n    pattern = re.compile(r'<span\\sclass=\"name\">(.*)</span>')\n    name = re.findall(pattern, html)[0]\n    print('%s , Welcome back to Zhihu!' % name)\n    print()\n    print('首页内容标题：')\n    pattern2 = re.compile(r'<a\\sclass=\"question_link\"\\shref=\"/question/[0-9]{1,}#answer-[0-9]{1,}\"\\starget=\"_blank\"\\sdata-id=\"[0-9]{1,}\">\\n(.*)\\n</a>')\n    question = re.findall(pattern2, html)\n    for title in question:\n        print(title)\n```\n\n**返回的结果：**\n\n{% asset_img 首页内容标题.png 首页内容标题 %}\n\n\n\n# 项目地址\n\n[GitHub - wish007/zhihu](https://github.com/wish007/zhihu)\n\n","slug":"知乎爬虫","published":1,"updated":"2016-11-05T12:31:11.762Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz485coj0018kocekb13yxpf","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p><a href=\"http://www.zhihu.com/\" target=\"_blank\" rel=\"external\">知乎</a>是一个有趣的网站，当前（2016.11.05） <a href=\"http://www.alexa.com/siteinfo/zhihu.com\" target=\"_blank\" rel=\"external\">Alexa 全球排名</a>为 112 ，中国排名为 24 ，从趋势看排名仍会上升，相对活跃的用户群为知乎沉淀了大量的数据，是否可以转化这些数据来做一些有趣的东西就看大家的想象力了。</p>\n<p>想必很多人都爬取过知乎，知乎的反爬虫机制也越来越强，攻防双方都在不断地升级。这篇文章只涉及到登录知乎，完成后再拓展其他功能。</p>\n<h1 id=\"Python库\"><a href=\"#Python库\" class=\"headerlink\" title=\"Python库\"></a>Python库</h1><ul>\n<li><a href=\"http://docs.python-requests.org/zh_CN/latest/\" target=\"_blank\" rel=\"external\">Requests</a> ：HTTP for Humans </li>\n<li><a href=\"https://pypi.python.org/pypi/Pillow/3.4.2\" target=\"_blank\" rel=\"external\">Pillow</a> ：Python 图像处理库</li>\n<li>Chrome开发者工具：获取 HTTP 通信过程</li>\n</ul>\n<h1 id=\"获取登录参数\"><a href=\"#获取登录参数\" class=\"headerlink\" title=\"获取登录参数\"></a>获取登录参数</h1><p>打开知乎登录页面，可以看到有手机号和邮箱为账号名 2 种登录方式，尝试输入手机号、邮箱分别从 Network 控制台查看；记得勾上<code>Preserve log</code>，否则会看不到发送账号、密码的请求。</p>\n<a id=\"more\"></a>\n<img src=\"/2016/11/05/知乎爬虫/手机号登录.png\" alt=\"手机号登录\" title=\"手机号登录\">\n<img src=\"/2016/11/05/知乎爬虫/手机号FormData.png\" alt=\"手机号Form Data\" title=\"手机号Form Data\">\n<img src=\"/2016/11/05/知乎爬虫/邮箱登录.png\" alt=\"邮箱登录\" title=\"邮箱登录\">\n<img src=\"/2016/11/05/知乎爬虫/邮箱FormData.png\" alt=\"邮箱Form Data\" title=\"邮箱Form Data\">\n<p>从图上可以看到：</p>\n<p>手机号登录的请求 URL ：<a href=\"https://www.zhihu.com/login/phone_num\" target=\"_blank\" rel=\"external\">https://www.zhihu.com/login/phone_num</a></p>\n<p>password、phone_num 分别为密码、手机号</p>\n<p>邮箱登录的请求 URL ：<a href=\"https://www.zhihu.com/login/email\" target=\"_blank\" rel=\"external\">https://www.zhihu.com/login/email</a></p>\n<p>password、email 分别为密码、邮箱</p>\n<p>但它们都有一个参数 _xsrf 的值来源不明，看名字很容易猜想是一个防止跨站请求伪造的参数，在点击“登录”按钮前就已经产生，根据它的值在页面的 HTML 文件中可以搜索到：</p>\n<img src=\"/2016/11/05/知乎爬虫/xsrf.png\" alt=\"xsrf\" title=\"xsrf\">\n<p><strong>获取 _xsrf 的函数：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_xsrf</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</span></div><div class=\"line\">    获取_xrsf</div><div class=\"line\">    \"\"\"</div><div class=\"line\">    response = session.get(<span class=\"string\">'https://www.zhihu.com'</span>, headers=headers)</div><div class=\"line\">    html = response.text</div><div class=\"line\">    pattern = re.compile(<span class=\"string\">r'&lt;input type=\"hidden\" name=\"_xsrf\" value=\"(.*?)\"/&gt;'</span>)</div><div class=\"line\">    _xsrf = re.findall(pattern, html)</div><div class=\"line\">    <span class=\"keyword\">return</span> _xsrf[<span class=\"number\">0</span>]</div></pre></td></tr></table></figure>\n<p>至此所有的登录参数都找到了，根据这些参数发送登录请求，会返回类似这样的响应：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"r\"</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"attr\">\"errcode\"</span>: <span class=\"number\">100000</span>,</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"attr\">\"data\"</span>: &#123;<span class=\"attr\">\"account\"</span>:<span class=\"string\">\"\\u5e10\\u53f7\\u6216\\u5bc6\\u7801\\u9519\\u8bef\"</span>&#125;,</div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">    <span class=\"attr\">\"msg\"</span>: <span class=\"string\">\"\\u8be5\\u624b\\u673a\\u53f7\\u5c1a\\u672a\\u6ce8\\u518c\\u77e5\\u4e4e\"</span></div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>对比成功登录和登录失败，发现返回<code>&quot;r&quot;: 0</code>表示登录成功，<code>&quot;r&quot;: 1</code>表示登录失败。然而尝试了几次登录之后，后面的登录都失败了，从浏览器中发现有时会出现验证码的情况，仅仅发送前面发现的几个参数还不够，从控制台中看到英文、中文验证码分别对应下面 2 种 Form Data：</p>\n<img src=\"/2016/11/05/知乎爬虫/英文验证码.png\" alt=\"英文验证码\" title=\"英文验证码\">\n<p>参数值就是验证码中的英文字母</p>\n<img src=\"/2016/11/05/知乎爬虫/中文验证码.png\" alt=\"中文验证码\" title=\"中文验证码\">\n<img src=\"/2016/11/05/知乎爬虫/验证码分辨率.png\" alt=\"验证码分辨率\" title=\"验证码分辨率\">\n<img src=\"/2016/11/05/知乎爬虫/中文验证码FormData.png\" alt=\"中文验证码Form Data\" title=\"中文验证码Form Data\">\n<p>增加一个参数值<code>captcha_type: cn</code>，<code>captcha</code>的<code>img_size</code>分别是图片横纵分辨率的 1/2 ，<code>input_points</code>是点击的标记在图中坐标系中的坐标。</p>\n<h1 id=\"获取验证码\"><a href=\"#获取验证码\" class=\"headerlink\" title=\"获取验证码\"></a>获取验证码</h1><p>从控制台中查看获取验证码的请求：</p>\n<img src=\"/2016/11/05/知乎爬虫/获取验证码.png\" alt=\"获取验证码\" title=\"获取验证码\">\n<p>可以看到验证码的请求 URL ：<a href=\"https://www.zhihu.com/captcha.gif?r=1478334713478&amp;type=login\" target=\"_blank\" rel=\"external\">https://www.zhihu.com/captcha.gif?r=1478334713478&amp;type=login</a> ，并且每次刷新验证码的请求 URL 都不一样，Google 求救后发现<code>r</code>后面的参数是一个时间戳。</p>\n<blockquote>\n<p>时间戳是指格林尼治时间1970年01月01日00时00分00秒(北京时间1970年01月01日08时00分00秒)起至现在的总秒数。</p>\n</blockquote>\n<p>无论是英文字母还是倒立中文的验证码，识别起来都比较困难，暂时只能采用人工识别的方式输入验证码，自动识别验证码可以在以后学习图像处理时挑战一下。</p>\n<p><strong>获取验证码的函数：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_captcha</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</span></div><div class=\"line\">    获取验证码</div><div class=\"line\">    \"\"\"</div><div class=\"line\">    t = int(time.time() * <span class=\"number\">1000</span>)</div><div class=\"line\">    <span class=\"comment\"># 知乎网页版登录界面有时出现的是点击倒立中文字的验证模式</span></div><div class=\"line\">    <span class=\"comment\"># 请求URL是在 type=login 后面加上 &amp;lang=cn 参数</span></div><div class=\"line\">    <span class=\"comment\"># 这里强制请求输入字母类型的验证码，就不涉及到点击了</span></div><div class=\"line\">    captcha_url = <span class=\"string\">'http://www.zhihu.com/captcha.gif?r=%s&amp;type=login'</span> % t</div><div class=\"line\">    response = session.get(captcha_url, headers=headers)</div><div class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">'captcha.jpg'</span>, <span class=\"string\">'wb'</span>) <span class=\"keyword\">as</span> f:</div><div class=\"line\">        f.write(response.content)</div><div class=\"line\">        f.close()</div><div class=\"line\">    image = Image.open(<span class=\"string\">'captcha.jpg'</span>)</div><div class=\"line\">    image.show()</div><div class=\"line\">    captcha = input(<span class=\"string\">'请输入验证码：'</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> captcha</div></pre></td></tr></table></figure>\n<h1 id=\"登录知乎\"><a href=\"#登录知乎\" class=\"headerlink\" title=\"登录知乎\"></a>登录知乎</h1><p>利用上面登录参数成功登录后，后面对知乎的访问都使用 cookies 进行，为了方便直接采用 requests 的 会话对象来保持 cookies ：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">session = requests.Session()</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_login</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</span></div><div class=\"line\">    测试是否登录成功，并显示欢迎词</div><div class=\"line\">    此函数非必须</div><div class=\"line\">    \"\"\"</div><div class=\"line\">    url = <span class=\"string\">\"https://www.zhihu.com/\"</span></div><div class=\"line\">    response = session.get(url, headers=headers, allow_redirects=<span class=\"keyword\">False</span>)</div><div class=\"line\">    html = response.text</div><div class=\"line\">    pattern = re.compile(<span class=\"string\">r'&lt;span\\sclass=\"name\"&gt;(.*)&lt;/span&gt;'</span>)</div><div class=\"line\">    name = re.findall(pattern, html)[<span class=\"number\">0</span>]</div><div class=\"line\">    print(<span class=\"string\">'%s , Welcome back to Zhihu!'</span> % name)</div><div class=\"line\">    print()</div><div class=\"line\">    print(<span class=\"string\">'首页内容标题：'</span>)</div><div class=\"line\">    pattern2 = re.compile(<span class=\"string\">r'&lt;a\\sclass=\"question_link\"\\shref=\"/question/[0-9]&#123;1,&#125;#answer-[0-9]&#123;1,&#125;\"\\starget=\"_blank\"\\sdata-id=\"[0-9]&#123;1,&#125;\"&gt;\\n(.*)\\n&lt;/a&gt;'</span>)</div><div class=\"line\">    question = re.findall(pattern2, html)</div><div class=\"line\">    <span class=\"keyword\">for</span> title <span class=\"keyword\">in</span> question:</div><div class=\"line\">        print(title)</div></pre></td></tr></table></figure>\n<p><strong>返回的结果：</strong></p>\n<img src=\"/2016/11/05/知乎爬虫/首页内容标题.png\" alt=\"首页内容标题\" title=\"首页内容标题\">\n<h1 id=\"项目地址\"><a href=\"#项目地址\" class=\"headerlink\" title=\"项目地址\"></a>项目地址</h1><p><a href=\"https://github.com/wish007/zhihu\" target=\"_blank\" rel=\"external\">GitHub - wish007/zhihu</a></p>\n","excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p><a href=\"http://www.zhihu.com/\">知乎</a>是一个有趣的网站，当前（2016.11.05） <a href=\"http://www.alexa.com/siteinfo/zhihu.com\">Alexa 全球排名</a>为 112 ，中国排名为 24 ，从趋势看排名仍会上升，相对活跃的用户群为知乎沉淀了大量的数据，是否可以转化这些数据来做一些有趣的东西就看大家的想象力了。</p>\n<p>想必很多人都爬取过知乎，知乎的反爬虫机制也越来越强，攻防双方都在不断地升级。这篇文章只涉及到登录知乎，完成后再拓展其他功能。</p>\n<h1 id=\"Python库\"><a href=\"#Python库\" class=\"headerlink\" title=\"Python库\"></a>Python库</h1><ul>\n<li><a href=\"http://docs.python-requests.org/zh_CN/latest/\">Requests</a> ：HTTP for Humans </li>\n<li><a href=\"https://pypi.python.org/pypi/Pillow/3.4.2\">Pillow</a> ：Python 图像处理库</li>\n<li>Chrome开发者工具：获取 HTTP 通信过程</li>\n</ul>\n<h1 id=\"获取登录参数\"><a href=\"#获取登录参数\" class=\"headerlink\" title=\"获取登录参数\"></a>获取登录参数</h1><p>打开知乎登录页面，可以看到有手机号和邮箱为账号名 2 种登录方式，尝试输入手机号、邮箱分别从 Network 控制台查看；记得勾上<code>Preserve log</code>，否则会看不到发送账号、密码的请求。</p>","more":"<img src=\"/2016/11/05/知乎爬虫/手机号登录.png\" alt=\"手机号登录\" title=\"手机号登录\">\n<img src=\"/2016/11/05/知乎爬虫/手机号FormData.png\" alt=\"手机号Form Data\" title=\"手机号Form Data\">\n<img src=\"/2016/11/05/知乎爬虫/邮箱登录.png\" alt=\"邮箱登录\" title=\"邮箱登录\">\n<img src=\"/2016/11/05/知乎爬虫/邮箱FormData.png\" alt=\"邮箱Form Data\" title=\"邮箱Form Data\">\n<p>从图上可以看到：</p>\n<p>手机号登录的请求 URL ：<a href=\"https://www.zhihu.com/login/phone_num\">https://www.zhihu.com/login/phone_num</a></p>\n<p>password、phone_num 分别为密码、手机号</p>\n<p>邮箱登录的请求 URL ：<a href=\"https://www.zhihu.com/login/email\">https://www.zhihu.com/login/email</a></p>\n<p>password、email 分别为密码、邮箱</p>\n<p>但它们都有一个参数 _xsrf 的值来源不明，看名字很容易猜想是一个防止跨站请求伪造的参数，在点击“登录”按钮前就已经产生，根据它的值在页面的 HTML 文件中可以搜索到：</p>\n<img src=\"/2016/11/05/知乎爬虫/xsrf.png\" alt=\"xsrf\" title=\"xsrf\">\n<p><strong>获取 _xsrf 的函数：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_xsrf</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</div><div class=\"line\">    获取_xrsf</div><div class=\"line\">    \"\"\"</span></div><div class=\"line\">    response = session.get(<span class=\"string\">'https://www.zhihu.com'</span>, headers=headers)</div><div class=\"line\">    html = response.text</div><div class=\"line\">    pattern = re.compile(<span class=\"string\">r'&lt;input type=\"hidden\" name=\"_xsrf\" value=\"(.*?)\"/&gt;'</span>)</div><div class=\"line\">    _xsrf = re.findall(pattern, html)</div><div class=\"line\">    <span class=\"keyword\">return</span> _xsrf[<span class=\"number\">0</span>]</div></pre></td></tr></table></figure>\n<p>至此所有的登录参数都找到了，根据这些参数发送登录请求，会返回类似这样的响应：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"r\"</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"attr\">\"errcode\"</span>: <span class=\"number\">100000</span>,</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"attr\">\"data\"</span>: &#123;<span class=\"attr\">\"account\"</span>:<span class=\"string\">\"\\u5e10\\u53f7\\u6216\\u5bc6\\u7801\\u9519\\u8bef\"</span>&#125;,</div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">    <span class=\"attr\">\"msg\"</span>: <span class=\"string\">\"\\u8be5\\u624b\\u673a\\u53f7\\u5c1a\\u672a\\u6ce8\\u518c\\u77e5\\u4e4e\"</span></div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>对比成功登录和登录失败，发现返回<code>&quot;r&quot;: 0</code>表示登录成功，<code>&quot;r&quot;: 1</code>表示登录失败。然而尝试了几次登录之后，后面的登录都失败了，从浏览器中发现有时会出现验证码的情况，仅仅发送前面发现的几个参数还不够，从控制台中看到英文、中文验证码分别对应下面 2 种 Form Data：</p>\n<img src=\"/2016/11/05/知乎爬虫/英文验证码.png\" alt=\"英文验证码\" title=\"英文验证码\">\n<p>参数值就是验证码中的英文字母</p>\n<img src=\"/2016/11/05/知乎爬虫/中文验证码.png\" alt=\"中文验证码\" title=\"中文验证码\">\n<img src=\"/2016/11/05/知乎爬虫/验证码分辨率.png\" alt=\"验证码分辨率\" title=\"验证码分辨率\">\n<img src=\"/2016/11/05/知乎爬虫/中文验证码FormData.png\" alt=\"中文验证码Form Data\" title=\"中文验证码Form Data\">\n<p>增加一个参数值<code>captcha_type: cn</code>，<code>captcha</code>的<code>img_size</code>分别是图片横纵分辨率的 1/2 ，<code>input_points</code>是点击的标记在图中坐标系中的坐标。</p>\n<h1 id=\"获取验证码\"><a href=\"#获取验证码\" class=\"headerlink\" title=\"获取验证码\"></a>获取验证码</h1><p>从控制台中查看获取验证码的请求：</p>\n<img src=\"/2016/11/05/知乎爬虫/获取验证码.png\" alt=\"获取验证码\" title=\"获取验证码\">\n<p>可以看到验证码的请求 URL ：<a href=\"https://www.zhihu.com/captcha.gif?r=1478334713478&amp;type=login\">https://www.zhihu.com/captcha.gif?r=1478334713478&amp;type=login</a> ，并且每次刷新验证码的请求 URL 都不一样，Google 求救后发现<code>r</code>后面的参数是一个时间戳。</p>\n<blockquote>\n<p>时间戳是指格林尼治时间1970年01月01日00时00分00秒(北京时间1970年01月01日08时00分00秒)起至现在的总秒数。</p>\n</blockquote>\n<p>无论是英文字母还是倒立中文的验证码，识别起来都比较困难，暂时只能采用人工识别的方式输入验证码，自动识别验证码可以在以后学习图像处理时挑战一下。</p>\n<p><strong>获取验证码的函数：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_captcha</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</div><div class=\"line\">    获取验证码</div><div class=\"line\">    \"\"\"</span></div><div class=\"line\">    t = int(time.time() * <span class=\"number\">1000</span>)</div><div class=\"line\">    <span class=\"comment\"># 知乎网页版登录界面有时出现的是点击倒立中文字的验证模式</span></div><div class=\"line\">    <span class=\"comment\"># 请求URL是在 type=login 后面加上 &amp;lang=cn 参数</span></div><div class=\"line\">    <span class=\"comment\"># 这里强制请求输入字母类型的验证码，就不涉及到点击了</span></div><div class=\"line\">    captcha_url = <span class=\"string\">'http://www.zhihu.com/captcha.gif?r=%s&amp;type=login'</span> % t</div><div class=\"line\">    response = session.get(captcha_url, headers=headers)</div><div class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">'captcha.jpg'</span>, <span class=\"string\">'wb'</span>) <span class=\"keyword\">as</span> f:</div><div class=\"line\">        f.write(response.content)</div><div class=\"line\">        f.close()</div><div class=\"line\">    image = Image.open(<span class=\"string\">'captcha.jpg'</span>)</div><div class=\"line\">    image.show()</div><div class=\"line\">    captcha = input(<span class=\"string\">'请输入验证码：'</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> captcha</div></pre></td></tr></table></figure>\n<h1 id=\"登录知乎\"><a href=\"#登录知乎\" class=\"headerlink\" title=\"登录知乎\"></a>登录知乎</h1><p>利用上面登录参数成功登录后，后面对知乎的访问都使用 cookies 进行，为了方便直接采用 requests 的 会话对象来保持 cookies ：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">session = requests.Session()</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_login</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</div><div class=\"line\">    测试是否登录成功，并显示欢迎词</div><div class=\"line\">    此函数非必须</div><div class=\"line\">    \"\"\"</span></div><div class=\"line\">    url = <span class=\"string\">\"https://www.zhihu.com/\"</span></div><div class=\"line\">    response = session.get(url, headers=headers, allow_redirects=<span class=\"keyword\">False</span>)</div><div class=\"line\">    html = response.text</div><div class=\"line\">    pattern = re.compile(<span class=\"string\">r'&lt;span\\sclass=\"name\"&gt;(.*)&lt;/span&gt;'</span>)</div><div class=\"line\">    name = re.findall(pattern, html)[<span class=\"number\">0</span>]</div><div class=\"line\">    print(<span class=\"string\">'%s , Welcome back to Zhihu!'</span> % name)</div><div class=\"line\">    print()</div><div class=\"line\">    print(<span class=\"string\">'首页内容标题：'</span>)</div><div class=\"line\">    pattern2 = re.compile(<span class=\"string\">r'&lt;a\\sclass=\"question_link\"\\shref=\"/question/[0-9]&#123;1,&#125;#answer-[0-9]&#123;1,&#125;\"\\starget=\"_blank\"\\sdata-id=\"[0-9]&#123;1,&#125;\"&gt;\\n(.*)\\n&lt;/a&gt;'</span>)</div><div class=\"line\">    question = re.findall(pattern2, html)</div><div class=\"line\">    <span class=\"keyword\">for</span> title <span class=\"keyword\">in</span> question:</div><div class=\"line\">        print(title)</div></pre></td></tr></table></figure>\n<p><strong>返回的结果：</strong></p>\n<img src=\"/2016/11/05/知乎爬虫/首页内容标题.png\" alt=\"首页内容标题\" title=\"首页内容标题\">\n<h1 id=\"项目地址\"><a href=\"#项目地址\" class=\"headerlink\" title=\"项目地址\"></a>项目地址</h1><p><a href=\"https://github.com/wish007/zhihu\">GitHub - wish007/zhihu</a></p>"}],"PostAsset":[{"_id":"source/_posts/用Requests和BeautifulSoup爬取妹子图/meizitu.png","slug":"meizitu.png","post":"ciz485coh0016koce45erpgqj","modified":0,"renderable":0},{"_id":"source/_posts/搭建Django博客（1）环境准备与连接数据库/WelcomeToDjango.png","slug":"WelcomeToDjango.png","post":"ciz485cmt000dkoceszz0wesi","modified":0,"renderable":0},{"_id":"source/_posts/在Hexo中插入图片/mountain.jpg","slug":"mountain.jpg","post":"ciz485cmr000bkoceddmb7s4e","modified":0,"renderable":0},{"_id":"source/_posts/搭建Django博客（3）网页处理逻辑/flow.png","slug":"flow.png","post":"ciz485cn9000ikocezrmri47s","modified":0,"renderable":0},{"_id":"source/_posts/搭建Django博客（6）代码高亮及后台Markdown编辑器/markdown_editor.png","slug":"markdown_editor.png","post":"ciz485cny000ukoceasxlttz8","modified":0,"renderable":0},{"_id":"source/_posts/搭建Django博客（8）部署Django博客到VPS/deploy.png","slug":"deploy.png","post":"ciz485co0000xkocezf3749zz","modified":0,"renderable":0},{"_id":"source/_posts/Git初体验/addsshkey.png","slug":"addsshkey.png","post":"ciz485cly0002koceeardam5t","modified":0,"renderable":0},{"_id":"source/_posts/Git初体验/git.jpg","slug":"git.jpg","post":"ciz485cly0002koceeardam5t","modified":0,"renderable":0},{"_id":"source/_posts/使用uWSGI和Nginx部署Flask/uwsgi.png","slug":"uwsgi.png","post":"ciz485cmj0008kocej2j2yp2n","modified":0,"renderable":0},{"_id":"source/_posts/使用uWSGI和Nginx部署Flask/web.png","slug":"web.png","post":"ciz485cmj0008kocej2j2yp2n","modified":0,"renderable":0},{"_id":"source/_posts/搭建Django博客（2）创建数据模型/admin.png","slug":"admin.png","post":"ciz485cmy000gkocek3yrrmo1","modified":0,"renderable":0},{"_id":"source/_posts/搭建Django博客（2）创建数据模型/login.png","slug":"login.png","post":"ciz485cmy000gkocek3yrrmo1","modified":0,"renderable":0},{"_id":"source/_posts/搭建Django博客（7）Django 博客搭建总结/archives.png","slug":"archives.png","post":"ciz485cnu000pkoceujtonpld","modified":0,"renderable":0},{"_id":"source/_posts/搭建Django博客（7）Django 博客搭建总结/home.png","slug":"home.png","post":"ciz485cnu000pkoceujtonpld","modified":0,"renderable":0},{"_id":"source/_posts/搭建Django博客（7）Django 博客搭建总结/post.png","slug":"post.png","post":"ciz485cnu000pkoceujtonpld","modified":0,"renderable":0},{"_id":"source/_posts/模拟登陆无线路由器（TL-WDR5600）/stok.png","slug":"stok.png","post":"ciz485co30010kocemofc2xnx","modified":0,"renderable":0},{"_id":"source/_posts/模拟登陆无线路由器（TL-WDR5600）/加密函数1.png","slug":"加密函数1.png","post":"ciz485co30010kocemofc2xnx","modified":0,"renderable":0},{"_id":"source/_posts/模拟登陆无线路由器（TL-WDR5600）/加密函数2.png","slug":"加密函数2.png","post":"ciz485co30010kocemofc2xnx","modified":0,"renderable":0},{"_id":"source/_posts/模拟登陆无线路由器（TL-WDR5600）/抓取结果.png","slug":"抓取结果.png","post":"ciz485co30010kocemofc2xnx","modified":0,"renderable":0},{"_id":"source/_posts/模拟登陆无线路由器（TL-WDR5600）/登录.png","slug":"登录.png","post":"ciz485co30010kocemofc2xnx","modified":0,"renderable":0},{"_id":"source/_posts/模拟登陆无线路由器（TL-WDR5600）/登录界面.png","slug":"登录界面.png","post":"ciz485co30010kocemofc2xnx","modified":0,"renderable":0},{"_id":"source/_posts/模拟登陆无线路由器（TL-WDR5600）/获取数据.png","slug":"获取数据.png","post":"ciz485co30010kocemofc2xnx","modified":0,"renderable":0},{"_id":"source/_posts/知乎爬虫/xsrf.png","slug":"xsrf.png","post":"ciz485coj0018kocekb13yxpf","modified":0,"renderable":0},{"_id":"source/_posts/知乎爬虫/中文验证码.png","slug":"中文验证码.png","post":"ciz485coj0018kocekb13yxpf","modified":0,"renderable":0},{"_id":"source/_posts/知乎爬虫/中文验证码FormData.png","slug":"中文验证码FormData.png","post":"ciz485coj0018kocekb13yxpf","modified":0,"renderable":0},{"_id":"source/_posts/知乎爬虫/手机号FormData.png","slug":"手机号FormData.png","post":"ciz485coj0018kocekb13yxpf","modified":0,"renderable":0},{"_id":"source/_posts/知乎爬虫/手机号登录.png","slug":"手机号登录.png","post":"ciz485coj0018kocekb13yxpf","modified":0,"renderable":0},{"_id":"source/_posts/知乎爬虫/英文验证码.png","slug":"英文验证码.png","post":"ciz485coj0018kocekb13yxpf","modified":0,"renderable":0},{"_id":"source/_posts/知乎爬虫/获取验证码.png","slug":"获取验证码.png","post":"ciz485coj0018kocekb13yxpf","modified":0,"renderable":0},{"_id":"source/_posts/知乎爬虫/邮箱FormData.png","slug":"邮箱FormData.png","post":"ciz485coj0018kocekb13yxpf","modified":0,"renderable":0},{"_id":"source/_posts/知乎爬虫/邮箱登录.png","slug":"邮箱登录.png","post":"ciz485coj0018kocekb13yxpf","modified":0,"renderable":0},{"_id":"source/_posts/知乎爬虫/首页内容标题.png","slug":"首页内容标题.png","post":"ciz485coj0018kocekb13yxpf","modified":0,"renderable":0},{"_id":"source/_posts/知乎爬虫/验证码分辨率.png","slug":"验证码分辨率.png","post":"ciz485coj0018kocekb13yxpf","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ciz485clp0000kocern4c57t5","category_id":"ciz485cm30004koceie3ocskw","_id":"ciz485cmt000ckoce4besx59y"},{"post_id":"ciz485cly0002koceeardam5t","category_id":"ciz485cmn0009kocean0wplq2","_id":"ciz485cna000jkocevfgewcga"},{"post_id":"ciz485cmc0006koce1twt1rcy","category_id":"ciz485cm30004koceie3ocskw","_id":"ciz485cnv000qkocec7f59acp"},{"post_id":"ciz485cmf0007koce7kqm4yin","category_id":"ciz485cnb000lkocewmptmm4o","_id":"ciz485cnz000vkoce2wao6tq0"},{"post_id":"ciz485cmj0008kocej2j2yp2n","category_id":"ciz485cnw000rkoceh8oy4w0s","_id":"ciz485coa0011koce48u849qm"},{"post_id":"ciz485co30010kocemofc2xnx","category_id":"ciz485cm30004koceie3ocskw","_id":"ciz485coj0017kocekz124edr"},{"post_id":"ciz485cmr000bkoceddmb7s4e","category_id":"ciz485co0000wkocec63cp28k","_id":"ciz485con001bkoceo89k2tx8"},{"post_id":"ciz485cob0013koce7ra9g2o3","category_id":"ciz485co0000wkocec63cp28k","_id":"ciz485coo001dkoce7dj43vi1"},{"post_id":"ciz485coh0016koce45erpgqj","category_id":"ciz485cm30004koceie3ocskw","_id":"ciz485coq001gkoceevrajmo6"},{"post_id":"ciz485cmt000dkoceszz0wesi","category_id":"ciz485coe0014kocei3intglk","_id":"ciz485cor001ikocealhnft3j"},{"post_id":"ciz485coj0018kocekb13yxpf","category_id":"ciz485cm30004koceie3ocskw","_id":"ciz485cov001kkoced60wjify"},{"post_id":"ciz485cmy000gkocek3yrrmo1","category_id":"ciz485coe0014kocei3intglk","_id":"ciz485cow001mkoce172nebr0"},{"post_id":"ciz485cn9000ikocezrmri47s","category_id":"ciz485coe0014kocei3intglk","_id":"ciz485cow001okocekbfvqllo"},{"post_id":"ciz485cni000nkocekms8rvew","category_id":"ciz485coe0014kocei3intglk","_id":"ciz485coy001qkocegx1x0tz3"},{"post_id":"ciz485cnu000pkoceujtonpld","category_id":"ciz485coe0014kocei3intglk","_id":"ciz485cp0001tkocetaa75auk"},{"post_id":"ciz485cnx000tkocek2s3g386","category_id":"ciz485coe0014kocei3intglk","_id":"ciz485cp3001wkoceu6lo13nf"},{"post_id":"ciz485cny000ukoceasxlttz8","category_id":"ciz485coe0014kocei3intglk","_id":"ciz485cp50020kocexnd09fdu"},{"post_id":"ciz485co0000xkocezf3749zz","category_id":"ciz485coe0014kocei3intglk","_id":"ciz485cp60024koce7ljhgq4d"}],"PostTag":[{"post_id":"ciz485clp0000kocern4c57t5","tag_id":"ciz485cmb0005kocelah8bfii","_id":"ciz485cmz000hkocexpt0jy2w"},{"post_id":"ciz485clp0000kocern4c57t5","tag_id":"ciz485cmo000akoceylz15hbt","_id":"ciz485cna000kkocew66jost4"},{"post_id":"ciz485cly0002koceeardam5t","tag_id":"ciz485cmw000fkoceuk0365pp","_id":"ciz485cnk000okoceji80b0eo"},{"post_id":"ciz485cmc0006koce1twt1rcy","tag_id":"ciz485cni000mkoce81mtirki","_id":"ciz485co2000zkocemhfcpdpp"},{"post_id":"ciz485cmc0006koce1twt1rcy","tag_id":"ciz485cnx000skocexsxbujst","_id":"ciz485cob0012koces80vxv8q"},{"post_id":"ciz485cmf0007koce7kqm4yin","tag_id":"ciz485co1000ykoceljy0ra7t","_id":"ciz485coo001ckoce4s6pgfgj"},{"post_id":"ciz485cmf0007koce7kqm4yin","tag_id":"ciz485coe0015koce5ojjqzgs","_id":"ciz485coq001fkocexb9ndjig"},{"post_id":"ciz485cmj0008kocej2j2yp2n","tag_id":"ciz485con001akoceiijiyhpg","_id":"ciz485cp4001ykocertjumu0y"},{"post_id":"ciz485cmj0008kocej2j2yp2n","tag_id":"ciz485coq001hkoce3vk4n5uj","_id":"ciz485cp5001zkoce8e3y4cza"},{"post_id":"ciz485cmj0008kocej2j2yp2n","tag_id":"ciz485cov001lkocehtcypkd4","_id":"ciz485cp60022koceyyn43037"},{"post_id":"ciz485cmj0008kocej2j2yp2n","tag_id":"ciz485cow001pkoce3g2807g1","_id":"ciz485cp60023kocerxmh7x8e"},{"post_id":"ciz485cmj0008kocej2j2yp2n","tag_id":"ciz485coz001skoceedvalkil","_id":"ciz485cp70026koce7zqgyq6y"},{"post_id":"ciz485cmr000bkoceddmb7s4e","tag_id":"ciz485cp2001vkoceeik8ukbp","_id":"ciz485cp70027kocem84dggsr"},{"post_id":"ciz485cmt000dkoceszz0wesi","tag_id":"ciz485cp50021koceisul6vpd","_id":"ciz485cp80029koce0j87lst6"},{"post_id":"ciz485cmy000gkocek3yrrmo1","tag_id":"ciz485cp50021koceisul6vpd","_id":"ciz485cp8002akoce9885u8ae"},{"post_id":"ciz485cn9000ikocezrmri47s","tag_id":"ciz485cp50021koceisul6vpd","_id":"ciz485cp9002ckoceud877qtv"},{"post_id":"ciz485cni000nkocekms8rvew","tag_id":"ciz485cp50021koceisul6vpd","_id":"ciz485cp9002ekocef35vfva0"},{"post_id":"ciz485cnu000pkoceujtonpld","tag_id":"ciz485cp50021koceisul6vpd","_id":"ciz485cp9002gkocebim65oiv"},{"post_id":"ciz485cnx000tkocek2s3g386","tag_id":"ciz485cp50021koceisul6vpd","_id":"ciz485cpa002ikoce03bqay02"},{"post_id":"ciz485cny000ukoceasxlttz8","tag_id":"ciz485cp50021koceisul6vpd","_id":"ciz485cpa002kkocely5hkdlj"},{"post_id":"ciz485co0000xkocezf3749zz","tag_id":"ciz485cp50021koceisul6vpd","_id":"ciz485cpd002skocev6jmy2wh"},{"post_id":"ciz485co0000xkocezf3749zz","tag_id":"ciz485cpb002lkocevb22kc3z","_id":"ciz485cpf002tkocephjr3a14"},{"post_id":"ciz485co0000xkocezf3749zz","tag_id":"ciz485cpb002mkoceb2gqgt9k","_id":"ciz485cpg002vkoceegrvz47t"},{"post_id":"ciz485co0000xkocezf3749zz","tag_id":"ciz485cov001lkocehtcypkd4","_id":"ciz485cph002wkoceq2ea2kat"},{"post_id":"ciz485co0000xkocezf3749zz","tag_id":"ciz485cpb002okoce4x2mige3","_id":"ciz485cpi002ykoceseolhyl3"},{"post_id":"ciz485co0000xkocezf3749zz","tag_id":"ciz485cow001pkoce3g2807g1","_id":"ciz485cpj002zkoceepqqo2l3"},{"post_id":"ciz485co0000xkocezf3749zz","tag_id":"ciz485coz001skoceedvalkil","_id":"ciz485cpl0031koce8cm0432w"},{"post_id":"ciz485co30010kocemofc2xnx","tag_id":"ciz485con001akoceiijiyhpg","_id":"ciz485cpl0032koce3n8tp87l"},{"post_id":"ciz485co30010kocemofc2xnx","tag_id":"ciz485cpf002ukoce34lb9dag","_id":"ciz485cpm0034koceluxtuqdk"},{"post_id":"ciz485co30010kocemofc2xnx","tag_id":"ciz485cph002xkoce5yeijv4x","_id":"ciz485cpm0035koce2vq67uoi"},{"post_id":"ciz485cob0013koce7ra9g2o3","tag_id":"ciz485cp2001vkoceeik8ukbp","_id":"ciz485cpm0037koce8fgwtlvb"},{"post_id":"ciz485coh0016koce45erpgqj","tag_id":"ciz485con001akoceiijiyhpg","_id":"ciz485cpn0039kocet14zyqt0"},{"post_id":"ciz485coh0016koce45erpgqj","tag_id":"ciz485cpf002ukoce34lb9dag","_id":"ciz485cpn003akoceb1kax6ns"},{"post_id":"ciz485coj0018kocekb13yxpf","tag_id":"ciz485con001akoceiijiyhpg","_id":"ciz485cpp003dkocetkpn9iv9"},{"post_id":"ciz485coj0018kocekb13yxpf","tag_id":"ciz485cpf002ukoce34lb9dag","_id":"ciz485cpp003ekoce6pwhahiy"},{"post_id":"ciz485coj0018kocekb13yxpf","tag_id":"ciz485cpo003ckocepcw02qjd","_id":"ciz485cpp003fkoce0jn19qba"}],"Tag":[{"name":"pip","_id":"ciz485cmb0005kocelah8bfii"},{"name":"easy_install","_id":"ciz485cmo000akoceylz15hbt"},{"name":"Git","_id":"ciz485cmw000fkoceuk0365pp"},{"name":"virtualenv","_id":"ciz485cni000mkoce81mtirki"},{"name":"virtualenvwrapper","_id":"ciz485cnx000skocexsxbujst"},{"name":"SQL","_id":"ciz485co1000ykoceljy0ra7t"},{"name":"MySQL","_id":"ciz485coe0015koce5ojjqzgs"},{"name":"Python","_id":"ciz485con001akoceiijiyhpg"},{"name":"Flask","_id":"ciz485coq001hkoce3vk4n5uj"},{"name":"Nginx","_id":"ciz485cov001lkocehtcypkd4"},{"name":"uWSGI","_id":"ciz485cow001pkoce3g2807g1"},{"name":"supervisor","_id":"ciz485coz001skoceedvalkil"},{"name":"Hexo","_id":"ciz485cp2001vkoceeik8ukbp"},{"name":"Django","_id":"ciz485cp50021koceisul6vpd"},{"name":"VPS","_id":"ciz485cpb002lkocevb22kc3z"},{"name":"Linux","_id":"ciz485cpb002mkoceb2gqgt9k"},{"name":"WSGI","_id":"ciz485cpb002okoce4x2mige3"},{"name":"爬虫","_id":"ciz485cpf002ukoce34lb9dag"},{"name":"无线路由器","_id":"ciz485cph002xkoce5yeijv4x"},{"name":"知乎","_id":"ciz485cpo003ckocepcw02qjd"}]}}